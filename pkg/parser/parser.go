// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"

	"github.com/davecgh/go-spew/spew"
	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentRawLine",
			pos:  position{line: 25, col: 1, offset: 462},
			expr: &actionExpr{
				pos: position{line: 26, col: 5, offset: 486},
				run: (*parser).callonDocumentRawLine1,
				expr: &seqExpr{
					pos: position{line: 26, col: 5, offset: 486},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 26, col: 5, offset: 486},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 27, col: 9, offset: 504},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 27, col: 9, offset: 504},
										name: "AttributeDeclaration",
									},
									&actionExpr{
										pos: position{line: 363, col: 19, offset: 10942},
										run: (*parser).callonDocumentRawLine6,
										expr: &seqExpr{
											pos: position{line: 363, col: 19, offset: 10942},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 363, col: 19, offset: 10942},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 363, col: 24, offset: 10947},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 321, col: 18, offset: 9768},
														run: (*parser).callonDocumentRawLine10,
														expr: &seqExpr{
															pos: position{line: 321, col: 18, offset: 9768},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 321, col: 18, offset: 9768},
																	val:        "[_\\pL\\pN]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 321, col: 28, offset: 9778},
																	expr: &charClassMatcher{
																		pos:        position{line: 321, col: 29, offset: 9779},
																		val:        "[-\\pL\\pN]",
																		chars:      []rune{'-'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 363, col: 45, offset: 10968},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 363, col: 49, offset: 10972},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonDocumentRawLine17,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonDocumentRawLine20,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 365, col: 9, offset: 11063},
										run: (*parser).callonDocumentRawLine27,
										expr: &seqExpr{
											pos: position{line: 365, col: 9, offset: 11063},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 365, col: 9, offset: 11063},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 365, col: 13, offset: 11067},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 321, col: 18, offset: 9768},
														run: (*parser).callonDocumentRawLine31,
														expr: &seqExpr{
															pos: position{line: 321, col: 18, offset: 9768},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 321, col: 18, offset: 9768},
																	val:        "[_\\pL\\pN]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 321, col: 28, offset: 9778},
																	expr: &charClassMatcher{
																		pos:        position{line: 321, col: 29, offset: 9779},
																		val:        "[-\\pL\\pN]",
																		chars:      []rune{'-'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 365, col: 34, offset: 11088},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 365, col: 39, offset: 11093},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonDocumentRawLine38,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonDocumentRawLine41,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 29, col: 11, offset: 560},
										name: "FileInclusion",
									},
									&actionExpr{
										pos: position{line: 70, col: 10, offset: 1763},
										run: (*parser).callonDocumentRawLine49,
										expr: &seqExpr{
											pos: position{line: 70, col: 10, offset: 1763},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 70, col: 10, offset: 1763},
													val:        "ifdef::",
													ignoreCase: false,
													want:       "\"ifdef::\"",
												},
												&labeledExpr{
													pos:   position{line: 70, col: 20, offset: 1773},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 127, col: 28, offset: 3551},
														run: (*parser).callonDocumentRawLine53,
														expr: &oneOrMoreExpr{
															pos: position{line: 127, col: 28, offset: 3551},
															expr: &charClassMatcher{
																pos:        position{line: 127, col: 28, offset: 3551},
																val:        "[^\\r\\n []",
																chars:      []rune{'\r', '\n', ' ', '['},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 70, col: 51, offset: 1804},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 70, col: 55, offset: 1808},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 70, col: 60, offset: 1813},
														expr: &actionExpr{
															pos: position{line: 78, col: 34, offset: 2142},
															run: (*parser).callonDocumentRawLine59,
															expr: &oneOrMoreExpr{
																pos: position{line: 78, col: 34, offset: 2142},
																expr: &charClassMatcher{
																	pos:        position{line: 78, col: 34, offset: 2142},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 70, col: 93, offset: 1846},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 70, col: 97, offset: 1850},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonDocumentRawLine64,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2916, col: 8, offset: 92080},
													expr: &anyMatcher{
														line: 2916, col: 9, offset: 92081,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 74, col: 11, offset: 1940},
										run: (*parser).callonDocumentRawLine68,
										expr: &seqExpr{
											pos: position{line: 74, col: 11, offset: 1940},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 74, col: 11, offset: 1940},
													val:        "ifndef::",
													ignoreCase: false,
													want:       "\"ifndef::\"",
												},
												&labeledExpr{
													pos:   position{line: 74, col: 22, offset: 1951},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 127, col: 28, offset: 3551},
														run: (*parser).callonDocumentRawLine72,
														expr: &oneOrMoreExpr{
															pos: position{line: 127, col: 28, offset: 3551},
															expr: &charClassMatcher{
																pos:        position{line: 127, col: 28, offset: 3551},
																val:        "[^\\r\\n []",
																chars:      []rune{'\r', '\n', ' ', '['},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 74, col: 53, offset: 1982},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 74, col: 57, offset: 1986},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 74, col: 62, offset: 1991},
														expr: &actionExpr{
															pos: position{line: 78, col: 34, offset: 2142},
															run: (*parser).callonDocumentRawLine78,
															expr: &oneOrMoreExpr{
																pos: position{line: 78, col: 34, offset: 2142},
																expr: &charClassMatcher{
																	pos:        position{line: 78, col: 34, offset: 2142},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 74, col: 95, offset: 2024},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 74, col: 99, offset: 2028},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonDocumentRawLine83,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2916, col: 8, offset: 92080},
													expr: &anyMatcher{
														line: 2916, col: 9, offset: 92081,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 82, col: 11, offset: 2207},
										run: (*parser).callonDocumentRawLine87,
										expr: &seqExpr{
											pos: position{line: 82, col: 11, offset: 2207},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 82, col: 11, offset: 2207},
													val:        "ifeval::[",
													ignoreCase: false,
													want:       "\"ifeval::[\"",
												},
												&labeledExpr{
													pos:   position{line: 84, col: 5, offset: 2232},
													label: "left",
													expr: &choiceExpr{
														pos: position{line: 92, col: 5, offset: 2495},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 92, col: 6, offset: 2496},
																run: (*parser).callonDocumentRawLine92,
																expr: &seqExpr{
																	pos: position{line: 92, col: 6, offset: 2496},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 92, col: 6, offset: 2496},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 92, col: 11, offset: 2501},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 648, col: 5, offset: 20351},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 648, col: 5, offset: 20351},
																						run: (*parser).callonDocumentRawLine97,
																						expr: &seqExpr{
																							pos: position{line: 648, col: 5, offset: 20351},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 648, col: 5, offset: 20351},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 648, col: 13, offset: 20359},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										run: (*parser).callonDocumentRawLine101,
																										expr: &seqExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 321, col: 18, offset: 9768},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 321, col: 28, offset: 9778},
																													expr: &charClassMatcher{
																														pos:        position{line: 321, col: 29, offset: 9779},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 648, col: 32, offset: 20378},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 655, col: 5, offset: 20619},
																						run: (*parser).callonDocumentRawLine107,
																						expr: &seqExpr{
																							pos: position{line: 655, col: 5, offset: 20619},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 655, col: 5, offset: 20619},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 655, col: 9, offset: 20623},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										run: (*parser).callonDocumentRawLine111,
																										expr: &seqExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 321, col: 18, offset: 9768},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 321, col: 28, offset: 9778},
																													expr: &charClassMatcher{
																														pos:        position{line: 321, col: 29, offset: 9779},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 655, col: 28, offset: 20642},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 92, col: 39, offset: 2529},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 93, col: 8, offset: 2560},
																run: (*parser).callonDocumentRawLine118,
																expr: &seqExpr{
																	pos: position{line: 93, col: 8, offset: 2560},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 93, col: 8, offset: 2560},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 93, col: 12, offset: 2564},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 648, col: 5, offset: 20351},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 648, col: 5, offset: 20351},
																						run: (*parser).callonDocumentRawLine123,
																						expr: &seqExpr{
																							pos: position{line: 648, col: 5, offset: 20351},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 648, col: 5, offset: 20351},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 648, col: 13, offset: 20359},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										run: (*parser).callonDocumentRawLine127,
																										expr: &seqExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 321, col: 18, offset: 9768},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 321, col: 28, offset: 9778},
																													expr: &charClassMatcher{
																														pos:        position{line: 321, col: 29, offset: 9779},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 648, col: 32, offset: 20378},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 655, col: 5, offset: 20619},
																						run: (*parser).callonDocumentRawLine133,
																						expr: &seqExpr{
																							pos: position{line: 655, col: 5, offset: 20619},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 655, col: 5, offset: 20619},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 655, col: 9, offset: 20623},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										run: (*parser).callonDocumentRawLine137,
																										expr: &seqExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 321, col: 18, offset: 9768},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 321, col: 28, offset: 9778},
																													expr: &charClassMatcher{
																														pos:        position{line: 321, col: 29, offset: 9779},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 655, col: 28, offset: 20642},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 93, col: 40, offset: 2592},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 8, offset: 2622},
																run: (*parser).callonDocumentRawLine144,
																expr: &labeledExpr{
																	pos:   position{line: 94, col: 8, offset: 2622},
																	label: "s",
																	expr: &choiceExpr{
																		pos: position{line: 648, col: 5, offset: 20351},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 648, col: 5, offset: 20351},
																				run: (*parser).callonDocumentRawLine147,
																				expr: &seqExpr{
																					pos: position{line: 648, col: 5, offset: 20351},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 648, col: 5, offset: 20351},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 648, col: 13, offset: 20359},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 321, col: 18, offset: 9768},
																								run: (*parser).callonDocumentRawLine151,
																								expr: &seqExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									exprs: []any{
																										&charClassMatcher{
																											pos:        position{line: 321, col: 18, offset: 9768},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 321, col: 28, offset: 9778},
																											expr: &charClassMatcher{
																												pos:        position{line: 321, col: 29, offset: 9779},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 648, col: 32, offset: 20378},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 655, col: 5, offset: 20619},
																				run: (*parser).callonDocumentRawLine157,
																				expr: &seqExpr{
																					pos: position{line: 655, col: 5, offset: 20619},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 655, col: 5, offset: 20619},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 655, col: 9, offset: 20623},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 321, col: 18, offset: 9768},
																								run: (*parser).callonDocumentRawLine161,
																								expr: &seqExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									exprs: []any{
																										&charClassMatcher{
																											pos:        position{line: 321, col: 18, offset: 9768},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 321, col: 28, offset: 9778},
																											expr: &charClassMatcher{
																												pos:        position{line: 321, col: 29, offset: 9779},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 655, col: 28, offset: 20642},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 95, col: 8, offset: 2676},
																run: (*parser).callonDocumentRawLine167,
																expr: &seqExpr{
																	pos: position{line: 95, col: 8, offset: 2676},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 95, col: 8, offset: 2676},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 95, col: 13, offset: 2681},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 95, col: 16, offset: 2684},
																				run: (*parser).callonDocumentRawLine171,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 95, col: 16, offset: 2684},
																					expr: &charClassMatcher{
																						pos:        position{line: 95, col: 16, offset: 2684},
																						val:        "[,?!;_-\\pL\\pN]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 95, col: 63, offset: 2731},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 8, offset: 2762},
																run: (*parser).callonDocumentRawLine175,
																expr: &seqExpr{
																	pos: position{line: 96, col: 8, offset: 2762},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 96, col: 8, offset: 2762},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 96, col: 12, offset: 2766},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 96, col: 15, offset: 2769},
																				run: (*parser).callonDocumentRawLine179,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 96, col: 15, offset: 2769},
																					expr: &charClassMatcher{
																						pos:        position{line: 96, col: 15, offset: 2769},
																						val:        "[,?!;_-\\pL\\pN]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 96, col: 62, offset: 2816},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2889, col: 12, offset: 91559},
																run: (*parser).callonDocumentRawLine183,
																expr: &seqExpr{
																	pos: position{line: 2889, col: 13, offset: 91560},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2889, col: 13, offset: 91560},
																			expr: &litMatcher{
																				pos:        position{line: 2889, col: 13, offset: 91560},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2889, col: 18, offset: 91565},
																			expr: &charClassMatcher{
																				pos:        position{line: 2889, col: 18, offset: 91565},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 84, col: 35, offset: 2262},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonDocumentRawLine190,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 85, col: 5, offset: 2274},
													label: "operand",
													expr: &choiceExpr{
														pos: position{line: 100, col: 5, offset: 2885},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 100, col: 6, offset: 2886},
																run: (*parser).callonDocumentRawLine194,
																expr: &litMatcher{
																	pos:        position{line: 100, col: 6, offset: 2886},
																	val:        "==",
																	ignoreCase: false,
																	want:       "\"==\"",
																},
															},
															&actionExpr{
																pos: position{line: 103, col: 8, offset: 2946},
																run: (*parser).callonDocumentRawLine196,
																expr: &litMatcher{
																	pos:        position{line: 103, col: 8, offset: 2946},
																	val:        "!=",
																	ignoreCase: false,
																	want:       "\"!=\"",
																},
															},
															&actionExpr{
																pos: position{line: 106, col: 8, offset: 3009},
																run: (*parser).callonDocumentRawLine198,
																expr: &litMatcher{
																	pos:        position{line: 106, col: 8, offset: 3009},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 109, col: 8, offset: 3071},
																run: (*parser).callonDocumentRawLine200,
																expr: &litMatcher{
																	pos:        position{line: 109, col: 8, offset: 3071},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 112, col: 8, offset: 3137},
																run: (*parser).callonDocumentRawLine202,
																expr: &litMatcher{
																	pos:        position{line: 112, col: 8, offset: 3137},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 115, col: 8, offset: 3202},
																run: (*parser).callonDocumentRawLine204,
																expr: &litMatcher{
																	pos:        position{line: 115, col: 8, offset: 3202},
																	val:        ">=",
																	ignoreCase: false,
																	want:       "\">=\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 85, col: 39, offset: 2308},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonDocumentRawLine207,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 86, col: 5, offset: 2320},
													label: "right",
													expr: &choiceExpr{
														pos: position{line: 92, col: 5, offset: 2495},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 92, col: 6, offset: 2496},
																run: (*parser).callonDocumentRawLine211,
																expr: &seqExpr{
																	pos: position{line: 92, col: 6, offset: 2496},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 92, col: 6, offset: 2496},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 92, col: 11, offset: 2501},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 648, col: 5, offset: 20351},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 648, col: 5, offset: 20351},
																						run: (*parser).callonDocumentRawLine216,
																						expr: &seqExpr{
																							pos: position{line: 648, col: 5, offset: 20351},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 648, col: 5, offset: 20351},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 648, col: 13, offset: 20359},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										run: (*parser).callonDocumentRawLine220,
																										expr: &seqExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 321, col: 18, offset: 9768},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 321, col: 28, offset: 9778},
																													expr: &charClassMatcher{
																														pos:        position{line: 321, col: 29, offset: 9779},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 648, col: 32, offset: 20378},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 655, col: 5, offset: 20619},
																						run: (*parser).callonDocumentRawLine226,
																						expr: &seqExpr{
																							pos: position{line: 655, col: 5, offset: 20619},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 655, col: 5, offset: 20619},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 655, col: 9, offset: 20623},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										run: (*parser).callonDocumentRawLine230,
																										expr: &seqExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 321, col: 18, offset: 9768},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 321, col: 28, offset: 9778},
																													expr: &charClassMatcher{
																														pos:        position{line: 321, col: 29, offset: 9779},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 655, col: 28, offset: 20642},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 92, col: 39, offset: 2529},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 93, col: 8, offset: 2560},
																run: (*parser).callonDocumentRawLine237,
																expr: &seqExpr{
																	pos: position{line: 93, col: 8, offset: 2560},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 93, col: 8, offset: 2560},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 93, col: 12, offset: 2564},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 648, col: 5, offset: 20351},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 648, col: 5, offset: 20351},
																						run: (*parser).callonDocumentRawLine242,
																						expr: &seqExpr{
																							pos: position{line: 648, col: 5, offset: 20351},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 648, col: 5, offset: 20351},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 648, col: 13, offset: 20359},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										run: (*parser).callonDocumentRawLine246,
																										expr: &seqExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 321, col: 18, offset: 9768},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 321, col: 28, offset: 9778},
																													expr: &charClassMatcher{
																														pos:        position{line: 321, col: 29, offset: 9779},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 648, col: 32, offset: 20378},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 655, col: 5, offset: 20619},
																						run: (*parser).callonDocumentRawLine252,
																						expr: &seqExpr{
																							pos: position{line: 655, col: 5, offset: 20619},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 655, col: 5, offset: 20619},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 655, col: 9, offset: 20623},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										run: (*parser).callonDocumentRawLine256,
																										expr: &seqExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 321, col: 18, offset: 9768},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 321, col: 28, offset: 9778},
																													expr: &charClassMatcher{
																														pos:        position{line: 321, col: 29, offset: 9779},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 655, col: 28, offset: 20642},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 93, col: 40, offset: 2592},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 8, offset: 2622},
																run: (*parser).callonDocumentRawLine263,
																expr: &labeledExpr{
																	pos:   position{line: 94, col: 8, offset: 2622},
																	label: "s",
																	expr: &choiceExpr{
																		pos: position{line: 648, col: 5, offset: 20351},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 648, col: 5, offset: 20351},
																				run: (*parser).callonDocumentRawLine266,
																				expr: &seqExpr{
																					pos: position{line: 648, col: 5, offset: 20351},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 648, col: 5, offset: 20351},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 648, col: 13, offset: 20359},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 321, col: 18, offset: 9768},
																								run: (*parser).callonDocumentRawLine270,
																								expr: &seqExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									exprs: []any{
																										&charClassMatcher{
																											pos:        position{line: 321, col: 18, offset: 9768},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 321, col: 28, offset: 9778},
																											expr: &charClassMatcher{
																												pos:        position{line: 321, col: 29, offset: 9779},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 648, col: 32, offset: 20378},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 655, col: 5, offset: 20619},
																				run: (*parser).callonDocumentRawLine276,
																				expr: &seqExpr{
																					pos: position{line: 655, col: 5, offset: 20619},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 655, col: 5, offset: 20619},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 655, col: 9, offset: 20623},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 321, col: 18, offset: 9768},
																								run: (*parser).callonDocumentRawLine280,
																								expr: &seqExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									exprs: []any{
																										&charClassMatcher{
																											pos:        position{line: 321, col: 18, offset: 9768},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 321, col: 28, offset: 9778},
																											expr: &charClassMatcher{
																												pos:        position{line: 321, col: 29, offset: 9779},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 655, col: 28, offset: 20642},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 95, col: 8, offset: 2676},
																run: (*parser).callonDocumentRawLine286,
																expr: &seqExpr{
																	pos: position{line: 95, col: 8, offset: 2676},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 95, col: 8, offset: 2676},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 95, col: 13, offset: 2681},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 95, col: 16, offset: 2684},
																				run: (*parser).callonDocumentRawLine290,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 95, col: 16, offset: 2684},
																					expr: &charClassMatcher{
																						pos:        position{line: 95, col: 16, offset: 2684},
																						val:        "[,?!;_-\\pL\\pN]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 95, col: 63, offset: 2731},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 8, offset: 2762},
																run: (*parser).callonDocumentRawLine294,
																expr: &seqExpr{
																	pos: position{line: 96, col: 8, offset: 2762},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 96, col: 8, offset: 2762},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 96, col: 12, offset: 2766},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 96, col: 15, offset: 2769},
																				run: (*parser).callonDocumentRawLine298,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 96, col: 15, offset: 2769},
																					expr: &charClassMatcher{
																						pos:        position{line: 96, col: 15, offset: 2769},
																						val:        "[,?!;_-\\pL\\pN]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 96, col: 62, offset: 2816},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2889, col: 12, offset: 91559},
																run: (*parser).callonDocumentRawLine302,
																expr: &seqExpr{
																	pos: position{line: 2889, col: 13, offset: 91560},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2889, col: 13, offset: 91560},
																			expr: &litMatcher{
																				pos:        position{line: 2889, col: 13, offset: 91560},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2889, col: 18, offset: 91565},
																			expr: &charClassMatcher{
																				pos:        position{line: 2889, col: 18, offset: 91565},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 86, col: 36, offset: 2351},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 87, col: 5, offset: 2360},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonDocumentRawLine310,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2916, col: 8, offset: 92080},
													expr: &anyMatcher{
														line: 2916, col: 9, offset: 92081,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 123, col: 10, offset: 3328},
										run: (*parser).callonDocumentRawLine314,
										expr: &seqExpr{
											pos: position{line: 123, col: 10, offset: 3328},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 123, col: 10, offset: 3328},
													val:        "endif::",
													ignoreCase: false,
													want:       "\"endif::\"",
												},
												&labeledExpr{
													pos:   position{line: 123, col: 20, offset: 3338},
													label: "name",
													expr: &zeroOrOneExpr{
														pos: position{line: 123, col: 25, offset: 3343},
														expr: &actionExpr{
															pos: position{line: 127, col: 28, offset: 3551},
															run: (*parser).callonDocumentRawLine319,
															expr: &oneOrMoreExpr{
																pos: position{line: 127, col: 28, offset: 3551},
																expr: &charClassMatcher{
																	pos:        position{line: 127, col: 28, offset: 3551},
																	val:        "[^\\r\\n []",
																	chars:      []rune{'\r', '\n', ' ', '['},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 123, col: 52, offset: 3370},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 123, col: 56, offset: 3374},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 123, col: 61, offset: 3379},
														expr: &actionExpr{
															pos: position{line: 78, col: 34, offset: 2142},
															run: (*parser).callonDocumentRawLine325,
															expr: &oneOrMoreExpr{
																pos: position{line: 78, col: 34, offset: 2142},
																expr: &charClassMatcher{
																	pos:        position{line: 78, col: 34, offset: 2142},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 123, col: 94, offset: 3412},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 123, col: 98, offset: 3416},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonDocumentRawLine330,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2916, col: 8, offset: 92080},
													expr: &anyMatcher{
														line: 2916, col: 9, offset: 92081,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 727, col: 5, offset: 23074},
										run: (*parser).callonDocumentRawLine334,
										expr: &seqExpr{
											pos: position{line: 727, col: 5, offset: 23074},
											exprs: []any{
												&notExpr{
													pos: position{line: 727, col: 5, offset: 23074},
													expr: &charClassMatcher{
														pos:        position{line: 2787, col: 13, offset: 88827},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 728, col: 5, offset: 23104},
													label: "delimiter",
													expr: &choiceExpr{
														pos: position{line: 729, col: 9, offset: 23124},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 743, col: 5, offset: 23616},
																run: (*parser).callonDocumentRawLine340,
																expr: &seqExpr{
																	pos: position{line: 743, col: 5, offset: 23616},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 743, col: 5, offset: 23616},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 743, col: 16, offset: 23627},
																				run: (*parser).callonDocumentRawLine343,
																				expr: &seqExpr{
																					pos: position{line: 743, col: 16, offset: 23627},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 743, col: 16, offset: 23627},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 743, col: 23, offset: 23634},
																							expr: &litMatcher{
																								pos:        position{line: 743, col: 23, offset: 23634},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 745, col: 8, offset: 23718},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonDocumentRawLine349,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonDocumentRawLine352,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 750, col: 5, offset: 23864},
																run: (*parser).callonDocumentRawLine359,
																expr: &seqExpr{
																	pos: position{line: 750, col: 5, offset: 23864},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 750, col: 5, offset: 23864},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 750, col: 16, offset: 23875},
																				run: (*parser).callonDocumentRawLine362,
																				expr: &seqExpr{
																					pos: position{line: 750, col: 16, offset: 23875},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 750, col: 16, offset: 23875},
																							val:        "====",
																							ignoreCase: false,
																							want:       "\"====\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 750, col: 23, offset: 23882},
																							expr: &litMatcher{
																								pos:        position{line: 750, col: 23, offset: 23882},
																								val:        "=",
																								ignoreCase: false,
																								want:       "\"=\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 752, col: 8, offset: 23966},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonDocumentRawLine368,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonDocumentRawLine371,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 763, col: 26, offset: 24352},
																run: (*parser).callonDocumentRawLine378,
																expr: &seqExpr{
																	pos: position{line: 763, col: 26, offset: 24352},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 763, col: 26, offset: 24352},
																			val:        "```",
																			ignoreCase: false,
																			want:       "\"```\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 763, col: 32, offset: 24358},
																			label: "language",
																			expr: &actionExpr{
																				pos: position{line: 767, col: 13, offset: 24488},
																				run: (*parser).callonDocumentRawLine382,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 767, col: 14, offset: 24489},
																					expr: &charClassMatcher{
																						pos:        position{line: 767, col: 14, offset: 24489},
																						val:        "[^\\r\\n` ]",
																						chars:      []rune{'\r', '\n', '`', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 763, col: 52, offset: 24378},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonDocumentRawLine386,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonDocumentRawLine389,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 757, col: 5, offset: 24111},
																run: (*parser).callonDocumentRawLine396,
																expr: &seqExpr{
																	pos: position{line: 757, col: 5, offset: 24111},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 757, col: 5, offset: 24111},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 757, col: 16, offset: 24122},
																				run: (*parser).callonDocumentRawLine399,
																				expr: &seqExpr{
																					pos: position{line: 757, col: 16, offset: 24122},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 757, col: 16, offset: 24122},
																							val:        "```",
																							ignoreCase: false,
																							want:       "\"```\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 757, col: 22, offset: 24128},
																							expr: &litMatcher{
																								pos:        position{line: 757, col: 22, offset: 24128},
																								val:        "`",
																								ignoreCase: false,
																								want:       "\"`\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 759, col: 8, offset: 24212},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonDocumentRawLine405,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonDocumentRawLine408,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 772, col: 5, offset: 24648},
																run: (*parser).callonDocumentRawLine415,
																expr: &seqExpr{
																	pos: position{line: 772, col: 5, offset: 24648},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 772, col: 5, offset: 24648},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 772, col: 16, offset: 24659},
																				run: (*parser).callonDocumentRawLine418,
																				expr: &seqExpr{
																					pos: position{line: 772, col: 16, offset: 24659},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 772, col: 16, offset: 24659},
																							val:        "----",
																							ignoreCase: false,
																							want:       "\"----\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 772, col: 23, offset: 24666},
																							expr: &litMatcher{
																								pos:        position{line: 772, col: 23, offset: 24666},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 774, col: 8, offset: 24750},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonDocumentRawLine424,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonDocumentRawLine427,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 786, col: 5, offset: 25124},
																run: (*parser).callonDocumentRawLine434,
																expr: &seqExpr{
																	pos: position{line: 786, col: 5, offset: 25124},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 786, col: 5, offset: 25124},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 786, col: 16, offset: 25135},
																				run: (*parser).callonDocumentRawLine437,
																				expr: &seqExpr{
																					pos: position{line: 786, col: 16, offset: 25135},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 786, col: 16, offset: 25135},
																							val:        "....",
																							ignoreCase: false,
																							want:       "\"....\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 786, col: 23, offset: 25142},
																							expr: &litMatcher{
																								pos:        position{line: 786, col: 23, offset: 25142},
																								val:        ".",
																								ignoreCase: false,
																								want:       "\".\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 788, col: 8, offset: 25226},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonDocumentRawLine443,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonDocumentRawLine446,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 793, col: 5, offset: 25376},
																run: (*parser).callonDocumentRawLine453,
																expr: &seqExpr{
																	pos: position{line: 793, col: 5, offset: 25376},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 793, col: 5, offset: 25376},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 793, col: 16, offset: 25387},
																				run: (*parser).callonDocumentRawLine456,
																				expr: &seqExpr{
																					pos: position{line: 793, col: 16, offset: 25387},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 793, col: 16, offset: 25387},
																							val:        "++++",
																							ignoreCase: false,
																							want:       "\"++++\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 793, col: 23, offset: 25394},
																							expr: &litMatcher{
																								pos:        position{line: 793, col: 23, offset: 25394},
																								val:        "+",
																								ignoreCase: false,
																								want:       "\"+\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 795, col: 8, offset: 25478},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonDocumentRawLine462,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonDocumentRawLine465,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 800, col: 5, offset: 25626},
																run: (*parser).callonDocumentRawLine472,
																expr: &seqExpr{
																	pos: position{line: 800, col: 5, offset: 25626},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 800, col: 5, offset: 25626},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 800, col: 16, offset: 25637},
																				run: (*parser).callonDocumentRawLine475,
																				expr: &seqExpr{
																					pos: position{line: 800, col: 16, offset: 25637},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 800, col: 16, offset: 25637},
																							val:        "____",
																							ignoreCase: false,
																							want:       "\"____\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 800, col: 23, offset: 25644},
																							expr: &litMatcher{
																								pos:        position{line: 800, col: 23, offset: 25644},
																								val:        "_",
																								ignoreCase: false,
																								want:       "\"_\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 802, col: 8, offset: 25728},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonDocumentRawLine481,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonDocumentRawLine484,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 807, col: 5, offset: 25872},
																run: (*parser).callonDocumentRawLine491,
																expr: &seqExpr{
																	pos: position{line: 807, col: 5, offset: 25872},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 807, col: 5, offset: 25872},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 807, col: 16, offset: 25883},
																				run: (*parser).callonDocumentRawLine494,
																				expr: &seqExpr{
																					pos: position{line: 807, col: 16, offset: 25883},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 807, col: 16, offset: 25883},
																							val:        "****",
																							ignoreCase: false,
																							want:       "\"****\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 807, col: 23, offset: 25890},
																							expr: &litMatcher{
																								pos:        position{line: 807, col: 23, offset: 25890},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 809, col: 8, offset: 25974},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonDocumentRawLine500,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonDocumentRawLine503,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 42, col: 5, offset: 929},
										run: (*parser).callonDocumentRawLine510,
										expr: &seqExpr{
											pos: position{line: 42, col: 5, offset: 929},
											exprs: []any{
												&andCodeExpr{
													pos: position{line: 42, col: 5, offset: 929},
													run: (*parser).callonDocumentRawLine512,
												},
												&andCodeExpr{
													pos: position{line: 46, col: 5, offset: 1073},
													run: (*parser).callonDocumentRawLine513,
												},
												&labeledExpr{
													pos:   position{line: 49, col: 5, offset: 1136},
													label: "level",
													expr: &actionExpr{
														pos: position{line: 49, col: 12, offset: 1143},
														run: (*parser).callonDocumentRawLine515,
														expr: &oneOrMoreExpr{
															pos: position{line: 49, col: 12, offset: 1143},
															expr: &litMatcher{
																pos:        position{line: 49, col: 13, offset: 1144},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 53, col: 5, offset: 1252},
													run: (*parser).callonDocumentRawLine518,
												},
												&actionExpr{
													pos: position{line: 2901, col: 11, offset: 91793},
													run: (*parser).callonDocumentRawLine519,
													expr: &oneOrMoreExpr{
														pos: position{line: 2901, col: 11, offset: 91793},
														expr: &charClassMatcher{
															pos:        position{line: 2901, col: 11, offset: 91793},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&actionExpr{
													pos: position{line: 2847, col: 14, offset: 90325},
													run: (*parser).callonDocumentRawLine522,
													expr: &oneOrMoreExpr{
														pos: position{line: 2847, col: 14, offset: 90325},
														expr: &charClassMatcher{
															pos:        position{line: 2847, col: 14, offset: 90325},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&notExpr{
													pos: position{line: 2916, col: 8, offset: 92080},
													expr: &anyMatcher{
														line: 2916, col: 9, offset: 92081,
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2916, col: 8, offset: 92080},
							expr: &anyMatcher{
								line: 2916, col: 9, offset: 92081,
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 134, col: 1, offset: 3751},
			expr: &actionExpr{
				pos: position{line: 135, col: 5, offset: 3773},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 135, col: 5, offset: 3773},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 135, col: 5, offset: 3773},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 136, col: 9, offset: 3788},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 136, col: 9, offset: 3788},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 136, col: 9, offset: 3788},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 137, col: 9, offset: 3809},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 2851, col: 17, offset: 90395},
												run: (*parser).callonFileInclusion8,
												expr: &labeledExpr{
													pos:   position{line: 2851, col: 17, offset: 90395},
													label: "path",
													expr: &actionExpr{
														pos: position{line: 2868, col: 5, offset: 90849},
														run: (*parser).callonFileInclusion10,
														expr: &labeledExpr{
															pos:   position{line: 2868, col: 5, offset: 90849},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 2868, col: 14, offset: 90858},
																expr: &choiceExpr{
																	pos: position{line: 2869, col: 9, offset: 90868},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2869, col: 9, offset: 90868},
																			run: (*parser).callonFileInclusion14,
																			expr: &seqExpr{
																				pos: position{line: 2869, col: 9, offset: 90868},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2869, col: 9, offset: 90868},
																						expr: &litMatcher{
																							pos:        position{line: 2869, col: 10, offset: 90869},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 2870, col: 9, offset: 90897},
																						expr: &charClassMatcher{
																							pos:        position{line: 2870, col: 10, offset: 90898},
																							val:        "[^\\r\\n[]�{,;?!.<> ]",
																							chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '.', '<', '>', ' '},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2873, col: 11, offset: 91110},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 2873, col: 11, offset: 91110},
																					val:        "[,;?!.]",
																					chars:      []rune{',', ';', '?', '!', '.'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&andExpr{
																					pos: position{line: 2873, col: 19, offset: 91118},
																					expr: &seqExpr{
																						pos: position{line: 2873, col: 21, offset: 91120},
																						exprs: []any{
																							&notExpr{
																								pos: position{line: 2873, col: 21, offset: 91120},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonFileInclusion25,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2873, col: 28, offset: 91127},
																								expr: &notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 639, col: 5, offset: 20141},
																			run: (*parser).callonFileInclusion30,
																			expr: &seqExpr{
																				pos: position{line: 639, col: 5, offset: 20141},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 639, col: 5, offset: 20141},
																						run: (*parser).callonFileInclusion32,
																					},
																					&labeledExpr{
																						pos:   position{line: 642, col: 5, offset: 20213},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 642, col: 14, offset: 20222},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 648, col: 5, offset: 20351},
																									run: (*parser).callonFileInclusion35,
																									expr: &seqExpr{
																										pos: position{line: 648, col: 5, offset: 20351},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 648, col: 5, offset: 20351},
																												val:        "\\{",
																												ignoreCase: false,
																												want:       "\"\\\\{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 648, col: 13, offset: 20359},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonFileInclusion39,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 648, col: 32, offset: 20378},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 655, col: 5, offset: 20619},
																									run: (*parser).callonFileInclusion45,
																									expr: &seqExpr{
																										pos: position{line: 655, col: 5, offset: 20619},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 655, col: 5, offset: 20619},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 655, col: 9, offset: 20623},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonFileInclusion49,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 655, col: 28, offset: 20642},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 661, col: 25, offset: 20823},
																									run: (*parser).callonFileInclusion55,
																									expr: &seqExpr{
																										pos: position{line: 661, col: 25, offset: 20823},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 661, col: 25, offset: 20823},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 37, offset: 20835},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonFileInclusion59,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 56, offset: 20854},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 661, col: 62, offset: 20860},
																													expr: &actionExpr{
																														pos: position{line: 669, col: 17, offset: 21155},
																														run: (*parser).callonFileInclusion66,
																														expr: &seqExpr{
																															pos: position{line: 669, col: 17, offset: 21155},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 669, col: 17, offset: 21155},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 669, col: 21, offset: 21159},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 669, col: 28, offset: 21166},
																																				run: (*parser).callonFileInclusion71,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 669, col: 28, offset: 21166},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 671, col: 9, offset: 21220},
																																				run: (*parser).callonFileInclusion73,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 671, col: 9, offset: 21220},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 671, col: 9, offset: 21220},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 661, col: 78, offset: 20876},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 665, col: 25, offset: 20994},
																									run: (*parser).callonFileInclusion77,
																									expr: &seqExpr{
																										pos: position{line: 665, col: 25, offset: 20994},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 665, col: 25, offset: 20994},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 665, col: 38, offset: 21007},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonFileInclusion81,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 665, col: 57, offset: 21026},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 665, col: 63, offset: 21032},
																													expr: &actionExpr{
																														pos: position{line: 669, col: 17, offset: 21155},
																														run: (*parser).callonFileInclusion88,
																														expr: &seqExpr{
																															pos: position{line: 669, col: 17, offset: 21155},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 669, col: 17, offset: 21155},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 669, col: 21, offset: 21159},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 669, col: 28, offset: 21166},
																																				run: (*parser).callonFileInclusion93,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 669, col: 28, offset: 21166},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 671, col: 9, offset: 21220},
																																				run: (*parser).callonFileInclusion95,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 671, col: 9, offset: 21220},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 671, col: 9, offset: 21220},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 665, col: 79, offset: 21048},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1201, col: 23, offset: 37004},
																			run: (*parser).callonFileInclusion99,
																			expr: &seqExpr{
																				pos: position{line: 1201, col: 23, offset: 37004},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1199, col: 32, offset: 36972},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 1201, col: 51, offset: 37032},
																						label: "ref",
																						expr: &actionExpr{
																							pos: position{line: 1201, col: 56, offset: 37037},
																							run: (*parser).callonFileInclusion103,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1201, col: 56, offset: 37037},
																								expr: &charClassMatcher{
																									pos:        position{line: 1201, col: 56, offset: 37037},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 1199, col: 32, offset: 36972},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2876, col: 11, offset: 91247},
																			run: (*parser).callonFileInclusion107,
																			expr: &litMatcher{
																				pos:        position{line: 2876, col: 11, offset: 91247},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 138, col: 9, offset: 3838},
											label: "attributes",
											expr: &ruleRefExpr{
												pos:  position{line: 138, col: 21, offset: 3850},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 142, col: 5, offset: 4005},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonFileInclusion112,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2919, col: 8, offset: 92130},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 2906, col: 12, offset: 91903},
									run: (*parser).callonFileInclusion115,
									expr: &choiceExpr{
										pos: position{line: 2906, col: 13, offset: 91904},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2906, col: 13, offset: 91904},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 20, offset: 91911},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 29, offset: 91920},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2916, col: 8, offset: 92080},
									expr: &anyMatcher{
										line: 2916, col: 9, offset: 92081,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 149, col: 1, offset: 4138},
			expr: &actionExpr{
				pos: position{line: 149, col: 15, offset: 4152},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 149, col: 15, offset: 4152},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 149, col: 15, offset: 4152},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 149, col: 22, offset: 4159},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 156, col: 23, offset: 4342},
										run: (*parser).callonLineRanges5,
										expr: &seqExpr{
											pos: position{line: 156, col: 23, offset: 4342},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 156, col: 23, offset: 4342},
													label: "first",
													expr: &choiceExpr{
														pos: position{line: 156, col: 30, offset: 4349},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 165, col: 19, offset: 4707},
																run: (*parser).callonLineRanges9,
																expr: &seqExpr{
																	pos: position{line: 165, col: 19, offset: 4707},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 165, col: 19, offset: 4707},
																			label: "start",
																			expr: &actionExpr{
																				pos: position{line: 2889, col: 12, offset: 91559},
																				run: (*parser).callonLineRanges12,
																				expr: &seqExpr{
																					pos: position{line: 2889, col: 13, offset: 91560},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2889, col: 13, offset: 91560},
																							expr: &litMatcher{
																								pos:        position{line: 2889, col: 13, offset: 91560},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2889, col: 18, offset: 91565},
																							expr: &charClassMatcher{
																								pos:        position{line: 2889, col: 18, offset: 91565},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 165, col: 35, offset: 4723},
																			val:        "..",
																			ignoreCase: false,
																			want:       "\"..\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 165, col: 40, offset: 4728},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 2889, col: 12, offset: 91559},
																				run: (*parser).callonLineRanges20,
																				expr: &seqExpr{
																					pos: position{line: 2889, col: 13, offset: 91560},
																					exprs: []any{
																						&zeroOrOneExpr{
																							pos: position{line: 2889, col: 13, offset: 91560},
																							expr: &litMatcher{
																								pos:        position{line: 2889, col: 13, offset: 91560},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2889, col: 18, offset: 91565},
																							expr: &charClassMatcher{
																								pos:        position{line: 2889, col: 18, offset: 91565},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 169, col: 20, offset: 4849},
																run: (*parser).callonLineRanges26,
																expr: &labeledExpr{
																	pos:   position{line: 169, col: 20, offset: 4849},
																	label: "singleline",
																	expr: &actionExpr{
																		pos: position{line: 2889, col: 12, offset: 91559},
																		run: (*parser).callonLineRanges28,
																		expr: &seqExpr{
																			pos: position{line: 2889, col: 13, offset: 91560},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2889, col: 13, offset: 91560},
																					expr: &litMatcher{
																						pos:        position{line: 2889, col: 13, offset: 91560},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2889, col: 18, offset: 91565},
																					expr: &charClassMatcher{
																						pos:        position{line: 2889, col: 18, offset: 91565},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 157, col: 5, offset: 4388},
													label: "others",
													expr: &oneOrMoreExpr{
														pos: position{line: 157, col: 12, offset: 4395},
														expr: &actionExpr{
															pos: position{line: 158, col: 9, offset: 4405},
															run: (*parser).callonLineRanges36,
															expr: &seqExpr{
																pos: position{line: 158, col: 9, offset: 4405},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 158, col: 10, offset: 4406},
																		val:        "[,;]",
																		chars:      []rune{',', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&labeledExpr{
																		pos:   position{line: 159, col: 9, offset: 4523},
																		label: "other",
																		expr: &choiceExpr{
																			pos: position{line: 159, col: 16, offset: 4530},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 165, col: 19, offset: 4707},
																					run: (*parser).callonLineRanges41,
																					expr: &seqExpr{
																						pos: position{line: 165, col: 19, offset: 4707},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 165, col: 19, offset: 4707},
																								label: "start",
																								expr: &actionExpr{
																									pos: position{line: 2889, col: 12, offset: 91559},
																									run: (*parser).callonLineRanges44,
																									expr: &seqExpr{
																										pos: position{line: 2889, col: 13, offset: 91560},
																										exprs: []any{
																											&zeroOrOneExpr{
																												pos: position{line: 2889, col: 13, offset: 91560},
																												expr: &litMatcher{
																													pos:        position{line: 2889, col: 13, offset: 91560},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2889, col: 18, offset: 91565},
																												expr: &charClassMatcher{
																													pos:        position{line: 2889, col: 18, offset: 91565},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 165, col: 35, offset: 4723},
																								val:        "..",
																								ignoreCase: false,
																								want:       "\"..\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 165, col: 40, offset: 4728},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 2889, col: 12, offset: 91559},
																									run: (*parser).callonLineRanges52,
																									expr: &seqExpr{
																										pos: position{line: 2889, col: 13, offset: 91560},
																										exprs: []any{
																											&zeroOrOneExpr{
																												pos: position{line: 2889, col: 13, offset: 91560},
																												expr: &litMatcher{
																													pos:        position{line: 2889, col: 13, offset: 91560},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2889, col: 18, offset: 91565},
																												expr: &charClassMatcher{
																													pos:        position{line: 2889, col: 18, offset: 91565},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 169, col: 20, offset: 4849},
																					run: (*parser).callonLineRanges58,
																					expr: &labeledExpr{
																						pos:   position{line: 169, col: 20, offset: 4849},
																						label: "singleline",
																						expr: &actionExpr{
																							pos: position{line: 2889, col: 12, offset: 91559},
																							run: (*parser).callonLineRanges60,
																							expr: &seqExpr{
																								pos: position{line: 2889, col: 13, offset: 91560},
																								exprs: []any{
																									&zeroOrOneExpr{
																										pos: position{line: 2889, col: 13, offset: 91560},
																										expr: &litMatcher{
																											pos:        position{line: 2889, col: 13, offset: 91560},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2889, col: 18, offset: 91565},
																										expr: &charClassMatcher{
																											pos:        position{line: 2889, col: 18, offset: 91565},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 165, col: 19, offset: 4707},
										run: (*parser).callonLineRanges66,
										expr: &seqExpr{
											pos: position{line: 165, col: 19, offset: 4707},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 165, col: 19, offset: 4707},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 2889, col: 12, offset: 91559},
														run: (*parser).callonLineRanges69,
														expr: &seqExpr{
															pos: position{line: 2889, col: 13, offset: 91560},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2889, col: 13, offset: 91560},
																	expr: &litMatcher{
																		pos:        position{line: 2889, col: 13, offset: 91560},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2889, col: 18, offset: 91565},
																	expr: &charClassMatcher{
																		pos:        position{line: 2889, col: 18, offset: 91565},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 165, col: 35, offset: 4723},
													val:        "..",
													ignoreCase: false,
													want:       "\"..\"",
												},
												&labeledExpr{
													pos:   position{line: 165, col: 40, offset: 4728},
													label: "end",
													expr: &actionExpr{
														pos: position{line: 2889, col: 12, offset: 91559},
														run: (*parser).callonLineRanges77,
														expr: &seqExpr{
															pos: position{line: 2889, col: 13, offset: 91560},
															exprs: []any{
																&zeroOrOneExpr{
																	pos: position{line: 2889, col: 13, offset: 91560},
																	expr: &litMatcher{
																		pos:        position{line: 2889, col: 13, offset: 91560},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2889, col: 18, offset: 91565},
																	expr: &charClassMatcher{
																		pos:        position{line: 2889, col: 18, offset: 91565},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 169, col: 20, offset: 4849},
										run: (*parser).callonLineRanges83,
										expr: &labeledExpr{
											pos:   position{line: 169, col: 20, offset: 4849},
											label: "singleline",
											expr: &actionExpr{
												pos: position{line: 2889, col: 12, offset: 91559},
												run: (*parser).callonLineRanges85,
												expr: &seqExpr{
													pos: position{line: 2889, col: 13, offset: 91560},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 2889, col: 13, offset: 91560},
															expr: &litMatcher{
																pos:        position{line: 2889, col: 13, offset: 91560},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 2889, col: 18, offset: 91565},
															expr: &charClassMatcher{
																pos:        position{line: 2889, col: 18, offset: 91565},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2916, col: 8, offset: 92080},
							expr: &anyMatcher{
								line: 2916, col: 9, offset: 92081,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 174, col: 1, offset: 4985},
			expr: &actionExpr{
				pos: position{line: 174, col: 14, offset: 4998},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 174, col: 14, offset: 4998},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 174, col: 14, offset: 4998},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 178, col: 22, offset: 5135},
								run: (*parser).callonTagRanges4,
								expr: &seqExpr{
									pos: position{line: 178, col: 22, offset: 5135},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 178, col: 22, offset: 5135},
											label: "first",
											expr: &choiceExpr{
												pos: position{line: 187, col: 13, offset: 5445},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 187, col: 13, offset: 5445},
														run: (*parser).callonTagRanges8,
														expr: &labeledExpr{
															pos:   position{line: 187, col: 13, offset: 5445},
															label: "tag",
															expr: &choiceExpr{
																pos: position{line: 187, col: 18, offset: 5450},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 2791, col: 14, offset: 88901},
																		run: (*parser).callonTagRanges11,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2791, col: 14, offset: 88901},
																			expr: &charClassMatcher{
																				pos:        position{line: 2791, col: 14, offset: 88901},
																				val:        "[\\pL\\pN]",
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 193, col: 16, offset: 5650},
																		run: (*parser).callonTagRanges14,
																		expr: &seqExpr{
																			pos: position{line: 193, col: 16, offset: 5650},
																			exprs: []any{
																				&labeledExpr{
																					pos:   position{line: 193, col: 16, offset: 5650},
																					label: "stars",
																					expr: &actionExpr{
																						pos: position{line: 193, col: 23, offset: 5657},
																						run: (*parser).callonTagRanges17,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 193, col: 23, offset: 5657},
																							expr: &litMatcher{
																								pos:        position{line: 193, col: 24, offset: 5658},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 196, col: 5, offset: 5712},
																					run: (*parser).callonTagRanges20,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 189, col: 9, offset: 5538},
														run: (*parser).callonTagRanges21,
														expr: &seqExpr{
															pos: position{line: 189, col: 9, offset: 5538},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 189, col: 9, offset: 5538},
																	val:        "!",
																	ignoreCase: false,
																	want:       "\"!\"",
																},
																&labeledExpr{
																	pos:   position{line: 189, col: 13, offset: 5542},
																	label: "tag",
																	expr: &choiceExpr{
																		pos: position{line: 189, col: 18, offset: 5547},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2791, col: 14, offset: 88901},
																				run: (*parser).callonTagRanges26,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2791, col: 14, offset: 88901},
																					expr: &charClassMatcher{
																						pos:        position{line: 2791, col: 14, offset: 88901},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 193, col: 16, offset: 5650},
																				run: (*parser).callonTagRanges29,
																				expr: &seqExpr{
																					pos: position{line: 193, col: 16, offset: 5650},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 193, col: 16, offset: 5650},
																							label: "stars",
																							expr: &actionExpr{
																								pos: position{line: 193, col: 23, offset: 5657},
																								run: (*parser).callonTagRanges32,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 193, col: 23, offset: 5657},
																									expr: &litMatcher{
																										pos:        position{line: 193, col: 24, offset: 5658},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 196, col: 5, offset: 5712},
																							run: (*parser).callonTagRanges35,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 179, col: 5, offset: 5156},
											label: "others",
											expr: &zeroOrMoreExpr{
												pos: position{line: 179, col: 12, offset: 5163},
												expr: &actionExpr{
													pos: position{line: 180, col: 9, offset: 5173},
													run: (*parser).callonTagRanges38,
													expr: &seqExpr{
														pos: position{line: 180, col: 9, offset: 5173},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 180, col: 10, offset: 5174},
																val:        "[,;]",
																chars:      []rune{',', ';'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 181, col: 9, offset: 5291},
																label: "other",
																expr: &choiceExpr{
																	pos: position{line: 187, col: 13, offset: 5445},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 187, col: 13, offset: 5445},
																			run: (*parser).callonTagRanges43,
																			expr: &labeledExpr{
																				pos:   position{line: 187, col: 13, offset: 5445},
																				label: "tag",
																				expr: &choiceExpr{
																					pos: position{line: 187, col: 18, offset: 5450},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2791, col: 14, offset: 88901},
																							run: (*parser).callonTagRanges46,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2791, col: 14, offset: 88901},
																								expr: &charClassMatcher{
																									pos:        position{line: 2791, col: 14, offset: 88901},
																									val:        "[\\pL\\pN]",
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 193, col: 16, offset: 5650},
																							run: (*parser).callonTagRanges49,
																							expr: &seqExpr{
																								pos: position{line: 193, col: 16, offset: 5650},
																								exprs: []any{
																									&labeledExpr{
																										pos:   position{line: 193, col: 16, offset: 5650},
																										label: "stars",
																										expr: &actionExpr{
																											pos: position{line: 193, col: 23, offset: 5657},
																											run: (*parser).callonTagRanges52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 193, col: 23, offset: 5657},
																												expr: &litMatcher{
																													pos:        position{line: 193, col: 24, offset: 5658},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 196, col: 5, offset: 5712},
																										run: (*parser).callonTagRanges55,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 189, col: 9, offset: 5538},
																			run: (*parser).callonTagRanges56,
																			expr: &seqExpr{
																				pos: position{line: 189, col: 9, offset: 5538},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 189, col: 9, offset: 5538},
																						val:        "!",
																						ignoreCase: false,
																						want:       "\"!\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 189, col: 13, offset: 5542},
																						label: "tag",
																						expr: &choiceExpr{
																							pos: position{line: 189, col: 18, offset: 5547},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2791, col: 14, offset: 88901},
																									run: (*parser).callonTagRanges61,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2791, col: 14, offset: 88901},
																										expr: &charClassMatcher{
																											pos:        position{line: 2791, col: 14, offset: 88901},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 193, col: 16, offset: 5650},
																									run: (*parser).callonTagRanges64,
																									expr: &seqExpr{
																										pos: position{line: 193, col: 16, offset: 5650},
																										exprs: []any{
																											&labeledExpr{
																												pos:   position{line: 193, col: 16, offset: 5650},
																												label: "stars",
																												expr: &actionExpr{
																													pos: position{line: 193, col: 23, offset: 5657},
																													run: (*parser).callonTagRanges67,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 193, col: 23, offset: 5657},
																														expr: &litMatcher{
																															pos:        position{line: 193, col: 24, offset: 5658},
																															val:        "*",
																															ignoreCase: false,
																															want:       "\"*\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 196, col: 5, offset: 5712},
																												run: (*parser).callonTagRanges70,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2916, col: 8, offset: 92080},
							expr: &anyMatcher{
								line: 2916, col: 9, offset: 92081,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 203, col: 1, offset: 5879},
			expr: &actionExpr{
				pos: position{line: 203, col: 21, offset: 5899},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 203, col: 21, offset: 5899},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 203, col: 21, offset: 5899},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 203, col: 29, offset: 5907},
								expr: &choiceExpr{
									pos: position{line: 203, col: 30, offset: 5908},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 207, col: 25, offset: 6088},
											run: (*parser).callonIncludedFileLine6,
											expr: &seqExpr{
												pos: position{line: 207, col: 25, offset: 6088},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 207, col: 25, offset: 6088},
														val:        "tag::",
														ignoreCase: false,
														want:       "\"tag::\"",
													},
													&labeledExpr{
														pos:   position{line: 207, col: 33, offset: 6096},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 207, col: 38, offset: 6101},
															run: (*parser).callonIncludedFileLine10,
															expr: &actionExpr{
																pos: position{line: 2791, col: 14, offset: 88901},
																run: (*parser).callonIncludedFileLine11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2791, col: 14, offset: 88901},
																	expr: &charClassMatcher{
																		pos:        position{line: 2791, col: 14, offset: 88901},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 207, col: 78, offset: 6141},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 211, col: 23, offset: 6236},
											run: (*parser).callonIncludedFileLine15,
											expr: &seqExpr{
												pos: position{line: 211, col: 23, offset: 6236},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 211, col: 23, offset: 6236},
														val:        "end::",
														ignoreCase: false,
														want:       "\"end::\"",
													},
													&labeledExpr{
														pos:   position{line: 211, col: 31, offset: 6244},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 211, col: 36, offset: 6249},
															run: (*parser).callonIncludedFileLine19,
															expr: &actionExpr{
																pos: position{line: 2791, col: 14, offset: 88901},
																run: (*parser).callonIncludedFileLine20,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2791, col: 14, offset: 88901},
																	expr: &charClassMatcher{
																		pos:        position{line: 2791, col: 14, offset: 88901},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 211, col: 76, offset: 6289},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 203, col: 74, offset: 5952},
											run: (*parser).callonIncludedFileLine24,
											expr: &anyMatcher{
												line: 203, col: 74, offset: 5952,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2919, col: 8, offset: 92130},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 2906, col: 12, offset: 91903},
									run: (*parser).callonIncludedFileLine27,
									expr: &choiceExpr{
										pos: position{line: 2906, col: 13, offset: 91904},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2906, col: 13, offset: 91904},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 20, offset: 91911},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 29, offset: 91920},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2916, col: 8, offset: 92080},
									expr: &anyMatcher{
										line: 2916, col: 9, offset: 92081,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentFragment",
			pos:  position{line: 227, col: 1, offset: 6775},
			expr: &actionExpr{
				pos: position{line: 228, col: 5, offset: 6799},
				run: (*parser).callonDocumentFragment1,
				expr: &seqExpr{
					pos: position{line: 228, col: 5, offset: 6799},
					exprs: []any{
						&andExpr{
							pos: position{line: 2914, col: 11, offset: 92066},
							expr: &anyMatcher{
								line: 2914, col: 13, offset: 92068,
							},
						},
						&labeledExpr{
							pos:   position{line: 229, col: 5, offset: 6810},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 229, col: 16, offset: 6821},
								expr: &ruleRefExpr{
									pos:  position{line: 229, col: 17, offset: 6822},
									name: "BlockAttributes",
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 230, col: 5, offset: 6845},
							run: (*parser).callonDocumentFragment8,
						},
						&labeledExpr{
							pos:   position{line: 236, col: 5, offset: 6999},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 236, col: 13, offset: 7007},
								expr: &choiceExpr{
									pos: position{line: 237, col: 9, offset: 7017},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 237, col: 9, offset: 7017},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 238, col: 11, offset: 7078},
											name: "UserMacroBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 239, col: 11, offset: 7143},
											name: "ShortcutParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 240, col: 11, offset: 7171},
											name: "AttributeDeclaration",
										},
										&actionExpr{
											pos: position{line: 363, col: 19, offset: 10942},
											run: (*parser).callonDocumentFragment16,
											expr: &seqExpr{
												pos: position{line: 363, col: 19, offset: 10942},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 363, col: 19, offset: 10942},
														val:        ":!",
														ignoreCase: false,
														want:       "\":!\"",
													},
													&labeledExpr{
														pos:   position{line: 363, col: 24, offset: 10947},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 321, col: 18, offset: 9768},
															run: (*parser).callonDocumentFragment20,
															expr: &seqExpr{
																pos: position{line: 321, col: 18, offset: 9768},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 321, col: 18, offset: 9768},
																		val:        "[_\\pL\\pN]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 321, col: 28, offset: 9778},
																		expr: &charClassMatcher{
																			pos:        position{line: 321, col: 29, offset: 9779},
																			val:        "[-\\pL\\pN]",
																			chars:      []rune{'-'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 363, col: 45, offset: 10968},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 363, col: 49, offset: 10972},
														expr: &actionExpr{
															pos: position{line: 2897, col: 10, offset: 91732},
															run: (*parser).callonDocumentFragment27,
															expr: &charClassMatcher{
																pos:        position{line: 2897, col: 10, offset: 91732},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2919, col: 8, offset: 92130},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonDocumentFragment30,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 365, col: 9, offset: 11063},
											run: (*parser).callonDocumentFragment37,
											expr: &seqExpr{
												pos: position{line: 365, col: 9, offset: 11063},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 365, col: 9, offset: 11063},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&labeledExpr{
														pos:   position{line: 365, col: 13, offset: 11067},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 321, col: 18, offset: 9768},
															run: (*parser).callonDocumentFragment41,
															expr: &seqExpr{
																pos: position{line: 321, col: 18, offset: 9768},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 321, col: 18, offset: 9768},
																		val:        "[_\\pL\\pN]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 321, col: 28, offset: 9778},
																		expr: &charClassMatcher{
																			pos:        position{line: 321, col: 29, offset: 9779},
																			val:        "[-\\pL\\pN]",
																			chars:      []rune{'-'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 365, col: 34, offset: 11088},
														val:        "!:",
														ignoreCase: false,
														want:       "\"!:\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 365, col: 39, offset: 11093},
														expr: &actionExpr{
															pos: position{line: 2897, col: 10, offset: 91732},
															run: (*parser).callonDocumentFragment48,
															expr: &charClassMatcher{
																pos:        position{line: 2897, col: 10, offset: 91732},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2919, col: 8, offset: 92130},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonDocumentFragment51,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 680, col: 14, offset: 21521},
											run: (*parser).callonDocumentFragment58,
											expr: &seqExpr{
												pos: position{line: 680, col: 14, offset: 21521},
												exprs: []any{
													&andExpr{
														pos: position{line: 2914, col: 11, offset: 92066},
														expr: &anyMatcher{
															line: 2914, col: 13, offset: 92068,
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 680, col: 21, offset: 21528},
														expr: &actionExpr{
															pos: position{line: 2897, col: 10, offset: 91732},
															run: (*parser).callonDocumentFragment63,
															expr: &charClassMatcher{
																pos:        position{line: 2897, col: 10, offset: 91732},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2919, col: 8, offset: 92130},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonDocumentFragment66,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 243, col: 11, offset: 7247},
											name: "DocumentHeader",
										},
										&ruleRefExpr{
											pos:  position{line: 244, col: 11, offset: 7273},
											name: "Section",
										},
										&actionExpr{
											pos: position{line: 823, col: 5, offset: 26356},
											run: (*parser).callonDocumentFragment75,
											expr: &seqExpr{
												pos: position{line: 823, col: 5, offset: 26356},
												exprs: []any{
													&actionExpr{
														pos: position{line: 743, col: 5, offset: 23616},
														run: (*parser).callonDocumentFragment77,
														expr: &seqExpr{
															pos: position{line: 743, col: 5, offset: 23616},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 743, col: 5, offset: 23616},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 743, col: 16, offset: 23627},
																		run: (*parser).callonDocumentFragment80,
																		expr: &seqExpr{
																			pos: position{line: 743, col: 16, offset: 23627},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 743, col: 16, offset: 23627},
																					val:        "////",
																					ignoreCase: false,
																					want:       "\"////\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 743, col: 23, offset: 23634},
																					expr: &litMatcher{
																						pos:        position{line: 743, col: 23, offset: 23634},
																						val:        "/",
																						ignoreCase: false,
																						want:       "\"/\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 745, col: 8, offset: 23718},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonDocumentFragment86,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonDocumentFragment89,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 824, col: 5, offset: 26387},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 834, col: 5, offset: 26673},
															expr: &actionExpr{
																pos: position{line: 834, col: 6, offset: 26674},
																run: (*parser).callonDocumentFragment98,
																expr: &seqExpr{
																	pos: position{line: 834, col: 6, offset: 26674},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 834, col: 6, offset: 26674},
																			expr: &choiceExpr{
																				pos: position{line: 831, col: 29, offset: 26616},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 743, col: 5, offset: 23616},
																						run: (*parser).callonDocumentFragment102,
																						expr: &seqExpr{
																							pos: position{line: 743, col: 5, offset: 23616},
																							exprs: []any{
																								&labeledExpr{
																									pos:   position{line: 743, col: 5, offset: 23616},
																									label: "delimiter",
																									expr: &actionExpr{
																										pos: position{line: 743, col: 16, offset: 23627},
																										run: (*parser).callonDocumentFragment105,
																										expr: &seqExpr{
																											pos: position{line: 743, col: 16, offset: 23627},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 743, col: 16, offset: 23627},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 743, col: 23, offset: 23634},
																													expr: &litMatcher{
																														pos:        position{line: 743, col: 23, offset: 23634},
																														val:        "/",
																														ignoreCase: false,
																														want:       "\"/\"",
																													},
																												},
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 745, col: 8, offset: 23718},
																									expr: &actionExpr{
																										pos: position{line: 2897, col: 10, offset: 91732},
																										run: (*parser).callonDocumentFragment111,
																										expr: &charClassMatcher{
																											pos:        position{line: 2897, col: 10, offset: 91732},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2919, col: 8, offset: 92130},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2906, col: 12, offset: 91903},
																											run: (*parser).callonDocumentFragment114,
																											expr: &choiceExpr{
																												pos: position{line: 2906, col: 13, offset: 91904},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2906, col: 13, offset: 91904},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 20, offset: 91911},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 29, offset: 91920},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2916, col: 8, offset: 92080},
																											expr: &anyMatcher{
																												line: 2916, col: 9, offset: 92081,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 835, col: 5, offset: 26704},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				run: (*parser).callonDocumentFragment124,
																				expr: &seqExpr{
																					pos: position{line: 814, col: 5, offset: 26120},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 815, col: 5, offset: 26195},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								run: (*parser).callonDocumentFragment129,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2843, col: 13, offset: 90258},
																									expr: &charClassMatcher{
																										pos:        position{line: 2843, col: 13, offset: 90258},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonDocumentFragment133,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 825, col: 5, offset: 26421},
														expr: &choiceExpr{
															pos: position{line: 831, col: 29, offset: 26616},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 743, col: 5, offset: 23616},
																	run: (*parser).callonDocumentFragment142,
																	expr: &seqExpr{
																		pos: position{line: 743, col: 5, offset: 23616},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 743, col: 5, offset: 23616},
																				label: "delimiter",
																				expr: &actionExpr{
																					pos: position{line: 743, col: 16, offset: 23627},
																					run: (*parser).callonDocumentFragment145,
																					expr: &seqExpr{
																						pos: position{line: 743, col: 16, offset: 23627},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 743, col: 16, offset: 23627},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 743, col: 23, offset: 23634},
																								expr: &litMatcher{
																									pos:        position{line: 743, col: 23, offset: 23634},
																									val:        "/",
																									ignoreCase: false,
																									want:       "\"/\"",
																								},
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 745, col: 8, offset: 23718},
																				expr: &actionExpr{
																					pos: position{line: 2897, col: 10, offset: 91732},
																					run: (*parser).callonDocumentFragment151,
																					expr: &charClassMatcher{
																						pos:        position{line: 2897, col: 10, offset: 91732},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2919, col: 8, offset: 92130},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 2906, col: 12, offset: 91903},
																						run: (*parser).callonDocumentFragment154,
																						expr: &choiceExpr{
																							pos: position{line: 2906, col: 13, offset: 91904},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2906, col: 13, offset: 91904},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2906, col: 20, offset: 91911},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2906, col: 29, offset: 91920},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2916, col: 8, offset: 92080},
																	expr: &anyMatcher{
																		line: 2916, col: 9, offset: 92081,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 843, col: 5, offset: 26857},
											run: (*parser).callonDocumentFragment163,
											expr: &seqExpr{
												pos: position{line: 843, col: 5, offset: 26857},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 843, col: 5, offset: 26857},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 750, col: 5, offset: 23864},
															run: (*parser).callonDocumentFragment166,
															expr: &seqExpr{
																pos: position{line: 750, col: 5, offset: 23864},
																exprs: []any{
																	&labeledExpr{
																		pos:   position{line: 750, col: 5, offset: 23864},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 750, col: 16, offset: 23875},
																			run: (*parser).callonDocumentFragment169,
																			expr: &seqExpr{
																				pos: position{line: 750, col: 16, offset: 23875},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 750, col: 16, offset: 23875},
																						val:        "====",
																						ignoreCase: false,
																						want:       "\"====\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 750, col: 23, offset: 23882},
																						expr: &litMatcher{
																							pos:        position{line: 750, col: 23, offset: 23882},
																							val:        "=",
																							ignoreCase: false,
																							want:       "\"=\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 752, col: 8, offset: 23966},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonDocumentFragment175,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment178,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 844, col: 5, offset: 26896},
														run: (*parser).callonDocumentFragment185,
													},
													&labeledExpr{
														pos:   position{line: 847, col: 5, offset: 26988},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 862, col: 4, offset: 27385},
															expr: &actionExpr{
																pos: position{line: 862, col: 5, offset: 27386},
																run: (*parser).callonDocumentFragment188,
																expr: &seqExpr{
																	pos: position{line: 862, col: 5, offset: 27386},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 862, col: 5, offset: 27386},
																			expr: &choiceExpr{
																				pos: position{line: 855, col: 5, offset: 27228},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 855, col: 5, offset: 27228},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 855, col: 5, offset: 27228},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 750, col: 5, offset: 23864},
																									run: (*parser).callonDocumentFragment194,
																									expr: &seqExpr{
																										pos: position{line: 750, col: 5, offset: 23864},
																										exprs: []any{
																											&labeledExpr{
																												pos:   position{line: 750, col: 5, offset: 23864},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 750, col: 16, offset: 23875},
																													run: (*parser).callonDocumentFragment197,
																													expr: &seqExpr{
																														pos: position{line: 750, col: 16, offset: 23875},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 750, col: 16, offset: 23875},
																																val:        "====",
																																ignoreCase: false,
																																want:       "\"====\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 750, col: 23, offset: 23882},
																																expr: &litMatcher{
																																	pos:        position{line: 750, col: 23, offset: 23882},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 752, col: 8, offset: 23966},
																												expr: &actionExpr{
																													pos: position{line: 2897, col: 10, offset: 91732},
																													run: (*parser).callonDocumentFragment203,
																													expr: &charClassMatcher{
																														pos:        position{line: 2897, col: 10, offset: 91732},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2919, col: 8, offset: 92130},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 2906, col: 12, offset: 91903},
																														run: (*parser).callonDocumentFragment206,
																														expr: &choiceExpr{
																															pos: position{line: 2906, col: 13, offset: 91904},
																															alternatives: []any{
																																&litMatcher{
																																	pos:        position{line: 2906, col: 13, offset: 91904},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 20, offset: 91911},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 29, offset: 91920},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2916, col: 8, offset: 92080},
																														expr: &anyMatcher{
																															line: 2916, col: 9, offset: 92081,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 856, col: 5, offset: 27259},
																								run: (*parser).callonDocumentFragment213,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 863, col: 5, offset: 27416},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				run: (*parser).callonDocumentFragment217,
																				expr: &seqExpr{
																					pos: position{line: 814, col: 5, offset: 26120},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 815, col: 5, offset: 26195},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								run: (*parser).callonDocumentFragment222,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2843, col: 13, offset: 90258},
																									expr: &charClassMatcher{
																										pos:        position{line: 2843, col: 13, offset: 90258},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonDocumentFragment226,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 848, col: 5, offset: 27022},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 848, col: 9, offset: 27026},
															expr: &choiceExpr{
																pos: position{line: 855, col: 5, offset: 27228},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 855, col: 5, offset: 27228},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 855, col: 5, offset: 27228},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 750, col: 5, offset: 23864},
																					run: (*parser).callonDocumentFragment238,
																					expr: &seqExpr{
																						pos: position{line: 750, col: 5, offset: 23864},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 750, col: 5, offset: 23864},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 750, col: 16, offset: 23875},
																									run: (*parser).callonDocumentFragment241,
																									expr: &seqExpr{
																										pos: position{line: 750, col: 16, offset: 23875},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 750, col: 16, offset: 23875},
																												val:        "====",
																												ignoreCase: false,
																												want:       "\"====\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 750, col: 23, offset: 23882},
																												expr: &litMatcher{
																													pos:        position{line: 750, col: 23, offset: 23882},
																													val:        "=",
																													ignoreCase: false,
																													want:       "\"=\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 752, col: 8, offset: 23966},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonDocumentFragment247,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonDocumentFragment250,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 856, col: 5, offset: 27259},
																				run: (*parser).callonDocumentFragment257,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 955, col: 5, offset: 29708},
											run: (*parser).callonDocumentFragment260,
											expr: &seqExpr{
												pos: position{line: 955, col: 5, offset: 29708},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 955, col: 5, offset: 29708},
														label: "delimiter",
														expr: &actionExpr{
															pos: position{line: 763, col: 26, offset: 24352},
															run: (*parser).callonDocumentFragment263,
															expr: &seqExpr{
																pos: position{line: 763, col: 26, offset: 24352},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 763, col: 26, offset: 24352},
																		val:        "```",
																		ignoreCase: false,
																		want:       "\"```\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 763, col: 32, offset: 24358},
																		label: "language",
																		expr: &actionExpr{
																			pos: position{line: 767, col: 13, offset: 24488},
																			run: (*parser).callonDocumentFragment267,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 767, col: 14, offset: 24489},
																				expr: &charClassMatcher{
																					pos:        position{line: 767, col: 14, offset: 24489},
																					val:        "[^\\r\\n` ]",
																					chars:      []rune{'\r', '\n', '`', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 763, col: 52, offset: 24378},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonDocumentFragment271,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment274,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 956, col: 5, offset: 29754},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 969, col: 5, offset: 30227},
															expr: &actionExpr{
																pos: position{line: 969, col: 6, offset: 30228},
																run: (*parser).callonDocumentFragment283,
																expr: &seqExpr{
																	pos: position{line: 969, col: 6, offset: 30228},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 969, col: 6, offset: 30228},
																			expr: &seqExpr{
																				pos: position{line: 966, col: 34, offset: 30175},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 966, col: 34, offset: 30175},
																						val:        "```",
																						ignoreCase: false,
																						want:       "\"```\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 966, col: 40, offset: 30181},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonDocumentFragment289,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonDocumentFragment292,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 970, col: 5, offset: 30263},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				run: (*parser).callonDocumentFragment300,
																				expr: &seqExpr{
																					pos: position{line: 814, col: 5, offset: 26120},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 815, col: 5, offset: 26195},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								run: (*parser).callonDocumentFragment305,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2843, col: 13, offset: 90258},
																									expr: &charClassMatcher{
																										pos:        position{line: 2843, col: 13, offset: 90258},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonDocumentFragment309,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 957, col: 5, offset: 29793},
														expr: &seqExpr{
															pos: position{line: 966, col: 34, offset: 30175},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 966, col: 34, offset: 30175},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 966, col: 40, offset: 30181},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonDocumentFragment320,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonDocumentFragment323,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 871, col: 5, offset: 27569},
											run: (*parser).callonDocumentFragment330,
											expr: &seqExpr{
												pos: position{line: 871, col: 5, offset: 27569},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 871, col: 5, offset: 27569},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 757, col: 5, offset: 24111},
															run: (*parser).callonDocumentFragment333,
															expr: &seqExpr{
																pos: position{line: 757, col: 5, offset: 24111},
																exprs: []any{
																	&labeledExpr{
																		pos:   position{line: 757, col: 5, offset: 24111},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 757, col: 16, offset: 24122},
																			run: (*parser).callonDocumentFragment336,
																			expr: &seqExpr{
																				pos: position{line: 757, col: 16, offset: 24122},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 757, col: 16, offset: 24122},
																						val:        "```",
																						ignoreCase: false,
																						want:       "\"```\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 757, col: 22, offset: 24128},
																						expr: &litMatcher{
																							pos:        position{line: 757, col: 22, offset: 24128},
																							val:        "`",
																							ignoreCase: false,
																							want:       "\"`\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 759, col: 8, offset: 24212},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonDocumentFragment342,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment345,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 872, col: 5, offset: 27607},
														run: (*parser).callonDocumentFragment352,
													},
													&labeledExpr{
														pos:   position{line: 875, col: 5, offset: 27699},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 890, col: 5, offset: 28089},
															expr: &actionExpr{
																pos: position{line: 890, col: 6, offset: 28090},
																run: (*parser).callonDocumentFragment355,
																expr: &seqExpr{
																	pos: position{line: 890, col: 6, offset: 28090},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 890, col: 6, offset: 28090},
																			expr: &choiceExpr{
																				pos: position{line: 883, col: 5, offset: 27933},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 883, col: 5, offset: 27933},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 883, col: 5, offset: 27933},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 757, col: 5, offset: 24111},
																									run: (*parser).callonDocumentFragment361,
																									expr: &seqExpr{
																										pos: position{line: 757, col: 5, offset: 24111},
																										exprs: []any{
																											&labeledExpr{
																												pos:   position{line: 757, col: 5, offset: 24111},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 757, col: 16, offset: 24122},
																													run: (*parser).callonDocumentFragment364,
																													expr: &seqExpr{
																														pos: position{line: 757, col: 16, offset: 24122},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 757, col: 16, offset: 24122},
																																val:        "```",
																																ignoreCase: false,
																																want:       "\"```\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 757, col: 22, offset: 24128},
																																expr: &litMatcher{
																																	pos:        position{line: 757, col: 22, offset: 24128},
																																	val:        "`",
																																	ignoreCase: false,
																																	want:       "\"`\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 759, col: 8, offset: 24212},
																												expr: &actionExpr{
																													pos: position{line: 2897, col: 10, offset: 91732},
																													run: (*parser).callonDocumentFragment370,
																													expr: &charClassMatcher{
																														pos:        position{line: 2897, col: 10, offset: 91732},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2919, col: 8, offset: 92130},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 2906, col: 12, offset: 91903},
																														run: (*parser).callonDocumentFragment373,
																														expr: &choiceExpr{
																															pos: position{line: 2906, col: 13, offset: 91904},
																															alternatives: []any{
																																&litMatcher{
																																	pos:        position{line: 2906, col: 13, offset: 91904},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 20, offset: 91911},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 29, offset: 91920},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2916, col: 8, offset: 92080},
																														expr: &anyMatcher{
																															line: 2916, col: 9, offset: 92081,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 884, col: 5, offset: 27963},
																								run: (*parser).callonDocumentFragment380,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 891, col: 5, offset: 28119},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				run: (*parser).callonDocumentFragment384,
																				expr: &seqExpr{
																					pos: position{line: 814, col: 5, offset: 26120},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 815, col: 5, offset: 26195},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								run: (*parser).callonDocumentFragment389,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2843, col: 13, offset: 90258},
																									expr: &charClassMatcher{
																										pos:        position{line: 2843, col: 13, offset: 90258},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonDocumentFragment393,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 876, col: 5, offset: 27732},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 876, col: 9, offset: 27736},
															expr: &choiceExpr{
																pos: position{line: 883, col: 5, offset: 27933},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 883, col: 5, offset: 27933},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 883, col: 5, offset: 27933},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 757, col: 5, offset: 24111},
																					run: (*parser).callonDocumentFragment405,
																					expr: &seqExpr{
																						pos: position{line: 757, col: 5, offset: 24111},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 757, col: 5, offset: 24111},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 757, col: 16, offset: 24122},
																									run: (*parser).callonDocumentFragment408,
																									expr: &seqExpr{
																										pos: position{line: 757, col: 16, offset: 24122},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 757, col: 16, offset: 24122},
																												val:        "```",
																												ignoreCase: false,
																												want:       "\"```\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 757, col: 22, offset: 24128},
																												expr: &litMatcher{
																													pos:        position{line: 757, col: 22, offset: 24128},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 759, col: 8, offset: 24212},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonDocumentFragment414,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonDocumentFragment417,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 884, col: 5, offset: 27963},
																				run: (*parser).callonDocumentFragment424,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 899, col: 5, offset: 28274},
											run: (*parser).callonDocumentFragment427,
											expr: &seqExpr{
												pos: position{line: 899, col: 5, offset: 28274},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 899, col: 5, offset: 28274},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 772, col: 5, offset: 24648},
															run: (*parser).callonDocumentFragment430,
															expr: &seqExpr{
																pos: position{line: 772, col: 5, offset: 24648},
																exprs: []any{
																	&labeledExpr{
																		pos:   position{line: 772, col: 5, offset: 24648},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 772, col: 16, offset: 24659},
																			run: (*parser).callonDocumentFragment433,
																			expr: &seqExpr{
																				pos: position{line: 772, col: 16, offset: 24659},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 772, col: 16, offset: 24659},
																						val:        "----",
																						ignoreCase: false,
																						want:       "\"----\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 772, col: 23, offset: 24666},
																						expr: &litMatcher{
																							pos:        position{line: 772, col: 23, offset: 24666},
																							val:        "-",
																							ignoreCase: false,
																							want:       "\"-\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 774, col: 8, offset: 24750},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonDocumentFragment439,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment442,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 900, col: 5, offset: 28313},
														run: (*parser).callonDocumentFragment449,
													},
													&labeledExpr{
														pos:   position{line: 903, col: 5, offset: 28405},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 918, col: 5, offset: 28803},
															expr: &actionExpr{
																pos: position{line: 918, col: 6, offset: 28804},
																run: (*parser).callonDocumentFragment452,
																expr: &seqExpr{
																	pos: position{line: 918, col: 6, offset: 28804},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 918, col: 6, offset: 28804},
																			expr: &choiceExpr{
																				pos: position{line: 911, col: 5, offset: 28645},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 911, col: 5, offset: 28645},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 911, col: 5, offset: 28645},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 772, col: 5, offset: 24648},
																									run: (*parser).callonDocumentFragment458,
																									expr: &seqExpr{
																										pos: position{line: 772, col: 5, offset: 24648},
																										exprs: []any{
																											&labeledExpr{
																												pos:   position{line: 772, col: 5, offset: 24648},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 772, col: 16, offset: 24659},
																													run: (*parser).callonDocumentFragment461,
																													expr: &seqExpr{
																														pos: position{line: 772, col: 16, offset: 24659},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 772, col: 16, offset: 24659},
																																val:        "----",
																																ignoreCase: false,
																																want:       "\"----\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 772, col: 23, offset: 24666},
																																expr: &litMatcher{
																																	pos:        position{line: 772, col: 23, offset: 24666},
																																	val:        "-",
																																	ignoreCase: false,
																																	want:       "\"-\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 774, col: 8, offset: 24750},
																												expr: &actionExpr{
																													pos: position{line: 2897, col: 10, offset: 91732},
																													run: (*parser).callonDocumentFragment467,
																													expr: &charClassMatcher{
																														pos:        position{line: 2897, col: 10, offset: 91732},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2919, col: 8, offset: 92130},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 2906, col: 12, offset: 91903},
																														run: (*parser).callonDocumentFragment470,
																														expr: &choiceExpr{
																															pos: position{line: 2906, col: 13, offset: 91904},
																															alternatives: []any{
																																&litMatcher{
																																	pos:        position{line: 2906, col: 13, offset: 91904},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 20, offset: 91911},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 29, offset: 91920},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2916, col: 8, offset: 92080},
																														expr: &anyMatcher{
																															line: 2916, col: 9, offset: 92081,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 912, col: 5, offset: 28676},
																								run: (*parser).callonDocumentFragment477,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 919, col: 5, offset: 28834},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				run: (*parser).callonDocumentFragment481,
																				expr: &seqExpr{
																					pos: position{line: 814, col: 5, offset: 26120},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 815, col: 5, offset: 26195},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								run: (*parser).callonDocumentFragment486,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2843, col: 13, offset: 90258},
																									expr: &charClassMatcher{
																										pos:        position{line: 2843, col: 13, offset: 90258},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonDocumentFragment490,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 904, col: 5, offset: 28439},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 904, col: 9, offset: 28443},
															expr: &choiceExpr{
																pos: position{line: 911, col: 5, offset: 28645},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 911, col: 5, offset: 28645},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 911, col: 5, offset: 28645},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 772, col: 5, offset: 24648},
																					run: (*parser).callonDocumentFragment502,
																					expr: &seqExpr{
																						pos: position{line: 772, col: 5, offset: 24648},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 772, col: 5, offset: 24648},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 772, col: 16, offset: 24659},
																									run: (*parser).callonDocumentFragment505,
																									expr: &seqExpr{
																										pos: position{line: 772, col: 16, offset: 24659},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 772, col: 16, offset: 24659},
																												val:        "----",
																												ignoreCase: false,
																												want:       "\"----\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 772, col: 23, offset: 24666},
																												expr: &litMatcher{
																													pos:        position{line: 772, col: 23, offset: 24666},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 774, col: 8, offset: 24750},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonDocumentFragment511,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonDocumentFragment514,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 912, col: 5, offset: 28676},
																				run: (*parser).callonDocumentFragment521,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 927, col: 5, offset: 28989},
											run: (*parser).callonDocumentFragment524,
											expr: &seqExpr{
												pos: position{line: 927, col: 5, offset: 28989},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 927, col: 5, offset: 28989},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 786, col: 5, offset: 25124},
															run: (*parser).callonDocumentFragment527,
															expr: &seqExpr{
																pos: position{line: 786, col: 5, offset: 25124},
																exprs: []any{
																	&labeledExpr{
																		pos:   position{line: 786, col: 5, offset: 25124},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 786, col: 16, offset: 25135},
																			run: (*parser).callonDocumentFragment530,
																			expr: &seqExpr{
																				pos: position{line: 786, col: 16, offset: 25135},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 786, col: 16, offset: 25135},
																						val:        "....",
																						ignoreCase: false,
																						want:       "\"....\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 786, col: 23, offset: 25142},
																						expr: &litMatcher{
																							pos:        position{line: 786, col: 23, offset: 25142},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 788, col: 8, offset: 25226},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonDocumentFragment536,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment539,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 928, col: 5, offset: 29028},
														run: (*parser).callonDocumentFragment546,
													},
													&labeledExpr{
														pos:   position{line: 931, col: 5, offset: 29120},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 946, col: 5, offset: 29518},
															expr: &actionExpr{
																pos: position{line: 946, col: 6, offset: 29519},
																run: (*parser).callonDocumentFragment549,
																expr: &seqExpr{
																	pos: position{line: 946, col: 6, offset: 29519},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 946, col: 6, offset: 29519},
																			expr: &choiceExpr{
																				pos: position{line: 939, col: 5, offset: 29360},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 939, col: 5, offset: 29360},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 939, col: 5, offset: 29360},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 786, col: 5, offset: 25124},
																									run: (*parser).callonDocumentFragment555,
																									expr: &seqExpr{
																										pos: position{line: 786, col: 5, offset: 25124},
																										exprs: []any{
																											&labeledExpr{
																												pos:   position{line: 786, col: 5, offset: 25124},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 786, col: 16, offset: 25135},
																													run: (*parser).callonDocumentFragment558,
																													expr: &seqExpr{
																														pos: position{line: 786, col: 16, offset: 25135},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 786, col: 16, offset: 25135},
																																val:        "....",
																																ignoreCase: false,
																																want:       "\"....\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 786, col: 23, offset: 25142},
																																expr: &litMatcher{
																																	pos:        position{line: 786, col: 23, offset: 25142},
																																	val:        ".",
																																	ignoreCase: false,
																																	want:       "\".\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 788, col: 8, offset: 25226},
																												expr: &actionExpr{
																													pos: position{line: 2897, col: 10, offset: 91732},
																													run: (*parser).callonDocumentFragment564,
																													expr: &charClassMatcher{
																														pos:        position{line: 2897, col: 10, offset: 91732},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2919, col: 8, offset: 92130},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 2906, col: 12, offset: 91903},
																														run: (*parser).callonDocumentFragment567,
																														expr: &choiceExpr{
																															pos: position{line: 2906, col: 13, offset: 91904},
																															alternatives: []any{
																																&litMatcher{
																																	pos:        position{line: 2906, col: 13, offset: 91904},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 20, offset: 91911},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 29, offset: 91920},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2916, col: 8, offset: 92080},
																														expr: &anyMatcher{
																															line: 2916, col: 9, offset: 92081,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 940, col: 5, offset: 29391},
																								run: (*parser).callonDocumentFragment574,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 947, col: 5, offset: 29549},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				run: (*parser).callonDocumentFragment578,
																				expr: &seqExpr{
																					pos: position{line: 814, col: 5, offset: 26120},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 815, col: 5, offset: 26195},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								run: (*parser).callonDocumentFragment583,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2843, col: 13, offset: 90258},
																									expr: &charClassMatcher{
																										pos:        position{line: 2843, col: 13, offset: 90258},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonDocumentFragment587,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 932, col: 5, offset: 29154},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 932, col: 9, offset: 29158},
															expr: &choiceExpr{
																pos: position{line: 939, col: 5, offset: 29360},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 939, col: 5, offset: 29360},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 939, col: 5, offset: 29360},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 786, col: 5, offset: 25124},
																					run: (*parser).callonDocumentFragment599,
																					expr: &seqExpr{
																						pos: position{line: 786, col: 5, offset: 25124},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 786, col: 5, offset: 25124},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 786, col: 16, offset: 25135},
																									run: (*parser).callonDocumentFragment602,
																									expr: &seqExpr{
																										pos: position{line: 786, col: 16, offset: 25135},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 786, col: 16, offset: 25135},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 786, col: 23, offset: 25142},
																												expr: &litMatcher{
																													pos:        position{line: 786, col: 23, offset: 25142},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 788, col: 8, offset: 25226},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonDocumentFragment608,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonDocumentFragment611,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 940, col: 5, offset: 29391},
																				run: (*parser).callonDocumentFragment618,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 978, col: 5, offset: 30432},
											run: (*parser).callonDocumentFragment621,
											expr: &seqExpr{
												pos: position{line: 978, col: 5, offset: 30432},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 978, col: 5, offset: 30432},
														label: "firstLine",
														expr: &actionExpr{
															pos: position{line: 985, col: 5, offset: 30691},
															run: (*parser).callonDocumentFragment624,
															expr: &seqExpr{
																pos: position{line: 985, col: 5, offset: 30691},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 985, col: 5, offset: 30691},
																		expr: &actionExpr{
																			pos: position{line: 680, col: 14, offset: 21521},
																			run: (*parser).callonDocumentFragment627,
																			expr: &seqExpr{
																				pos: position{line: 680, col: 14, offset: 21521},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 680, col: 21, offset: 21528},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonDocumentFragment632,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonDocumentFragment635,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 986, col: 5, offset: 30706},
																		val:        "> ",
																		ignoreCase: false,
																		want:       "\"> \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 987, col: 5, offset: 30716},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2847, col: 14, offset: 90325},
																			run: (*parser).callonDocumentFragment644,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2847, col: 14, offset: 90325},
																				expr: &charClassMatcher{
																					pos:        position{line: 2847, col: 14, offset: 90325},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment648,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 979, col: 5, offset: 30469},
														label: "otherLines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 979, col: 16, offset: 30480},
															expr: &choiceExpr{
																pos: position{line: 979, col: 17, offset: 30481},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 985, col: 5, offset: 30691},
																		run: (*parser).callonDocumentFragment658,
																		expr: &seqExpr{
																			pos: position{line: 985, col: 5, offset: 30691},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 985, col: 5, offset: 30691},
																					expr: &actionExpr{
																						pos: position{line: 680, col: 14, offset: 21521},
																						run: (*parser).callonDocumentFragment661,
																						expr: &seqExpr{
																							pos: position{line: 680, col: 14, offset: 21521},
																							exprs: []any{
																								&andExpr{
																									pos: position{line: 2914, col: 11, offset: 92066},
																									expr: &anyMatcher{
																										line: 2914, col: 13, offset: 92068,
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 680, col: 21, offset: 21528},
																									expr: &actionExpr{
																										pos: position{line: 2897, col: 10, offset: 91732},
																										run: (*parser).callonDocumentFragment666,
																										expr: &charClassMatcher{
																											pos:        position{line: 2897, col: 10, offset: 91732},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2919, col: 8, offset: 92130},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2906, col: 12, offset: 91903},
																											run: (*parser).callonDocumentFragment669,
																											expr: &choiceExpr{
																												pos: position{line: 2906, col: 13, offset: 91904},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2906, col: 13, offset: 91904},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 20, offset: 91911},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 29, offset: 91920},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2916, col: 8, offset: 92080},
																											expr: &anyMatcher{
																												line: 2916, col: 9, offset: 92081,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 986, col: 5, offset: 30706},
																					val:        "> ",
																					ignoreCase: false,
																					want:       "\"> \"",
																				},
																				&labeledExpr{
																					pos:   position{line: 987, col: 5, offset: 30716},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 2847, col: 14, offset: 90325},
																						run: (*parser).callonDocumentFragment678,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2847, col: 14, offset: 90325},
																							expr: &charClassMatcher{
																								pos:        position{line: 2847, col: 14, offset: 90325},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2919, col: 8, offset: 92130},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2906, col: 12, offset: 91903},
																							run: (*parser).callonDocumentFragment682,
																							expr: &choiceExpr{
																								pos: position{line: 2906, col: 13, offset: 91904},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2906, col: 13, offset: 91904},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 20, offset: 91911},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 29, offset: 91920},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2916, col: 8, offset: 92080},
																							expr: &anyMatcher{
																								line: 2916, col: 9, offset: 92081,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1787, col: 5, offset: 57637},
																		run: (*parser).callonDocumentFragment689,
																		expr: &seqExpr{
																			pos: position{line: 1787, col: 5, offset: 57637},
																			exprs: []any{
																				&labeledExpr{
																					pos:   position{line: 1787, col: 5, offset: 57637},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 2847, col: 14, offset: 90325},
																						run: (*parser).callonDocumentFragment692,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2847, col: 14, offset: 90325},
																							expr: &charClassMatcher{
																								pos:        position{line: 2847, col: 14, offset: 90325},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1788, col: 5, offset: 57661},
																					run: (*parser).callonDocumentFragment695,
																				},
																				&choiceExpr{
																					pos: position{line: 2919, col: 8, offset: 92130},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2906, col: 12, offset: 91903},
																							run: (*parser).callonDocumentFragment697,
																							expr: &choiceExpr{
																								pos: position{line: 2906, col: 13, offset: 91904},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2906, col: 13, offset: 91904},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 20, offset: 91911},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 29, offset: 91920},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2916, col: 8, offset: 92080},
																							expr: &anyMatcher{
																								line: 2916, col: 9, offset: 92081,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1000, col: 5, offset: 30981},
											run: (*parser).callonDocumentFragment704,
											expr: &seqExpr{
												pos: position{line: 1000, col: 5, offset: 30981},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 1000, col: 5, offset: 30981},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 779, col: 5, offset: 24893},
															run: (*parser).callonDocumentFragment707,
															expr: &seqExpr{
																pos: position{line: 779, col: 5, offset: 24893},
																exprs: []any{
																	&labeledExpr{
																		pos:   position{line: 779, col: 5, offset: 24893},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 779, col: 16, offset: 24904},
																			run: (*parser).callonDocumentFragment710,
																			expr: &litMatcher{
																				pos:        position{line: 779, col: 16, offset: 24904},
																				val:        "--",
																				ignoreCase: false,
																				want:       "\"--\"",
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 781, col: 8, offset: 24981},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonDocumentFragment713,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment716,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1001, col: 5, offset: 31017},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1011, col: 5, offset: 31285},
															expr: &actionExpr{
																pos: position{line: 1011, col: 6, offset: 31286},
																run: (*parser).callonDocumentFragment725,
																expr: &seqExpr{
																	pos: position{line: 1011, col: 6, offset: 31286},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 1011, col: 6, offset: 31286},
																			expr: &choiceExpr{
																				pos: position{line: 1008, col: 26, offset: 31234},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 779, col: 5, offset: 24893},
																						run: (*parser).callonDocumentFragment729,
																						expr: &seqExpr{
																							pos: position{line: 779, col: 5, offset: 24893},
																							exprs: []any{
																								&labeledExpr{
																									pos:   position{line: 779, col: 5, offset: 24893},
																									label: "delimiter",
																									expr: &actionExpr{
																										pos: position{line: 779, col: 16, offset: 24904},
																										run: (*parser).callonDocumentFragment732,
																										expr: &litMatcher{
																											pos:        position{line: 779, col: 16, offset: 24904},
																											val:        "--",
																											ignoreCase: false,
																											want:       "\"--\"",
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 781, col: 8, offset: 24981},
																									expr: &actionExpr{
																										pos: position{line: 2897, col: 10, offset: 91732},
																										run: (*parser).callonDocumentFragment735,
																										expr: &charClassMatcher{
																											pos:        position{line: 2897, col: 10, offset: 91732},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2919, col: 8, offset: 92130},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2906, col: 12, offset: 91903},
																											run: (*parser).callonDocumentFragment738,
																											expr: &choiceExpr{
																												pos: position{line: 2906, col: 13, offset: 91904},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2906, col: 13, offset: 91904},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 20, offset: 91911},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 29, offset: 91920},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2916, col: 8, offset: 92080},
																											expr: &anyMatcher{
																												line: 2916, col: 9, offset: 92081,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1012, col: 5, offset: 31313},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				run: (*parser).callonDocumentFragment748,
																				expr: &seqExpr{
																					pos: position{line: 814, col: 5, offset: 26120},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 815, col: 5, offset: 26195},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								run: (*parser).callonDocumentFragment753,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2843, col: 13, offset: 90258},
																									expr: &charClassMatcher{
																										pos:        position{line: 2843, col: 13, offset: 90258},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonDocumentFragment757,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1002, col: 5, offset: 31048},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1002, col: 9, offset: 31052},
															expr: &choiceExpr{
																pos: position{line: 1008, col: 26, offset: 31234},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 779, col: 5, offset: 24893},
																		run: (*parser).callonDocumentFragment767,
																		expr: &seqExpr{
																			pos: position{line: 779, col: 5, offset: 24893},
																			exprs: []any{
																				&labeledExpr{
																					pos:   position{line: 779, col: 5, offset: 24893},
																					label: "delimiter",
																					expr: &actionExpr{
																						pos: position{line: 779, col: 16, offset: 24904},
																						run: (*parser).callonDocumentFragment770,
																						expr: &litMatcher{
																							pos:        position{line: 779, col: 16, offset: 24904},
																							val:        "--",
																							ignoreCase: false,
																							want:       "\"--\"",
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 781, col: 8, offset: 24981},
																					expr: &actionExpr{
																						pos: position{line: 2897, col: 10, offset: 91732},
																						run: (*parser).callonDocumentFragment773,
																						expr: &charClassMatcher{
																							pos:        position{line: 2897, col: 10, offset: 91732},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2919, col: 8, offset: 92130},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2906, col: 12, offset: 91903},
																							run: (*parser).callonDocumentFragment776,
																							expr: &choiceExpr{
																								pos: position{line: 2906, col: 13, offset: 91904},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2906, col: 13, offset: 91904},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 20, offset: 91911},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 29, offset: 91920},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2916, col: 8, offset: 92080},
																							expr: &anyMatcher{
																								line: 2916, col: 9, offset: 92081,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1020, col: 5, offset: 31476},
											run: (*parser).callonDocumentFragment785,
											expr: &seqExpr{
												pos: position{line: 1020, col: 5, offset: 31476},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 1020, col: 5, offset: 31476},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 793, col: 5, offset: 25376},
															run: (*parser).callonDocumentFragment788,
															expr: &seqExpr{
																pos: position{line: 793, col: 5, offset: 25376},
																exprs: []any{
																	&labeledExpr{
																		pos:   position{line: 793, col: 5, offset: 25376},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 793, col: 16, offset: 25387},
																			run: (*parser).callonDocumentFragment791,
																			expr: &seqExpr{
																				pos: position{line: 793, col: 16, offset: 25387},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 793, col: 16, offset: 25387},
																						val:        "++++",
																						ignoreCase: false,
																						want:       "\"++++\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 793, col: 23, offset: 25394},
																						expr: &litMatcher{
																							pos:        position{line: 793, col: 23, offset: 25394},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 795, col: 8, offset: 25478},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonDocumentFragment797,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment800,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 1021, col: 5, offset: 31519},
														run: (*parser).callonDocumentFragment807,
													},
													&labeledExpr{
														pos:   position{line: 1024, col: 5, offset: 31611},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1039, col: 5, offset: 32041},
															expr: &actionExpr{
																pos: position{line: 1039, col: 6, offset: 32042},
																run: (*parser).callonDocumentFragment810,
																expr: &seqExpr{
																	pos: position{line: 1039, col: 6, offset: 32042},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 1039, col: 6, offset: 32042},
																			expr: &choiceExpr{
																				pos: position{line: 1032, col: 5, offset: 31875},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1032, col: 5, offset: 31875},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 1032, col: 5, offset: 31875},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 793, col: 5, offset: 25376},
																									run: (*parser).callonDocumentFragment816,
																									expr: &seqExpr{
																										pos: position{line: 793, col: 5, offset: 25376},
																										exprs: []any{
																											&labeledExpr{
																												pos:   position{line: 793, col: 5, offset: 25376},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 793, col: 16, offset: 25387},
																													run: (*parser).callonDocumentFragment819,
																													expr: &seqExpr{
																														pos: position{line: 793, col: 16, offset: 25387},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 793, col: 16, offset: 25387},
																																val:        "++++",
																																ignoreCase: false,
																																want:       "\"++++\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 793, col: 23, offset: 25394},
																																expr: &litMatcher{
																																	pos:        position{line: 793, col: 23, offset: 25394},
																																	val:        "+",
																																	ignoreCase: false,
																																	want:       "\"+\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 795, col: 8, offset: 25478},
																												expr: &actionExpr{
																													pos: position{line: 2897, col: 10, offset: 91732},
																													run: (*parser).callonDocumentFragment825,
																													expr: &charClassMatcher{
																														pos:        position{line: 2897, col: 10, offset: 91732},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2919, col: 8, offset: 92130},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 2906, col: 12, offset: 91903},
																														run: (*parser).callonDocumentFragment828,
																														expr: &choiceExpr{
																															pos: position{line: 2906, col: 13, offset: 91904},
																															alternatives: []any{
																																&litMatcher{
																																	pos:        position{line: 2906, col: 13, offset: 91904},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 20, offset: 91911},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 29, offset: 91920},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2916, col: 8, offset: 92080},
																														expr: &anyMatcher{
																															line: 2916, col: 9, offset: 92081,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1033, col: 5, offset: 31910},
																								run: (*parser).callonDocumentFragment835,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1040, col: 5, offset: 32076},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				run: (*parser).callonDocumentFragment839,
																				expr: &seqExpr{
																					pos: position{line: 814, col: 5, offset: 26120},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 815, col: 5, offset: 26195},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								run: (*parser).callonDocumentFragment844,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2843, col: 13, offset: 90258},
																									expr: &charClassMatcher{
																										pos:        position{line: 2843, col: 13, offset: 90258},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonDocumentFragment848,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1025, col: 5, offset: 31649},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1025, col: 9, offset: 31653},
															expr: &choiceExpr{
																pos: position{line: 1032, col: 5, offset: 31875},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 1032, col: 5, offset: 31875},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 1032, col: 5, offset: 31875},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 793, col: 5, offset: 25376},
																					run: (*parser).callonDocumentFragment860,
																					expr: &seqExpr{
																						pos: position{line: 793, col: 5, offset: 25376},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 793, col: 5, offset: 25376},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 793, col: 16, offset: 25387},
																									run: (*parser).callonDocumentFragment863,
																									expr: &seqExpr{
																										pos: position{line: 793, col: 16, offset: 25387},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 793, col: 16, offset: 25387},
																												val:        "++++",
																												ignoreCase: false,
																												want:       "\"++++\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 793, col: 23, offset: 25394},
																												expr: &litMatcher{
																													pos:        position{line: 793, col: 23, offset: 25394},
																													val:        "+",
																													ignoreCase: false,
																													want:       "\"+\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 795, col: 8, offset: 25478},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonDocumentFragment869,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonDocumentFragment872,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1033, col: 5, offset: 31910},
																				run: (*parser).callonDocumentFragment879,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1048, col: 5, offset: 32227},
											run: (*parser).callonDocumentFragment882,
											expr: &seqExpr{
												pos: position{line: 1048, col: 5, offset: 32227},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 1048, col: 5, offset: 32227},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 800, col: 5, offset: 25626},
															run: (*parser).callonDocumentFragment885,
															expr: &seqExpr{
																pos: position{line: 800, col: 5, offset: 25626},
																exprs: []any{
																	&labeledExpr{
																		pos:   position{line: 800, col: 5, offset: 25626},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 800, col: 16, offset: 25637},
																			run: (*parser).callonDocumentFragment888,
																			expr: &seqExpr{
																				pos: position{line: 800, col: 16, offset: 25637},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 800, col: 16, offset: 25637},
																						val:        "____",
																						ignoreCase: false,
																						want:       "\"____\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 800, col: 23, offset: 25644},
																						expr: &litMatcher{
																							pos:        position{line: 800, col: 23, offset: 25644},
																							val:        "_",
																							ignoreCase: false,
																							want:       "\"_\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 802, col: 8, offset: 25728},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonDocumentFragment894,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment897,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 1049, col: 5, offset: 32264},
														run: (*parser).callonDocumentFragment904,
													},
													&labeledExpr{
														pos:   position{line: 1052, col: 5, offset: 32356},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1067, col: 4, offset: 32737},
															expr: &actionExpr{
																pos: position{line: 1067, col: 5, offset: 32738},
																run: (*parser).callonDocumentFragment907,
																expr: &seqExpr{
																	pos: position{line: 1067, col: 5, offset: 32738},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 1067, col: 5, offset: 32738},
																			expr: &choiceExpr{
																				pos: position{line: 1060, col: 5, offset: 32584},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1060, col: 5, offset: 32584},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 1060, col: 5, offset: 32584},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 800, col: 5, offset: 25626},
																									run: (*parser).callonDocumentFragment913,
																									expr: &seqExpr{
																										pos: position{line: 800, col: 5, offset: 25626},
																										exprs: []any{
																											&labeledExpr{
																												pos:   position{line: 800, col: 5, offset: 25626},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 800, col: 16, offset: 25637},
																													run: (*parser).callonDocumentFragment916,
																													expr: &seqExpr{
																														pos: position{line: 800, col: 16, offset: 25637},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 800, col: 16, offset: 25637},
																																val:        "____",
																																ignoreCase: false,
																																want:       "\"____\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 800, col: 23, offset: 25644},
																																expr: &litMatcher{
																																	pos:        position{line: 800, col: 23, offset: 25644},
																																	val:        "_",
																																	ignoreCase: false,
																																	want:       "\"_\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 802, col: 8, offset: 25728},
																												expr: &actionExpr{
																													pos: position{line: 2897, col: 10, offset: 91732},
																													run: (*parser).callonDocumentFragment922,
																													expr: &charClassMatcher{
																														pos:        position{line: 2897, col: 10, offset: 91732},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2919, col: 8, offset: 92130},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 2906, col: 12, offset: 91903},
																														run: (*parser).callonDocumentFragment925,
																														expr: &choiceExpr{
																															pos: position{line: 2906, col: 13, offset: 91904},
																															alternatives: []any{
																																&litMatcher{
																																	pos:        position{line: 2906, col: 13, offset: 91904},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 20, offset: 91911},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 29, offset: 91920},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2916, col: 8, offset: 92080},
																														expr: &anyMatcher{
																															line: 2916, col: 9, offset: 92081,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1061, col: 5, offset: 32613},
																								run: (*parser).callonDocumentFragment932,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1068, col: 5, offset: 32766},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				run: (*parser).callonDocumentFragment936,
																				expr: &seqExpr{
																					pos: position{line: 814, col: 5, offset: 26120},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 815, col: 5, offset: 26195},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								run: (*parser).callonDocumentFragment941,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2843, col: 13, offset: 90258},
																									expr: &charClassMatcher{
																										pos:        position{line: 2843, col: 13, offset: 90258},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonDocumentFragment945,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1053, col: 5, offset: 32388},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1053, col: 9, offset: 32392},
															expr: &choiceExpr{
																pos: position{line: 1060, col: 5, offset: 32584},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 1060, col: 5, offset: 32584},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 1060, col: 5, offset: 32584},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 800, col: 5, offset: 25626},
																					run: (*parser).callonDocumentFragment957,
																					expr: &seqExpr{
																						pos: position{line: 800, col: 5, offset: 25626},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 800, col: 5, offset: 25626},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 800, col: 16, offset: 25637},
																									run: (*parser).callonDocumentFragment960,
																									expr: &seqExpr{
																										pos: position{line: 800, col: 16, offset: 25637},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 800, col: 16, offset: 25637},
																												val:        "____",
																												ignoreCase: false,
																												want:       "\"____\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 800, col: 23, offset: 25644},
																												expr: &litMatcher{
																													pos:        position{line: 800, col: 23, offset: 25644},
																													val:        "_",
																													ignoreCase: false,
																													want:       "\"_\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 802, col: 8, offset: 25728},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonDocumentFragment966,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonDocumentFragment969,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1061, col: 5, offset: 32613},
																				run: (*parser).callonDocumentFragment976,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1076, col: 5, offset: 32921},
											run: (*parser).callonDocumentFragment979,
											expr: &seqExpr{
												pos: position{line: 1076, col: 5, offset: 32921},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 1076, col: 5, offset: 32921},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 807, col: 5, offset: 25872},
															run: (*parser).callonDocumentFragment982,
															expr: &seqExpr{
																pos: position{line: 807, col: 5, offset: 25872},
																exprs: []any{
																	&labeledExpr{
																		pos:   position{line: 807, col: 5, offset: 25872},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 807, col: 16, offset: 25883},
																			run: (*parser).callonDocumentFragment985,
																			expr: &seqExpr{
																				pos: position{line: 807, col: 16, offset: 25883},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 807, col: 16, offset: 25883},
																						val:        "****",
																						ignoreCase: false,
																						want:       "\"****\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 807, col: 23, offset: 25890},
																						expr: &litMatcher{
																							pos:        position{line: 807, col: 23, offset: 25890},
																							val:        "*",
																							ignoreCase: false,
																							want:       "\"*\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 809, col: 8, offset: 25974},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonDocumentFragment991,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment994,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 1077, col: 5, offset: 32960},
														run: (*parser).callonDocumentFragment1001,
													},
													&labeledExpr{
														pos:   position{line: 1080, col: 5, offset: 33052},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1095, col: 4, offset: 33449},
															expr: &actionExpr{
																pos: position{line: 1095, col: 5, offset: 33450},
																run: (*parser).callonDocumentFragment1004,
																expr: &seqExpr{
																	pos: position{line: 1095, col: 5, offset: 33450},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 1095, col: 5, offset: 33450},
																			expr: &choiceExpr{
																				pos: position{line: 1088, col: 5, offset: 33292},
																				alternatives: []any{
																					&seqExpr{
																						pos: position{line: 1088, col: 5, offset: 33292},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 1088, col: 5, offset: 33292},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 807, col: 5, offset: 25872},
																									run: (*parser).callonDocumentFragment1010,
																									expr: &seqExpr{
																										pos: position{line: 807, col: 5, offset: 25872},
																										exprs: []any{
																											&labeledExpr{
																												pos:   position{line: 807, col: 5, offset: 25872},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 807, col: 16, offset: 25883},
																													run: (*parser).callonDocumentFragment1013,
																													expr: &seqExpr{
																														pos: position{line: 807, col: 16, offset: 25883},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 807, col: 16, offset: 25883},
																																val:        "****",
																																ignoreCase: false,
																																want:       "\"****\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 807, col: 23, offset: 25890},
																																expr: &litMatcher{
																																	pos:        position{line: 807, col: 23, offset: 25890},
																																	val:        "*",
																																	ignoreCase: false,
																																	want:       "\"*\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 809, col: 8, offset: 25974},
																												expr: &actionExpr{
																													pos: position{line: 2897, col: 10, offset: 91732},
																													run: (*parser).callonDocumentFragment1019,
																													expr: &charClassMatcher{
																														pos:        position{line: 2897, col: 10, offset: 91732},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2919, col: 8, offset: 92130},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 2906, col: 12, offset: 91903},
																														run: (*parser).callonDocumentFragment1022,
																														expr: &choiceExpr{
																															pos: position{line: 2906, col: 13, offset: 91904},
																															alternatives: []any{
																																&litMatcher{
																																	pos:        position{line: 2906, col: 13, offset: 91904},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 20, offset: 91911},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 29, offset: 91920},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2916, col: 8, offset: 92080},
																														expr: &anyMatcher{
																															line: 2916, col: 9, offset: 92081,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1089, col: 5, offset: 33323},
																								run: (*parser).callonDocumentFragment1029,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1096, col: 5, offset: 33480},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				run: (*parser).callonDocumentFragment1033,
																				expr: &seqExpr{
																					pos: position{line: 814, col: 5, offset: 26120},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 815, col: 5, offset: 26195},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								run: (*parser).callonDocumentFragment1038,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2843, col: 13, offset: 90258},
																									expr: &charClassMatcher{
																										pos:        position{line: 2843, col: 13, offset: 90258},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonDocumentFragment1042,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1081, col: 5, offset: 33086},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1081, col: 9, offset: 33090},
															expr: &choiceExpr{
																pos: position{line: 1088, col: 5, offset: 33292},
																alternatives: []any{
																	&seqExpr{
																		pos: position{line: 1088, col: 5, offset: 33292},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 1088, col: 5, offset: 33292},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 807, col: 5, offset: 25872},
																					run: (*parser).callonDocumentFragment1054,
																					expr: &seqExpr{
																						pos: position{line: 807, col: 5, offset: 25872},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 807, col: 5, offset: 25872},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 807, col: 16, offset: 25883},
																									run: (*parser).callonDocumentFragment1057,
																									expr: &seqExpr{
																										pos: position{line: 807, col: 16, offset: 25883},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 807, col: 16, offset: 25883},
																												val:        "****",
																												ignoreCase: false,
																												want:       "\"****\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 807, col: 23, offset: 25890},
																												expr: &litMatcher{
																													pos:        position{line: 807, col: 23, offset: 25890},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 809, col: 8, offset: 25974},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonDocumentFragment1063,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonDocumentFragment1066,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1089, col: 5, offset: 33323},
																				run: (*parser).callonDocumentFragment1073,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2742, col: 18, offset: 87322},
											run: (*parser).callonDocumentFragment1076,
											expr: &seqExpr{
												pos: position{line: 2742, col: 18, offset: 87322},
												exprs: []any{
													&choiceExpr{
														pos: position{line: 2743, col: 9, offset: 87332},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2743, col: 9, offset: 87332},
																val:        "'''",
																ignoreCase: false,
																want:       "\"'''\"",
															},
															&litMatcher{
																pos:        position{line: 2744, col: 11, offset: 87368},
																val:        "***",
																ignoreCase: false,
																want:       "\"***\"",
															},
															&litMatcher{
																pos:        position{line: 2744, col: 19, offset: 87376},
																val:        "* * *",
																ignoreCase: false,
																want:       "\"* * *\"",
															},
															&litMatcher{
																pos:        position{line: 2744, col: 29, offset: 87386},
																val:        "---",
																ignoreCase: false,
																want:       "\"---\"",
															},
															&litMatcher{
																pos:        position{line: 2744, col: 37, offset: 87394},
																val:        "- - -",
																ignoreCase: false,
																want:       "\"- - -\"",
															},
															&litMatcher{
																pos:        position{line: 2744, col: 47, offset: 87404},
																val:        "___",
																ignoreCase: false,
																want:       "\"___\"",
															},
															&litMatcher{
																pos:        position{line: 2744, col: 55, offset: 87412},
																val:        "_ _ _",
																ignoreCase: false,
																want:       "\"_ _ _\"",
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 2745, col: 11, offset: 87470},
														expr: &actionExpr{
															pos: position{line: 2897, col: 10, offset: 91732},
															run: (*parser).callonDocumentFragment1087,
															expr: &charClassMatcher{
																pos:        position{line: 2897, col: 10, offset: 91732},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2919, col: 8, offset: 92130},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonDocumentFragment1090,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2919, col: 8, offset: 92130},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonDocumentFragment1098,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 247, col: 11, offset: 7378},
											name: "ListElements",
										},
										&actionExpr{
											pos: position{line: 2591, col: 5, offset: 82797},
											run: (*parser).callonDocumentFragment1106,
											expr: &seqExpr{
												pos: position{line: 2591, col: 5, offset: 82797},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 2597, col: 19, offset: 82954},
														val:        "|===",
														ignoreCase: false,
														want:       "\"|===\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 2597, col: 26, offset: 82961},
														expr: &actionExpr{
															pos: position{line: 2897, col: 10, offset: 91732},
															run: (*parser).callonDocumentFragment1110,
															expr: &charClassMatcher{
																pos:        position{line: 2897, col: 10, offset: 91732},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2919, col: 8, offset: 92130},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonDocumentFragment1113,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2592, col: 5, offset: 82821},
														label: "lines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 2592, col: 11, offset: 82827},
															expr: &choiceExpr{
																pos: position{line: 2592, col: 12, offset: 82828},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 680, col: 14, offset: 21521},
																		run: (*parser).callonDocumentFragment1123,
																		expr: &seqExpr{
																			pos: position{line: 680, col: 14, offset: 21521},
																			exprs: []any{
																				&andExpr{
																					pos: position{line: 2914, col: 11, offset: 92066},
																					expr: &anyMatcher{
																						line: 2914, col: 13, offset: 92068,
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 680, col: 21, offset: 21528},
																					expr: &actionExpr{
																						pos: position{line: 2897, col: 10, offset: 91732},
																						run: (*parser).callonDocumentFragment1128,
																						expr: &charClassMatcher{
																							pos:        position{line: 2897, col: 10, offset: 91732},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2919, col: 8, offset: 92130},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2906, col: 12, offset: 91903},
																							run: (*parser).callonDocumentFragment1131,
																							expr: &choiceExpr{
																								pos: position{line: 2906, col: 13, offset: 91904},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2906, col: 13, offset: 91904},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 20, offset: 91911},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 29, offset: 91920},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2916, col: 8, offset: 92080},
																							expr: &anyMatcher{
																								line: 2916, col: 9, offset: 92081,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2604, col: 5, offset: 83073},
																		run: (*parser).callonDocumentFragment1138,
																		expr: &seqExpr{
																			pos: position{line: 2604, col: 5, offset: 83073},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 2604, col: 5, offset: 83073},
																					expr: &choiceExpr{
																						pos: position{line: 2601, col: 22, offset: 83034},
																						alternatives: []any{
																							&seqExpr{
																								pos: position{line: 2597, col: 19, offset: 82954},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 2597, col: 19, offset: 82954},
																										val:        "|===",
																										ignoreCase: false,
																										want:       "\"|===\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2597, col: 26, offset: 82961},
																										expr: &actionExpr{
																											pos: position{line: 2897, col: 10, offset: 91732},
																											run: (*parser).callonDocumentFragment1145,
																											expr: &charClassMatcher{
																												pos:        position{line: 2897, col: 10, offset: 91732},
																												val:        "[\\t ]",
																												chars:      []rune{'\t', ' '},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2919, col: 8, offset: 92130},
																										alternatives: []any{
																											&actionExpr{
																												pos: position{line: 2906, col: 12, offset: 91903},
																												run: (*parser).callonDocumentFragment1148,
																												expr: &choiceExpr{
																													pos: position{line: 2906, col: 13, offset: 91904},
																													alternatives: []any{
																														&litMatcher{
																															pos:        position{line: 2906, col: 13, offset: 91904},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2906, col: 20, offset: 91911},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2906, col: 29, offset: 91920},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2916, col: 8, offset: 92080},
																												expr: &anyMatcher{
																													line: 2916, col: 9, offset: 92081,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2605, col: 5, offset: 83096},
																					label: "content",
																					expr: &choiceExpr{
																						pos: position{line: 2606, col: 9, offset: 83114},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2606, col: 10, offset: 83115},
																								run: (*parser).callonDocumentFragment1159,
																								expr: &labeledExpr{
																									pos:   position{line: 2606, col: 10, offset: 83115},
																									label: "cells",
																									expr: &actionExpr{
																										pos: position{line: 2655, col: 15, offset: 84713},
																										run: (*parser).callonDocumentFragment1161,
																										expr: &labeledExpr{
																											pos:   position{line: 2655, col: 15, offset: 84713},
																											label: "cells",
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2655, col: 21, offset: 84719},
																												expr: &actionExpr{
																													pos: position{line: 2660, col: 5, offset: 84777},
																													run: (*parser).callonDocumentFragment1164,
																													expr: &seqExpr{
																														pos: position{line: 2660, col: 5, offset: 84777},
																														exprs: []any{
																															&notExpr{
																																pos: position{line: 2660, col: 5, offset: 84777},
																																expr: &choiceExpr{
																																	pos: position{line: 2601, col: 22, offset: 83034},
																																	alternatives: []any{
																																		&seqExpr{
																																			pos: position{line: 2597, col: 19, offset: 82954},
																																			exprs: []any{
																																				&litMatcher{
																																					pos:        position{line: 2597, col: 19, offset: 82954},
																																					val:        "|===",
																																					ignoreCase: false,
																																					want:       "\"|===\"",
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 2597, col: 26, offset: 82961},
																																					expr: &actionExpr{
																																						pos: position{line: 2897, col: 10, offset: 91732},
																																						run: (*parser).callonDocumentFragment1171,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2897, col: 10, offset: 91732},
																																							val:        "[\\t ]",
																																							chars:      []rune{'\t', ' '},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2919, col: 8, offset: 92130},
																																					alternatives: []any{
																																						&actionExpr{
																																							pos: position{line: 2906, col: 12, offset: 91903},
																																							run: (*parser).callonDocumentFragment1174,
																																							expr: &choiceExpr{
																																								pos: position{line: 2906, col: 13, offset: 91904},
																																								alternatives: []any{
																																									&litMatcher{
																																										pos:        position{line: 2906, col: 13, offset: 91904},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2906, col: 20, offset: 91911},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2906, col: 29, offset: 91920},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2916, col: 8, offset: 92080},
																																							expr: &anyMatcher{
																																								line: 2916, col: 9, offset: 92081,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 2916, col: 8, offset: 92080},
																																			expr: &anyMatcher{
																																				line: 2916, col: 9, offset: 92081,
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2661, col: 5, offset: 84800},
																																expr: &actionExpr{
																																	pos: position{line: 680, col: 14, offset: 21521},
																																	run: (*parser).callonDocumentFragment1184,
																																	expr: &seqExpr{
																																		pos: position{line: 680, col: 14, offset: 21521},
																																		exprs: []any{
																																			&andExpr{
																																				pos: position{line: 2914, col: 11, offset: 92066},
																																				expr: &anyMatcher{
																																					line: 2914, col: 13, offset: 92068,
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 680, col: 21, offset: 21528},
																																				expr: &actionExpr{
																																					pos: position{line: 2897, col: 10, offset: 91732},
																																					run: (*parser).callonDocumentFragment1189,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2897, col: 10, offset: 91732},
																																						val:        "[\\t ]",
																																						chars:      []rune{'\t', ' '},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2919, col: 8, offset: 92130},
																																				alternatives: []any{
																																					&actionExpr{
																																						pos: position{line: 2906, col: 12, offset: 91903},
																																						run: (*parser).callonDocumentFragment1192,
																																						expr: &choiceExpr{
																																							pos: position{line: 2906, col: 13, offset: 91904},
																																							alternatives: []any{
																																								&litMatcher{
																																									pos:        position{line: 2906, col: 13, offset: 91904},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2906, col: 20, offset: 91911},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2906, col: 29, offset: 91920},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2916, col: 8, offset: 92080},
																																						expr: &anyMatcher{
																																							line: 2916, col: 9, offset: 92081,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 2662, col: 5, offset: 84815},
																																expr: &actionExpr{
																																	pos: position{line: 2897, col: 10, offset: 91732},
																																	run: (*parser).callonDocumentFragment1200,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2897, col: 10, offset: 91732},
																																		val:        "[\\t ]",
																																		chars:      []rune{'\t', ' '},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 2662, col: 12, offset: 84822},
																																label: "format",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 2662, col: 19, offset: 84829},
																																	expr: &actionExpr{
																																		pos: position{line: 2696, col: 20, offset: 85764},
																																		run: (*parser).callonDocumentFragment1204,
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 2696, col: 20, offset: 85764},
																																			expr: &choiceExpr{
																																				pos: position{line: 2694, col: 30, offset: 85726},
																																				alternatives: []any{
																																					&litMatcher{
																																						pos:        position{line: 2694, col: 30, offset: 85726},
																																						val:        "\\|",
																																						ignoreCase: false,
																																						want:       "\"\\\\|\"",
																																					},
																																					&charClassMatcher{
																																						pos:        position{line: 2694, col: 38, offset: 85734},
																																						val:        "[^ |\\r\\n]",
																																						chars:      []rune{' ', '|', '\r', '\n'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 2662, col: 38, offset: 84848},
																																val:        "|",
																																ignoreCase: false,
																																want:       "\"|\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 2662, col: 42, offset: 84852},
																																expr: &actionExpr{
																																	pos: position{line: 2897, col: 10, offset: 91732},
																																	run: (*parser).callonDocumentFragment1211,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2897, col: 10, offset: 91732},
																																		val:        "[\\t ]",
																																		chars:      []rune{'\t', ' '},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 2662, col: 49, offset: 84859},
																																label: "eol",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 2662, col: 53, offset: 84863},
																																	expr: &actionExpr{
																																		pos: position{line: 2906, col: 12, offset: 91903},
																																		run: (*parser).callonDocumentFragment1215,
																																		expr: &choiceExpr{
																																			pos: position{line: 2906, col: 13, offset: 91904},
																																			alternatives: []any{
																																				&litMatcher{
																																					pos:        position{line: 2906, col: 13, offset: 91904},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2906, col: 20, offset: 91911},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2906, col: 29, offset: 91920},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 2662, col: 64, offset: 84874},
																																label: "content",
																																expr: &zeroOrMoreExpr{
																																	pos: position{line: 2676, col: 5, offset: 85220},
																																	expr: &actionExpr{
																																		pos: position{line: 2677, col: 9, offset: 85230},
																																		run: (*parser).callonDocumentFragment1222,
																																		expr: &seqExpr{
																																			pos: position{line: 2677, col: 9, offset: 85230},
																																			exprs: []any{
																																				&notExpr{
																																					pos: position{line: 2677, col: 9, offset: 85230},
																																					expr: &choiceExpr{
																																						pos: position{line: 2601, col: 22, offset: 83034},
																																						alternatives: []any{
																																							&seqExpr{
																																								pos: position{line: 2597, col: 19, offset: 82954},
																																								exprs: []any{
																																									&litMatcher{
																																										pos:        position{line: 2597, col: 19, offset: 82954},
																																										val:        "|===",
																																										ignoreCase: false,
																																										want:       "\"|===\"",
																																									},
																																									&zeroOrMoreExpr{
																																										pos: position{line: 2597, col: 26, offset: 82961},
																																										expr: &actionExpr{
																																											pos: position{line: 2897, col: 10, offset: 91732},
																																											run: (*parser).callonDocumentFragment1229,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2897, col: 10, offset: 91732},
																																												val:        "[\\t ]",
																																												chars:      []rune{'\t', ' '},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																									&choiceExpr{
																																										pos: position{line: 2919, col: 8, offset: 92130},
																																										alternatives: []any{
																																											&actionExpr{
																																												pos: position{line: 2906, col: 12, offset: 91903},
																																												run: (*parser).callonDocumentFragment1232,
																																												expr: &choiceExpr{
																																													pos: position{line: 2906, col: 13, offset: 91904},
																																													alternatives: []any{
																																														&litMatcher{
																																															pos:        position{line: 2906, col: 13, offset: 91904},
																																															val:        "\n",
																																															ignoreCase: false,
																																															want:       "\"\\n\"",
																																														},
																																														&litMatcher{
																																															pos:        position{line: 2906, col: 20, offset: 91911},
																																															val:        "\r\n",
																																															ignoreCase: false,
																																															want:       "\"\\r\\n\"",
																																														},
																																														&litMatcher{
																																															pos:        position{line: 2906, col: 29, offset: 91920},
																																															val:        "\r",
																																															ignoreCase: false,
																																															want:       "\"\\r\"",
																																														},
																																													},
																																												},
																																											},
																																											&notExpr{
																																												pos: position{line: 2916, col: 8, offset: 92080},
																																												expr: &anyMatcher{
																																													line: 2916, col: 9, offset: 92081,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 2916, col: 8, offset: 92080},
																																								expr: &anyMatcher{
																																									line: 2916, col: 9, offset: 92081,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 2678, col: 9, offset: 85257},
																																					expr: &actionExpr{
																																						pos: position{line: 680, col: 14, offset: 21521},
																																						run: (*parser).callonDocumentFragment1242,
																																						expr: &seqExpr{
																																							pos: position{line: 680, col: 14, offset: 21521},
																																							exprs: []any{
																																								&andExpr{
																																									pos: position{line: 2914, col: 11, offset: 92066},
																																									expr: &anyMatcher{
																																										line: 2914, col: 13, offset: 92068,
																																									},
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 680, col: 21, offset: 21528},
																																									expr: &actionExpr{
																																										pos: position{line: 2897, col: 10, offset: 91732},
																																										run: (*parser).callonDocumentFragment1247,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 2897, col: 10, offset: 91732},
																																											val:        "[\\t ]",
																																											chars:      []rune{'\t', ' '},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																								&choiceExpr{
																																									pos: position{line: 2919, col: 8, offset: 92130},
																																									alternatives: []any{
																																										&actionExpr{
																																											pos: position{line: 2906, col: 12, offset: 91903},
																																											run: (*parser).callonDocumentFragment1250,
																																											expr: &choiceExpr{
																																												pos: position{line: 2906, col: 13, offset: 91904},
																																												alternatives: []any{
																																													&litMatcher{
																																														pos:        position{line: 2906, col: 13, offset: 91904},
																																														val:        "\n",
																																														ignoreCase: false,
																																														want:       "\"\\n\"",
																																													},
																																													&litMatcher{
																																														pos:        position{line: 2906, col: 20, offset: 91911},
																																														val:        "\r\n",
																																														ignoreCase: false,
																																														want:       "\"\\r\\n\"",
																																													},
																																													&litMatcher{
																																														pos:        position{line: 2906, col: 29, offset: 91920},
																																														val:        "\r",
																																														ignoreCase: false,
																																														want:       "\"\\r\"",
																																													},
																																												},
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 2916, col: 8, offset: 92080},
																																											expr: &anyMatcher{
																																												line: 2916, col: 9, offset: 92081,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 2679, col: 9, offset: 85276},
																																					expr: &seqExpr{
																																						pos: position{line: 2679, col: 11, offset: 85278},
																																						exprs: []any{
																																							&labeledExpr{
																																								pos:   position{line: 2679, col: 11, offset: 85278},
																																								label: "format",
																																								expr: &zeroOrMoreExpr{
																																									pos: position{line: 2679, col: 19, offset: 85286},
																																									expr: &actionExpr{
																																										pos: position{line: 2897, col: 10, offset: 91732},
																																										run: (*parser).callonDocumentFragment1261,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 2897, col: 10, offset: 91732},
																																											val:        "[\\t ]",
																																											chars:      []rune{'\t', ' '},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrOneExpr{
																																								pos: position{line: 2679, col: 26, offset: 85293},
																																								expr: &actionExpr{
																																									pos: position{line: 2696, col: 20, offset: 85764},
																																									run: (*parser).callonDocumentFragment1264,
																																									expr: &zeroOrMoreExpr{
																																										pos: position{line: 2696, col: 20, offset: 85764},
																																										expr: &choiceExpr{
																																											pos: position{line: 2694, col: 30, offset: 85726},
																																											alternatives: []any{
																																												&litMatcher{
																																													pos:        position{line: 2694, col: 30, offset: 85726},
																																													val:        "\\|",
																																													ignoreCase: false,
																																													want:       "\"\\\\|\"",
																																												},
																																												&charClassMatcher{
																																													pos:        position{line: 2694, col: 38, offset: 85734},
																																													val:        "[^ |\\r\\n]",
																																													chars:      []rune{' ', '|', '\r', '\n'},
																																													ignoreCase: false,
																																													inverted:   true,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 2679, col: 45, offset: 85312},
																																								val:        "|",
																																								ignoreCase: false,
																																								want:       "\"|\"",
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 2680, col: 9, offset: 85325},
																																					label: "content",
																																					expr: &actionExpr{
																																						pos: position{line: 2680, col: 18, offset: 85334},
																																						run: (*parser).callonDocumentFragment1271,
																																						expr: &seqExpr{
																																							pos: position{line: 2680, col: 18, offset: 85334},
																																							exprs: []any{
																																								&zeroOrMoreExpr{
																																									pos: position{line: 2680, col: 18, offset: 85334},
																																									expr: &choiceExpr{
																																										pos: position{line: 2653, col: 25, offset: 84680},
																																										alternatives: []any{
																																											&litMatcher{
																																												pos:        position{line: 2653, col: 25, offset: 84680},
																																												val:        "\\|",
																																												ignoreCase: false,
																																												want:       "\"\\\\|\"",
																																											},
																																											&charClassMatcher{
																																												pos:        position{line: 2653, col: 33, offset: 84688},
																																												val:        "[^|\\r\\n]",
																																												chars:      []rune{'|', '\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																								&andExpr{
																																									pos: position{line: 2680, col: 39, offset: 85355},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2673, col: 18, offset: 85175},
																																										val:        "[|\\r\\n]",
																																										chars:      []rune{'|', '\r', '\n'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 2682, col: 12, offset: 85422},
																																					label: "eol",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 2682, col: 16, offset: 85426},
																																						expr: &choiceExpr{
																																							pos: position{line: 2682, col: 17, offset: 85427},
																																							alternatives: []any{
																																								&seqExpr{
																																									pos: position{line: 2682, col: 17, offset: 85427},
																																									exprs: []any{
																																										&choiceExpr{
																																											pos: position{line: 2919, col: 8, offset: 92130},
																																											alternatives: []any{
																																												&actionExpr{
																																													pos: position{line: 2906, col: 12, offset: 91903},
																																													run: (*parser).callonDocumentFragment1284,
																																													expr: &choiceExpr{
																																														pos: position{line: 2906, col: 13, offset: 91904},
																																														alternatives: []any{
																																															&litMatcher{
																																																pos:        position{line: 2906, col: 13, offset: 91904},
																																																val:        "\n",
																																																ignoreCase: false,
																																																want:       "\"\\n\"",
																																															},
																																															&litMatcher{
																																																pos:        position{line: 2906, col: 20, offset: 91911},
																																																val:        "\r\n",
																																																ignoreCase: false,
																																																want:       "\"\\r\\n\"",
																																															},
																																															&litMatcher{
																																																pos:        position{line: 2906, col: 29, offset: 91920},
																																																val:        "\r",
																																																ignoreCase: false,
																																																want:       "\"\\r\"",
																																															},
																																														},
																																													},
																																												},
																																												&notExpr{
																																													pos: position{line: 2916, col: 8, offset: 92080},
																																													expr: &anyMatcher{
																																														line: 2916, col: 9, offset: 92081,
																																													},
																																												},
																																											},
																																										},
																																										&oneOrMoreExpr{
																																											pos: position{line: 2682, col: 21, offset: 85431},
																																											expr: &actionExpr{
																																												pos: position{line: 2897, col: 10, offset: 91732},
																																												run: (*parser).callonDocumentFragment1292,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 2897, col: 10, offset: 91732},
																																													val:        "[\\t ]",
																																													chars:      []rune{'\t', ' '},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 2906, col: 12, offset: 91903},
																																									run: (*parser).callonDocumentFragment1294,
																																									expr: &choiceExpr{
																																										pos: position{line: 2906, col: 13, offset: 91904},
																																										alternatives: []any{
																																											&litMatcher{
																																												pos:        position{line: 2906, col: 13, offset: 91904},
																																												val:        "\n",
																																												ignoreCase: false,
																																												want:       "\"\\n\"",
																																											},
																																											&litMatcher{
																																												pos:        position{line: 2906, col: 20, offset: 91911},
																																												val:        "\r\n",
																																												ignoreCase: false,
																																												want:       "\"\\r\\n\"",
																																											},
																																											&litMatcher{
																																												pos:        position{line: 2906, col: 29, offset: 91920},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 2916, col: 8, offset: 92080},
																																									expr: &anyMatcher{
																																										line: 2916, col: 9, offset: 92081,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 680, col: 14, offset: 21521},
																								run: (*parser).callonDocumentFragment1301,
																								expr: &seqExpr{
																									pos: position{line: 680, col: 14, offset: 21521},
																									exprs: []any{
																										&andExpr{
																											pos: position{line: 2914, col: 11, offset: 92066},
																											expr: &anyMatcher{
																												line: 2914, col: 13, offset: 92068,
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 680, col: 21, offset: 21528},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonDocumentFragment1306,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonDocumentFragment1309,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2601, col: 22, offset: 83034},
														alternatives: []any{
															&seqExpr{
																pos: position{line: 2597, col: 19, offset: 82954},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2597, col: 19, offset: 82954},
																		val:        "|===",
																		ignoreCase: false,
																		want:       "\"|===\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2597, col: 26, offset: 82961},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonDocumentFragment1320,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment1323,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2465, col: 22, offset: 79256},
											run: (*parser).callonDocumentFragment1332,
											expr: &seqExpr{
												pos: position{line: 2465, col: 22, offset: 79256},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 2470, col: 31, offset: 79477},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
													&notExpr{
														pos: position{line: 2470, col: 36, offset: 79482},
														expr: &litMatcher{
															pos:        position{line: 2470, col: 37, offset: 79483},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
													},
													&labeledExpr{
														pos:   position{line: 2465, col: 49, offset: 79283},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2843, col: 13, offset: 90258},
															run: (*parser).callonDocumentFragment1338,
															expr: &zeroOrMoreExpr{
																pos: position{line: 2843, col: 13, offset: 90258},
																expr: &charClassMatcher{
																	pos:        position{line: 2843, col: 13, offset: 90258},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2919, col: 8, offset: 92130},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonDocumentFragment1342,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1225, col: 5, offset: 37898},
											run: (*parser).callonDocumentFragment1349,
											expr: &seqExpr{
												pos: position{line: 1225, col: 5, offset: 37898},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 1225, col: 5, offset: 37898},
														run: (*parser).callonDocumentFragment1351,
													},
													&labeledExpr{
														pos:   position{line: 1228, col: 5, offset: 37956},
														label: "frontmatter",
														expr: &actionExpr{
															pos: position{line: 1233, col: 20, offset: 38051},
															run: (*parser).callonDocumentFragment1353,
															expr: &seqExpr{
																pos: position{line: 1233, col: 20, offset: 38051},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1237, col: 30, offset: 38223},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1237, col: 36, offset: 38229},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonDocumentFragment1357,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment1360,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1233, col: 45, offset: 38076},
																		label: "content",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 1233, col: 53, offset: 38084},
																			expr: &actionExpr{
																				pos: position{line: 1239, col: 27, offset: 38267},
																				run: (*parser).callonDocumentFragment1369,
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 1239, col: 27, offset: 38267},
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1239, col: 28, offset: 38268},
																						expr: &seqExpr{
																							pos: position{line: 1239, col: 29, offset: 38269},
																							exprs: []any{
																								&notExpr{
																									pos: position{line: 1239, col: 29, offset: 38269},
																									expr: &seqExpr{
																										pos: position{line: 1237, col: 30, offset: 38223},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 1237, col: 30, offset: 38223},
																												val:        "---",
																												ignoreCase: false,
																												want:       "\"---\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1237, col: 36, offset: 38229},
																												expr: &actionExpr{
																													pos: position{line: 2897, col: 10, offset: 91732},
																													run: (*parser).callonDocumentFragment1377,
																													expr: &charClassMatcher{
																														pos:        position{line: 2897, col: 10, offset: 91732},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2919, col: 8, offset: 92130},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 2906, col: 12, offset: 91903},
																														run: (*parser).callonDocumentFragment1380,
																														expr: &choiceExpr{
																															pos: position{line: 2906, col: 13, offset: 91904},
																															alternatives: []any{
																																&litMatcher{
																																	pos:        position{line: 2906, col: 13, offset: 91904},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 20, offset: 91911},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2906, col: 29, offset: 91920},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2916, col: 8, offset: 92080},
																														expr: &anyMatcher{
																															line: 2916, col: 9, offset: 92081,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&anyMatcher{
																									line: 1239, col: 55, offset: 38295,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1237, col: 30, offset: 38223},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1237, col: 36, offset: 38229},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonDocumentFragment1390,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentFragment1393,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 251, col: 11, offset: 7467},
											name: "Paragraph",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 253, col: 5, offset: 7555},
							run: (*parser).callonDocumentFragment1401,
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlockElements",
			pos:  position{line: 279, col: 1, offset: 8289},
			expr: &actionExpr{
				pos: position{line: 280, col: 5, offset: 8320},
				run: (*parser).callonDelimitedBlockElements1,
				expr: &seqExpr{
					pos: position{line: 280, col: 5, offset: 8320},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 280, col: 5, offset: 8320},
							run: (*parser).callonDelimitedBlockElements3,
						},
						&labeledExpr{
							pos:   position{line: 284, col: 5, offset: 8401},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 284, col: 14, offset: 8410},
								expr: &choiceExpr{
									pos: position{line: 285, col: 9, offset: 8420},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 1201, col: 23, offset: 37004},
											run: (*parser).callonDelimitedBlockElements7,
											expr: &seqExpr{
												pos: position{line: 1201, col: 23, offset: 37004},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 1199, col: 32, offset: 36972},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 1201, col: 51, offset: 37032},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 1201, col: 56, offset: 37037},
															run: (*parser).callonDelimitedBlockElements11,
															expr: &oneOrMoreExpr{
																pos: position{line: 1201, col: 56, offset: 37037},
																expr: &charClassMatcher{
																	pos:        position{line: 1201, col: 56, offset: 37037},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1199, col: 32, offset: 36972},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 286, col: 11, offset: 8482},
											name: "DocumentFragment",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2916, col: 8, offset: 92080},
							expr: &anyMatcher{
								line: 2916, col: 9, offset: 92081,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 305, col: 1, offset: 9185},
			expr: &actionExpr{
				pos: position{line: 306, col: 5, offset: 9214},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 306, col: 5, offset: 9214},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 306, col: 5, offset: 9214},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 306, col: 9, offset: 9218},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 321, col: 18, offset: 9768},
								run: (*parser).callonAttributeDeclaration5,
								expr: &seqExpr{
									pos: position{line: 321, col: 18, offset: 9768},
									exprs: []any{
										&charClassMatcher{
											pos:        position{line: 321, col: 18, offset: 9768},
											val:        "[_\\pL\\pN]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 321, col: 28, offset: 9778},
											expr: &charClassMatcher{
												pos:        position{line: 321, col: 29, offset: 9779},
												val:        "[-\\pL\\pN]",
												chars:      []rune{'-'},
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 306, col: 30, offset: 9239},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 307, col: 5, offset: 9248},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 11, offset: 9254},
								expr: &actionExpr{
									pos: position{line: 308, col: 9, offset: 9264},
									run: (*parser).callonAttributeDeclaration13,
									expr: &seqExpr{
										pos: position{line: 308, col: 9, offset: 9264},
										exprs: []any{
											&actionExpr{
												pos: position{line: 2901, col: 11, offset: 91793},
												run: (*parser).callonAttributeDeclaration15,
												expr: &oneOrMoreExpr{
													pos: position{line: 2901, col: 11, offset: 91793},
													expr: &charClassMatcher{
														pos:        position{line: 2901, col: 11, offset: 91793},
														val:        "[\\t ]",
														chars:      []rune{'\t', ' '},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 309, col: 9, offset: 9356},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 309, col: 16, offset: 9363},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2919, col: 8, offset: 92130},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 2906, col: 12, offset: 91903},
									run: (*parser).callonAttributeDeclaration21,
									expr: &choiceExpr{
										pos: position{line: 2906, col: 13, offset: 91904},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2906, col: 13, offset: 91904},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 20, offset: 91911},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 29, offset: 91920},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2916, col: 8, offset: 92080},
									expr: &anyMatcher{
										line: 2916, col: 9, offset: 92081,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 325, col: 1, offset: 9835},
			expr: &actionExpr{
				pos: position{line: 326, col: 5, offset: 9869},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 326, col: 5, offset: 9869},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 326, col: 5, offset: 9869},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 15, offset: 9879},
								name: "AttributeDeclarationValueElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 5, offset: 9919},
							label: "otherElements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 327, col: 19, offset: 9933},
								expr: &actionExpr{
									pos: position{line: 328, col: 9, offset: 9943},
									run: (*parser).callonAttributeDeclarationValue7,
									expr: &seqExpr{
										pos: position{line: 328, col: 9, offset: 9943},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 328, col: 9, offset: 9943},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&actionExpr{
												pos: position{line: 2906, col: 12, offset: 91903},
												run: (*parser).callonAttributeDeclarationValue10,
												expr: &choiceExpr{
													pos: position{line: 2906, col: 13, offset: 91904},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2906, col: 13, offset: 91904},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2906, col: 20, offset: 91911},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2906, col: 29, offset: 91920},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 329, col: 9, offset: 9965},
												expr: &actionExpr{
													pos: position{line: 2897, col: 10, offset: 91732},
													run: (*parser).callonAttributeDeclarationValue16,
													expr: &charClassMatcher{
														pos:        position{line: 2897, col: 10, offset: 91732},
														val:        "[\\t ]",
														chars:      []rune{'\t', ' '},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 330, col: 9, offset: 9980},
												label: "elements",
												expr: &ruleRefExpr{
													pos:  position{line: 330, col: 19, offset: 9990},
													name: "AttributeDeclarationValueElements",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElements",
			pos:  position{line: 341, col: 1, offset: 10320},
			expr: &actionExpr{
				pos: position{line: 342, col: 5, offset: 10362},
				run: (*parser).callonAttributeDeclarationValueElements1,
				expr: &labeledExpr{
					pos:   position{line: 342, col: 5, offset: 10362},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 342, col: 14, offset: 10371},
						expr: &ruleRefExpr{
							pos:  position{line: 342, col: 15, offset: 10372},
							name: "AttributeDeclarationValueElement",
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 346, col: 1, offset: 10461},
			expr: &actionExpr{
				pos: position{line: 347, col: 5, offset: 10502},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 347, col: 5, offset: 10502},
					exprs: []any{
						&notExpr{
							pos: position{line: 347, col: 5, offset: 10502},
							expr: &seqExpr{
								pos: position{line: 347, col: 7, offset: 10504},
								exprs: []any{
									&zeroOrOneExpr{
										pos: position{line: 347, col: 7, offset: 10504},
										expr: &litMatcher{
											pos:        position{line: 347, col: 7, offset: 10504},
											val:        "\\",
											ignoreCase: false,
											want:       "\"\\\\\"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 347, col: 13, offset: 10510},
										expr: &actionExpr{
											pos: position{line: 2897, col: 10, offset: 91732},
											run: (*parser).callonAttributeDeclarationValueElement8,
											expr: &charClassMatcher{
												pos:        position{line: 2897, col: 10, offset: 91732},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&choiceExpr{
										pos: position{line: 2919, col: 8, offset: 92130},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 2906, col: 12, offset: 91903},
												run: (*parser).callonAttributeDeclarationValueElement11,
												expr: &choiceExpr{
													pos: position{line: 2906, col: 13, offset: 91904},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2906, col: 13, offset: 91904},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2906, col: 20, offset: 91911},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2906, col: 29, offset: 91920},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2916, col: 8, offset: 92080},
												expr: &anyMatcher{
													line: 2916, col: 9, offset: 92081,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 348, col: 5, offset: 10526},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 349, col: 9, offset: 10544},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 349, col: 9, offset: 10544},
										name: "InlinePassthrough",
									},
									&actionExpr{
										pos: position{line: 350, col: 12, offset: 10573},
										run: (*parser).callonAttributeDeclarationValueElement21,
										expr: &oneOrMoreExpr{
											pos: position{line: 350, col: 12, offset: 10573},
											expr: &charClassMatcher{
												pos:        position{line: 350, col: 12, offset: 10573},
												val:        "[^\\r\\n<>&{ ]",
												chars:      []rune{'\r', '\n', '<', '>', '&', '{', ' '},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2452, col: 5, offset: 78802},
										run: (*parser).callonAttributeDeclarationValueElement24,
										expr: &seqExpr{
											pos: position{line: 2452, col: 5, offset: 78802},
											exprs: []any{
												&andCodeExpr{
													pos: position{line: 2452, col: 5, offset: 78802},
													run: (*parser).callonAttributeDeclarationValueElement26,
												},
												&labeledExpr{
													pos:   position{line: 2455, col: 5, offset: 78878},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 2456, col: 9, offset: 78896},
														run: (*parser).callonAttributeDeclarationValueElement28,
														expr: &charClassMatcher{
															pos:        position{line: 2456, col: 10, offset: 78897},
															val:        "[<>&]",
															chars:      []rune{'<', '>', '&'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2897, col: 10, offset: 91732},
										run: (*parser).callonAttributeDeclarationValueElement30,
										expr: &charClassMatcher{
											pos:        position{line: 2897, col: 10, offset: 91732},
											val:        "[\\t ]",
											chars:      []rune{'\t', ' '},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 639, col: 5, offset: 20141},
										run: (*parser).callonAttributeDeclarationValueElement32,
										expr: &seqExpr{
											pos: position{line: 639, col: 5, offset: 20141},
											exprs: []any{
												&andCodeExpr{
													pos: position{line: 639, col: 5, offset: 20141},
													run: (*parser).callonAttributeDeclarationValueElement34,
												},
												&labeledExpr{
													pos:   position{line: 642, col: 5, offset: 20213},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 642, col: 14, offset: 20222},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 648, col: 5, offset: 20351},
																run: (*parser).callonAttributeDeclarationValueElement37,
																expr: &seqExpr{
																	pos: position{line: 648, col: 5, offset: 20351},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 648, col: 5, offset: 20351},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 648, col: 13, offset: 20359},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				run: (*parser).callonAttributeDeclarationValueElement41,
																				expr: &seqExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 321, col: 18, offset: 9768},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 321, col: 28, offset: 9778},
																							expr: &charClassMatcher{
																								pos:        position{line: 321, col: 29, offset: 9779},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 648, col: 32, offset: 20378},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 655, col: 5, offset: 20619},
																run: (*parser).callonAttributeDeclarationValueElement47,
																expr: &seqExpr{
																	pos: position{line: 655, col: 5, offset: 20619},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 655, col: 5, offset: 20619},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 655, col: 9, offset: 20623},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				run: (*parser).callonAttributeDeclarationValueElement51,
																				expr: &seqExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 321, col: 18, offset: 9768},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 321, col: 28, offset: 9778},
																							expr: &charClassMatcher{
																								pos:        position{line: 321, col: 29, offset: 9779},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 655, col: 28, offset: 20642},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20823},
																run: (*parser).callonAttributeDeclarationValueElement57,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20823},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20823},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 37, offset: 20835},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				run: (*parser).callonAttributeDeclarationValueElement61,
																				expr: &seqExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 321, col: 18, offset: 9768},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 321, col: 28, offset: 9778},
																							expr: &charClassMatcher{
																								pos:        position{line: 321, col: 29, offset: 9779},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 56, offset: 20854},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 62, offset: 20860},
																				expr: &actionExpr{
																					pos: position{line: 669, col: 17, offset: 21155},
																					run: (*parser).callonAttributeDeclarationValueElement68,
																					expr: &seqExpr{
																						pos: position{line: 669, col: 17, offset: 21155},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 669, col: 17, offset: 21155},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 669, col: 21, offset: 21159},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 669, col: 28, offset: 21166},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 669, col: 28, offset: 21166},
																											run: (*parser).callonAttributeDeclarationValueElement73,
																											expr: &charClassMatcher{
																												pos:        position{line: 669, col: 28, offset: 21166},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 671, col: 9, offset: 21220},
																											run: (*parser).callonAttributeDeclarationValueElement75,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 671, col: 9, offset: 21220},
																												expr: &charClassMatcher{
																													pos:        position{line: 671, col: 9, offset: 21220},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 78, offset: 20876},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 665, col: 25, offset: 20994},
																run: (*parser).callonAttributeDeclarationValueElement79,
																expr: &seqExpr{
																	pos: position{line: 665, col: 25, offset: 20994},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 665, col: 25, offset: 20994},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 665, col: 38, offset: 21007},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				run: (*parser).callonAttributeDeclarationValueElement83,
																				expr: &seqExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 321, col: 18, offset: 9768},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 321, col: 28, offset: 9778},
																							expr: &charClassMatcher{
																								pos:        position{line: 321, col: 29, offset: 9779},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 665, col: 57, offset: 21026},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 665, col: 63, offset: 21032},
																				expr: &actionExpr{
																					pos: position{line: 669, col: 17, offset: 21155},
																					run: (*parser).callonAttributeDeclarationValueElement90,
																					expr: &seqExpr{
																						pos: position{line: 669, col: 17, offset: 21155},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 669, col: 17, offset: 21155},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 669, col: 21, offset: 21159},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 669, col: 28, offset: 21166},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 669, col: 28, offset: 21166},
																											run: (*parser).callonAttributeDeclarationValueElement95,
																											expr: &charClassMatcher{
																												pos:        position{line: 669, col: 28, offset: 21166},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 671, col: 9, offset: 21220},
																											run: (*parser).callonAttributeDeclarationValueElement97,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 671, col: 9, offset: 21220},
																												expr: &charClassMatcher{
																													pos:        position{line: 671, col: 9, offset: 21220},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 665, col: 79, offset: 21048},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 372, col: 1, offset: 11392},
			expr: &actionExpr{
				pos: position{line: 373, col: 5, offset: 11415},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 373, col: 5, offset: 11415},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 373, col: 16, offset: 11426},
						expr: &choiceExpr{
							pos: position{line: 375, col: 9, offset: 11493},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 375, col: 10, offset: 11494},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 375, col: 10, offset: 11494},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 375, col: 10, offset: 11494},
												label: "anchor",
												expr: &actionExpr{
													pos: position{line: 407, col: 5, offset: 12369},
													run: (*parser).callonBlockAttributes8,
													expr: &seqExpr{
														pos: position{line: 407, col: 5, offset: 12369},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 407, col: 5, offset: 12369},
																val:        "[[",
																ignoreCase: false,
																want:       "\"[[\"",
															},
															&labeledExpr{
																pos:   position{line: 408, col: 5, offset: 12379},
																label: "id",
																expr: &actionExpr{
																	pos: position{line: 409, col: 9, offset: 12392},
																	run: (*parser).callonBlockAttributes12,
																	expr: &labeledExpr{
																		pos:   position{line: 409, col: 9, offset: 12392},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 409, col: 18, offset: 12401},
																			expr: &choiceExpr{
																				pos: position{line: 410, col: 13, offset: 12415},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 410, col: 14, offset: 12416},
																						run: (*parser).callonBlockAttributes16,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 410, col: 14, offset: 12416},
																							expr: &charClassMatcher{
																								pos:        position{line: 410, col: 14, offset: 12416},
																								val:        "[^=\\r\\n�{]]",
																								chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1201, col: 23, offset: 37004},
																						run: (*parser).callonBlockAttributes19,
																						expr: &seqExpr{
																							pos: position{line: 1201, col: 23, offset: 37004},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 1199, col: 32, offset: 36972},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 1201, col: 51, offset: 37032},
																									label: "ref",
																									expr: &actionExpr{
																										pos: position{line: 1201, col: 56, offset: 37037},
																										run: (*parser).callonBlockAttributes23,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1201, col: 56, offset: 37037},
																											expr: &charClassMatcher{
																												pos:        position{line: 1201, col: 56, offset: 37037},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1199, col: 32, offset: 36972},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 639, col: 5, offset: 20141},
																						run: (*parser).callonBlockAttributes27,
																						expr: &seqExpr{
																							pos: position{line: 639, col: 5, offset: 20141},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 639, col: 5, offset: 20141},
																									run: (*parser).callonBlockAttributes29,
																								},
																								&labeledExpr{
																									pos:   position{line: 642, col: 5, offset: 20213},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 642, col: 14, offset: 20222},
																										alternatives: []any{
																											&actionExpr{
																												pos: position{line: 648, col: 5, offset: 20351},
																												run: (*parser).callonBlockAttributes32,
																												expr: &seqExpr{
																													pos: position{line: 648, col: 5, offset: 20351},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 648, col: 5, offset: 20351},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 648, col: 13, offset: 20359},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 321, col: 18, offset: 9768},
																																run: (*parser).callonBlockAttributes36,
																																expr: &seqExpr{
																																	pos: position{line: 321, col: 18, offset: 9768},
																																	exprs: []any{
																																		&charClassMatcher{
																																			pos:        position{line: 321, col: 18, offset: 9768},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 321, col: 28, offset: 9778},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 321, col: 29, offset: 9779},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 648, col: 32, offset: 20378},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 655, col: 5, offset: 20619},
																												run: (*parser).callonBlockAttributes42,
																												expr: &seqExpr{
																													pos: position{line: 655, col: 5, offset: 20619},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 655, col: 5, offset: 20619},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 655, col: 9, offset: 20623},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 321, col: 18, offset: 9768},
																																run: (*parser).callonBlockAttributes46,
																																expr: &seqExpr{
																																	pos: position{line: 321, col: 18, offset: 9768},
																																	exprs: []any{
																																		&charClassMatcher{
																																			pos:        position{line: 321, col: 18, offset: 9768},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 321, col: 28, offset: 9778},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 321, col: 29, offset: 9779},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 655, col: 28, offset: 20642},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 661, col: 25, offset: 20823},
																												run: (*parser).callonBlockAttributes52,
																												expr: &seqExpr{
																													pos: position{line: 661, col: 25, offset: 20823},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 661, col: 25, offset: 20823},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 37, offset: 20835},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 321, col: 18, offset: 9768},
																																run: (*parser).callonBlockAttributes56,
																																expr: &seqExpr{
																																	pos: position{line: 321, col: 18, offset: 9768},
																																	exprs: []any{
																																		&charClassMatcher{
																																			pos:        position{line: 321, col: 18, offset: 9768},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 321, col: 28, offset: 9778},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 321, col: 29, offset: 9779},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 661, col: 56, offset: 20854},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 661, col: 62, offset: 20860},
																																expr: &actionExpr{
																																	pos: position{line: 669, col: 17, offset: 21155},
																																	run: (*parser).callonBlockAttributes63,
																																	expr: &seqExpr{
																																		pos: position{line: 669, col: 17, offset: 21155},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 669, col: 17, offset: 21155},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 669, col: 21, offset: 21159},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 669, col: 28, offset: 21166},
																																					alternatives: []any{
																																						&actionExpr{
																																							pos: position{line: 669, col: 28, offset: 21166},
																																							run: (*parser).callonBlockAttributes68,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 669, col: 28, offset: 21166},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 671, col: 9, offset: 21220},
																																							run: (*parser).callonBlockAttributes70,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 671, col: 9, offset: 21220},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 671, col: 9, offset: 21220},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 661, col: 78, offset: 20876},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 665, col: 25, offset: 20994},
																												run: (*parser).callonBlockAttributes74,
																												expr: &seqExpr{
																													pos: position{line: 665, col: 25, offset: 20994},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 665, col: 25, offset: 20994},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 665, col: 38, offset: 21007},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 321, col: 18, offset: 9768},
																																run: (*parser).callonBlockAttributes78,
																																expr: &seqExpr{
																																	pos: position{line: 321, col: 18, offset: 9768},
																																	exprs: []any{
																																		&charClassMatcher{
																																			pos:        position{line: 321, col: 18, offset: 9768},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 321, col: 28, offset: 9778},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 321, col: 29, offset: 9779},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 665, col: 57, offset: 21026},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 665, col: 63, offset: 21032},
																																expr: &actionExpr{
																																	pos: position{line: 669, col: 17, offset: 21155},
																																	run: (*parser).callonBlockAttributes85,
																																	expr: &seqExpr{
																																		pos: position{line: 669, col: 17, offset: 21155},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 669, col: 17, offset: 21155},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 669, col: 21, offset: 21159},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 669, col: 28, offset: 21166},
																																					alternatives: []any{
																																						&actionExpr{
																																							pos: position{line: 669, col: 28, offset: 21166},
																																							run: (*parser).callonBlockAttributes90,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 669, col: 28, offset: 21166},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 671, col: 9, offset: 21220},
																																							run: (*parser).callonBlockAttributes92,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 671, col: 9, offset: 21220},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 671, col: 9, offset: 21220},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 665, col: 79, offset: 21048},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 415, col: 16, offset: 12649},
																						run: (*parser).callonBlockAttributes96,
																						expr: &litMatcher{
																							pos:        position{line: 415, col: 16, offset: 12649},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 421, col: 5, offset: 12835},
																val:        "]]",
																ignoreCase: false,
																want:       "\"]]\"",
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 375, col: 35, offset: 11519},
												expr: &actionExpr{
													pos: position{line: 2897, col: 10, offset: 91732},
													run: (*parser).callonBlockAttributes100,
													expr: &charClassMatcher{
														pos:        position{line: 2897, col: 10, offset: 91732},
														val:        "[\\t ]",
														chars:      []rune{'\t', ' '},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2919, col: 8, offset: 92130},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 2906, col: 12, offset: 91903},
														run: (*parser).callonBlockAttributes103,
														expr: &choiceExpr{
															pos: position{line: 2906, col: 13, offset: 91904},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2906, col: 13, offset: 91904},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2906, col: 20, offset: 91911},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2906, col: 29, offset: 91920},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2916, col: 8, offset: 92080},
														expr: &anyMatcher{
															line: 2916, col: 9, offset: 92081,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 375, col: 46, offset: 11530},
												expr: &actionExpr{
													pos: position{line: 680, col: 14, offset: 21521},
													run: (*parser).callonBlockAttributes111,
													expr: &seqExpr{
														pos: position{line: 680, col: 14, offset: 21521},
														exprs: []any{
															&andExpr{
																pos: position{line: 2914, col: 11, offset: 92066},
																expr: &anyMatcher{
																	line: 2914, col: 13, offset: 92068,
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 680, col: 21, offset: 21528},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonBlockAttributes116,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2919, col: 8, offset: 92130},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 2906, col: 12, offset: 91903},
																		run: (*parser).callonBlockAttributes119,
																		expr: &choiceExpr{
																			pos: position{line: 2906, col: 13, offset: 91904},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2906, col: 13, offset: 91904},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 20, offset: 91911},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 29, offset: 91920},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 379, col: 12, offset: 11651},
									run: (*parser).callonBlockAttributes126,
									expr: &seqExpr{
										pos: position{line: 379, col: 12, offset: 11651},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 379, col: 12, offset: 11651},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 426, col: 19, offset: 12954},
													run: (*parser).callonBlockAttributes129,
													expr: &seqExpr{
														pos: position{line: 426, col: 19, offset: 12954},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 426, col: 19, offset: 12954},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&notExpr{
																pos: position{line: 427, col: 5, offset: 12963},
																expr: &charClassMatcher{
																	pos:        position{line: 427, col: 6, offset: 12964},
																	val:        "[. ]",
																	chars:      []rune{'.', ' '},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 428, col: 5, offset: 13076},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 428, col: 14, offset: 13085},
																	expr: &choiceExpr{
																		pos: position{line: 429, col: 9, offset: 13095},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2791, col: 14, offset: 88901},
																				run: (*parser).callonBlockAttributes137,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2791, col: 14, offset: 88901},
																					expr: &charClassMatcher{
																						pos:        position{line: 2791, col: 14, offset: 88901},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonBlockAttributes140,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2814, col: 5, offset: 89386},
																				run: (*parser).callonBlockAttributes142,
																				expr: &choiceExpr{
																					pos: position{line: 2815, col: 9, offset: 89396},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2815, col: 10, offset: 89397},
																							val:        "[.,;?)!/:\"\\@=-]",
																							chars:      []rune{'.', ',', ';', '?', ')', '!', '/', ':', '"', '\'', '@', '=', '-'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2817, col: 13, offset: 89494},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2817, col: 13, offset: 89494},
																									run: (*parser).callonBlockAttributes146,
																								},
																								&litMatcher{
																									pos:        position{line: 2820, col: 13, offset: 89594},
																									val:        "[",
																									ignoreCase: false,
																									want:       "\"[\"",
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 2820, col: 19, offset: 89600},
																							val:        "]",
																							ignoreCase: false,
																							want:       "\"]\"",
																						},
																						&seqExpr{
																							pos: position{line: 2823, col: 13, offset: 89638},
																							exprs: []any{
																								&andCodeExpr{
																									pos: position{line: 2823, col: 13, offset: 89638},
																									run: (*parser).callonBlockAttributes150,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2826, col: 14, offset: 89731},
																									val:        "[*_`#]",
																									chars:      []rune{'*', '_', '`', '#'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2828, col: 12, offset: 89775},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2828, col: 12, offset: 89775},
																									val:        "(",
																									ignoreCase: false,
																									want:       "\"(\"",
																								},
																								&notExpr{
																									pos: position{line: 2828, col: 16, offset: 89779},
																									expr: &litMatcher{
																										pos:        position{line: 2828, col: 17, offset: 89780},
																										val:        "(",
																										ignoreCase: false,
																										want:       "\"(\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 648, col: 5, offset: 20351},
																				run: (*parser).callonBlockAttributes156,
																				expr: &seqExpr{
																					pos: position{line: 648, col: 5, offset: 20351},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 648, col: 5, offset: 20351},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 648, col: 13, offset: 20359},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 321, col: 18, offset: 9768},
																								run: (*parser).callonBlockAttributes160,
																								expr: &seqExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									exprs: []any{
																										&charClassMatcher{
																											pos:        position{line: 321, col: 18, offset: 9768},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 321, col: 28, offset: 9778},
																											expr: &charClassMatcher{
																												pos:        position{line: 321, col: 29, offset: 9779},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 648, col: 32, offset: 20378},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 655, col: 5, offset: 20619},
																				run: (*parser).callonBlockAttributes166,
																				expr: &seqExpr{
																					pos: position{line: 655, col: 5, offset: 20619},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 655, col: 5, offset: 20619},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 655, col: 9, offset: 20623},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 321, col: 18, offset: 9768},
																								run: (*parser).callonBlockAttributes170,
																								expr: &seqExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									exprs: []any{
																										&charClassMatcher{
																											pos:        position{line: 321, col: 18, offset: 9768},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 321, col: 28, offset: 9778},
																											expr: &charClassMatcher{
																												pos:        position{line: 321, col: 29, offset: 9779},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 655, col: 28, offset: 20642},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2836, col: 12, offset: 90040},
																				run: (*parser).callonBlockAttributes176,
																				expr: &charClassMatcher{
																					pos:        position{line: 2836, col: 12, offset: 90040},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 379, col: 35, offset: 11674},
												expr: &actionExpr{
													pos: position{line: 2897, col: 10, offset: 91732},
													run: (*parser).callonBlockAttributes179,
													expr: &charClassMatcher{
														pos:        position{line: 2897, col: 10, offset: 91732},
														val:        "[\\t ]",
														chars:      []rune{'\t', ' '},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2919, col: 8, offset: 92130},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 2906, col: 12, offset: 91903},
														run: (*parser).callonBlockAttributes182,
														expr: &choiceExpr{
															pos: position{line: 2906, col: 13, offset: 91904},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2906, col: 13, offset: 91904},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2906, col: 20, offset: 91911},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2906, col: 29, offset: 91920},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2916, col: 8, offset: 92080},
														expr: &anyMatcher{
															line: 2916, col: 9, offset: 92081,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 379, col: 46, offset: 11685},
												expr: &actionExpr{
													pos: position{line: 680, col: 14, offset: 21521},
													run: (*parser).callonBlockAttributes190,
													expr: &seqExpr{
														pos: position{line: 680, col: 14, offset: 21521},
														exprs: []any{
															&andExpr{
																pos: position{line: 2914, col: 11, offset: 92066},
																expr: &anyMatcher{
																	line: 2914, col: 13, offset: 92068,
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 680, col: 21, offset: 21528},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonBlockAttributes195,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2919, col: 8, offset: 92130},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 2906, col: 12, offset: 91903},
																		run: (*parser).callonBlockAttributes198,
																		expr: &choiceExpr{
																			pos: position{line: 2906, col: 13, offset: 91904},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2906, col: 13, offset: 91904},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 20, offset: 91911},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 29, offset: 91920},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 383, col: 12, offset: 11775},
									run: (*parser).callonBlockAttributes205,
									expr: &seqExpr{
										pos: position{line: 383, col: 12, offset: 11775},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 383, col: 12, offset: 11775},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 383, col: 24, offset: 11787},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 383, col: 44, offset: 11807},
												expr: &actionExpr{
													pos: position{line: 2897, col: 10, offset: 91732},
													run: (*parser).callonBlockAttributes210,
													expr: &charClassMatcher{
														pos:        position{line: 2897, col: 10, offset: 91732},
														val:        "[\\t ]",
														chars:      []rune{'\t', ' '},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2919, col: 8, offset: 92130},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 2906, col: 12, offset: 91903},
														run: (*parser).callonBlockAttributes213,
														expr: &choiceExpr{
															pos: position{line: 2906, col: 13, offset: 91904},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2906, col: 13, offset: 91904},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2906, col: 20, offset: 91911},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2906, col: 29, offset: 91920},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2916, col: 8, offset: 92080},
														expr: &anyMatcher{
															line: 2916, col: 9, offset: 92081,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 383, col: 55, offset: 11818},
												expr: &actionExpr{
													pos: position{line: 680, col: 14, offset: 21521},
													run: (*parser).callonBlockAttributes221,
													expr: &seqExpr{
														pos: position{line: 680, col: 14, offset: 21521},
														exprs: []any{
															&andExpr{
																pos: position{line: 2914, col: 11, offset: 92066},
																expr: &anyMatcher{
																	line: 2914, col: 13, offset: 92068,
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 680, col: 21, offset: 21528},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonBlockAttributes226,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2919, col: 8, offset: 92130},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 2906, col: 12, offset: 91903},
																		run: (*parser).callonBlockAttributes229,
																		expr: &choiceExpr{
																			pos: position{line: 2906, col: 13, offset: 91904},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2906, col: 13, offset: 91904},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 20, offset: 91911},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 29, offset: 91920},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 391, col: 1, offset: 12002},
			expr: &actionExpr{
				pos: position{line: 392, col: 5, offset: 12026},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 392, col: 5, offset: 12026},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 392, col: 5, offset: 12026},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 393, col: 5, offset: 12034},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 393, col: 16, offset: 12045},
								expr: &actionExpr{
									pos: position{line: 394, col: 9, offset: 12055},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 395, col: 13, offset: 12069},
										exprs: []any{
											&notExpr{
												pos: position{line: 395, col: 13, offset: 12069},
												expr: &litMatcher{
													pos:        position{line: 395, col: 14, offset: 12070},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 396, col: 13, offset: 12102},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 396, col: 24, offset: 12113},
													alternatives: []any{
														&ruleRefExpr{
															pos:  position{line: 396, col: 24, offset: 12113},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 396, col: 46, offset: 12135},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 401, col: 5, offset: 12218},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 440, col: 1, offset: 13476},
			expr: &actionExpr{
				pos: position{line: 441, col: 5, offset: 13502},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 441, col: 5, offset: 13502},
					exprs: []any{
						&notExpr{
							pos: position{line: 441, col: 5, offset: 13502},
							expr: &litMatcher{
								pos:        position{line: 441, col: 6, offset: 13503},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 10, offset: 13507},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 441, col: 14, offset: 13511},
							expr: &litMatcher{
								pos:        position{line: 441, col: 15, offset: 13512},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 442, col: 5, offset: 13625},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 442, col: 31, offset: 13651},
								expr: &ruleRefExpr{
									pos:  position{line: 442, col: 32, offset: 13652},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 5, offset: 13684},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 443, col: 21, offset: 13700},
								expr: &choiceExpr{
									pos: position{line: 443, col: 22, offset: 13701},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 443, col: 22, offset: 13701},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 443, col: 44, offset: 13723},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 444, col: 5, offset: 13744},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 457, col: 1, offset: 14272},
			expr: &actionExpr{
				pos: position{line: 458, col: 5, offset: 14306},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 458, col: 5, offset: 14306},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 458, col: 5, offset: 14306},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 458, col: 10, offset: 14311},
								expr: &ruleRefExpr{
									pos:  position{line: 459, col: 9, offset: 14321},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 461, col: 5, offset: 14351},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 461, col: 12, offset: 14358},
								expr: &actionExpr{
									pos: position{line: 462, col: 9, offset: 14369},
									run: (*parser).callonFirstPositionalAttributes8,
									expr: &seqExpr{
										pos: position{line: 462, col: 9, offset: 14369},
										exprs: []any{
											&notExpr{
												pos: position{line: 462, col: 9, offset: 14369},
												expr: &litMatcher{
													pos:        position{line: 462, col: 10, offset: 14370},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
											},
											&notExpr{
												pos: position{line: 462, col: 14, offset: 14374},
												expr: &litMatcher{
													pos:        position{line: 462, col: 15, offset: 14375},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 463, col: 9, offset: 14387},
												label: "extra",
												expr: &choiceExpr{
													pos: position{line: 464, col: 13, offset: 14407},
													alternatives: []any{
														&ruleRefExpr{
															pos:  position{line: 464, col: 13, offset: 14407},
															name: "ShortHandIDAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 465, col: 15, offset: 14443},
															name: "ShortHandOptionAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 466, col: 15, offset: 14482},
															name: "ShortHandDotRoleAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 469, col: 8, offset: 14558},
							expr: &seqExpr{
								pos: position{line: 469, col: 9, offset: 14559},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 469, col: 9, offset: 14559},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 469, col: 13, offset: 14563},
										expr: &actionExpr{
											pos: position{line: 2897, col: 10, offset: 91732},
											run: (*parser).callonFirstPositionalAttributes23,
											expr: &charClassMatcher{
												pos:        position{line: 2897, col: 10, offset: 91732},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 470, col: 5, offset: 14577},
							run: (*parser).callonFirstPositionalAttributes25,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 486, col: 1, offset: 14993},
			expr: &actionExpr{
				pos: position{line: 486, col: 25, offset: 15017},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 486, col: 25, offset: 15017},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 486, col: 25, offset: 15017},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 486, col: 29, offset: 15021},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 33, offset: 15025},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 490, col: 1, offset: 15099},
			expr: &actionExpr{
				pos: position{line: 490, col: 23, offset: 15121},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 490, col: 23, offset: 15121},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 490, col: 30, offset: 15128},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 495, col: 1, offset: 15254},
			expr: &actionExpr{
				pos: position{line: 495, col: 30, offset: 15283},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 495, col: 30, offset: 15283},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 495, col: 30, offset: 15283},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 495, col: 34, offset: 15287},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 495, col: 40, offset: 15293},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 500, col: 1, offset: 15415},
			expr: &actionExpr{
				pos: position{line: 500, col: 29, offset: 15443},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 500, col: 29, offset: 15443},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 500, col: 29, offset: 15443},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 500, col: 33, offset: 15447},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 41, offset: 15455},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 505, col: 1, offset: 15568},
			expr: &choiceExpr{
				pos: position{line: 506, col: 5, offset: 15600},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 506, col: 5, offset: 15600},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 507, col: 7, offset: 15634},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 508, col: 7, offset: 15668},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 508, col: 7, offset: 15668},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 508, col: 7, offset: 15668},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 508, col: 16, offset: 15677},
										expr: &choiceExpr{
											pos: position{line: 511, col: 9, offset: 15859},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 511, col: 9, offset: 15859},
													name: "QuotationMark",
												},
												&actionExpr{
													pos: position{line: 512, col: 12, offset: 15885},
													run: (*parser).callonShortHandAttributeValue10,
													expr: &oneOrMoreExpr{
														pos: position{line: 512, col: 12, offset: 15885},
														expr: &charClassMatcher{
															pos:        position{line: 512, col: 12, offset: 15885},
															val:        "[^,=.%# \\r\\n�{]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&actionExpr{
													pos: position{line: 639, col: 5, offset: 20141},
													run: (*parser).callonShortHandAttributeValue13,
													expr: &seqExpr{
														pos: position{line: 639, col: 5, offset: 20141},
														exprs: []any{
															&andCodeExpr{
																pos: position{line: 639, col: 5, offset: 20141},
																run: (*parser).callonShortHandAttributeValue15,
															},
															&labeledExpr{
																pos:   position{line: 642, col: 5, offset: 20213},
																label: "element",
																expr: &choiceExpr{
																	pos: position{line: 642, col: 14, offset: 20222},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 648, col: 5, offset: 20351},
																			run: (*parser).callonShortHandAttributeValue18,
																			expr: &seqExpr{
																				pos: position{line: 648, col: 5, offset: 20351},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 648, col: 5, offset: 20351},
																						val:        "\\{",
																						ignoreCase: false,
																						want:       "\"\\\\{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 648, col: 13, offset: 20359},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 321, col: 18, offset: 9768},
																							run: (*parser).callonShortHandAttributeValue22,
																							expr: &seqExpr{
																								pos: position{line: 321, col: 18, offset: 9768},
																								exprs: []any{
																									&charClassMatcher{
																										pos:        position{line: 321, col: 18, offset: 9768},
																										val:        "[_\\pL\\pN]",
																										chars:      []rune{'_'},
																										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 321, col: 28, offset: 9778},
																										expr: &charClassMatcher{
																											pos:        position{line: 321, col: 29, offset: 9779},
																											val:        "[-\\pL\\pN]",
																											chars:      []rune{'-'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 648, col: 32, offset: 20378},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 655, col: 5, offset: 20619},
																			run: (*parser).callonShortHandAttributeValue28,
																			expr: &seqExpr{
																				pos: position{line: 655, col: 5, offset: 20619},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 655, col: 5, offset: 20619},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 655, col: 9, offset: 20623},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 321, col: 18, offset: 9768},
																							run: (*parser).callonShortHandAttributeValue32,
																							expr: &seqExpr{
																								pos: position{line: 321, col: 18, offset: 9768},
																								exprs: []any{
																									&charClassMatcher{
																										pos:        position{line: 321, col: 18, offset: 9768},
																										val:        "[_\\pL\\pN]",
																										chars:      []rune{'_'},
																										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 321, col: 28, offset: 9778},
																										expr: &charClassMatcher{
																											pos:        position{line: 321, col: 29, offset: 9779},
																											val:        "[-\\pL\\pN]",
																											chars:      []rune{'-'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 655, col: 28, offset: 20642},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 661, col: 25, offset: 20823},
																			run: (*parser).callonShortHandAttributeValue38,
																			expr: &seqExpr{
																				pos: position{line: 661, col: 25, offset: 20823},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 661, col: 25, offset: 20823},
																						val:        "{counter:",
																						ignoreCase: false,
																						want:       "\"{counter:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 661, col: 37, offset: 20835},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 321, col: 18, offset: 9768},
																							run: (*parser).callonShortHandAttributeValue42,
																							expr: &seqExpr{
																								pos: position{line: 321, col: 18, offset: 9768},
																								exprs: []any{
																									&charClassMatcher{
																										pos:        position{line: 321, col: 18, offset: 9768},
																										val:        "[_\\pL\\pN]",
																										chars:      []rune{'_'},
																										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 321, col: 28, offset: 9778},
																										expr: &charClassMatcher{
																											pos:        position{line: 321, col: 29, offset: 9779},
																											val:        "[-\\pL\\pN]",
																											chars:      []rune{'-'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 661, col: 56, offset: 20854},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 661, col: 62, offset: 20860},
																							expr: &actionExpr{
																								pos: position{line: 669, col: 17, offset: 21155},
																								run: (*parser).callonShortHandAttributeValue49,
																								expr: &seqExpr{
																									pos: position{line: 669, col: 17, offset: 21155},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 669, col: 17, offset: 21155},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 669, col: 21, offset: 21159},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 669, col: 28, offset: 21166},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 669, col: 28, offset: 21166},
																														run: (*parser).callonShortHandAttributeValue54,
																														expr: &charClassMatcher{
																															pos:        position{line: 669, col: 28, offset: 21166},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 671, col: 9, offset: 21220},
																														run: (*parser).callonShortHandAttributeValue56,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 671, col: 9, offset: 21220},
																															expr: &charClassMatcher{
																																pos:        position{line: 671, col: 9, offset: 21220},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 661, col: 78, offset: 20876},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 665, col: 25, offset: 20994},
																			run: (*parser).callonShortHandAttributeValue60,
																			expr: &seqExpr{
																				pos: position{line: 665, col: 25, offset: 20994},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 665, col: 25, offset: 20994},
																						val:        "{counter2:",
																						ignoreCase: false,
																						want:       "\"{counter2:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 665, col: 38, offset: 21007},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 321, col: 18, offset: 9768},
																							run: (*parser).callonShortHandAttributeValue64,
																							expr: &seqExpr{
																								pos: position{line: 321, col: 18, offset: 9768},
																								exprs: []any{
																									&charClassMatcher{
																										pos:        position{line: 321, col: 18, offset: 9768},
																										val:        "[_\\pL\\pN]",
																										chars:      []rune{'_'},
																										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 321, col: 28, offset: 9778},
																										expr: &charClassMatcher{
																											pos:        position{line: 321, col: 29, offset: 9779},
																											val:        "[-\\pL\\pN]",
																											chars:      []rune{'-'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 665, col: 57, offset: 21026},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 665, col: 63, offset: 21032},
																							expr: &actionExpr{
																								pos: position{line: 669, col: 17, offset: 21155},
																								run: (*parser).callonShortHandAttributeValue71,
																								expr: &seqExpr{
																									pos: position{line: 669, col: 17, offset: 21155},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 669, col: 17, offset: 21155},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 669, col: 21, offset: 21159},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 669, col: 28, offset: 21166},
																												alternatives: []any{
																													&actionExpr{
																														pos: position{line: 669, col: 28, offset: 21166},
																														run: (*parser).callonShortHandAttributeValue76,
																														expr: &charClassMatcher{
																															pos:        position{line: 669, col: 28, offset: 21166},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 671, col: 9, offset: 21220},
																														run: (*parser).callonShortHandAttributeValue78,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 671, col: 9, offset: 21220},
																															expr: &charClassMatcher{
																																pos:        position{line: 671, col: 9, offset: 21220},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 665, col: 79, offset: 21048},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 517, col: 12, offset: 16053},
													run: (*parser).callonShortHandAttributeValue82,
													expr: &litMatcher{
														pos:        position{line: 517, col: 12, offset: 16053},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 521, col: 5, offset: 16141},
									expr: &notExpr{
										pos: position{line: 521, col: 7, offset: 16143},
										expr: &seqExpr{
											pos: position{line: 521, col: 9, offset: 16145},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 521, col: 9, offset: 16145},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonShortHandAttributeValue88,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 521, col: 16, offset: 16152},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 526, col: 1, offset: 16230},
			expr: &choiceExpr{
				pos: position{line: 526, col: 24, offset: 16253},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 527, col: 5, offset: 16259},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 527, col: 5, offset: 16259},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 527, col: 5, offset: 16259},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 527, col: 12, offset: 16266},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 527, col: 29, offset: 16283},
									alternatives: []any{
										&zeroOrOneExpr{
											pos: position{line: 527, col: 29, offset: 16283},
											expr: &seqExpr{
												pos: position{line: 527, col: 30, offset: 16284},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 527, col: 30, offset: 16284},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 527, col: 34, offset: 16288},
														expr: &actionExpr{
															pos: position{line: 2897, col: 10, offset: 91732},
															run: (*parser).callonPositionalAttribute11,
															expr: &charClassMatcher{
																pos:        position{line: 2897, col: 10, offset: 91732},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 527, col: 45, offset: 16299},
											expr: &litMatcher{
												pos:        position{line: 527, col: 46, offset: 16300},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 532, col: 6, offset: 16445},
						run: (*parser).callonPositionalAttribute15,
						expr: &seqExpr{
							pos: position{line: 532, col: 6, offset: 16445},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 532, col: 6, offset: 16445},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 532, col: 13, offset: 16452},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 532, col: 13, offset: 16452},
												expr: &actionExpr{
													pos: position{line: 2897, col: 10, offset: 91732},
													run: (*parser).callonPositionalAttribute20,
													expr: &charClassMatcher{
														pos:        position{line: 2897, col: 10, offset: 91732},
														val:        "[\\t ]",
														chars:      []rune{'\t', ' '},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 532, col: 21, offset: 16460},
												alternatives: []any{
													&seqExpr{
														pos: position{line: 532, col: 22, offset: 16461},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 532, col: 22, offset: 16461},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 532, col: 26, offset: 16465},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonPositionalAttribute26,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 532, col: 36, offset: 16475},
														expr: &litMatcher{
															pos:        position{line: 532, col: 37, offset: 16476},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 533, col: 5, offset: 16486},
									run: (*parser).callonPositionalAttribute30,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 543, col: 1, offset: 16801},
			expr: &actionExpr{
				pos: position{line: 544, col: 5, offset: 16824},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 544, col: 5, offset: 16824},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 544, col: 5, offset: 16824},
							label: "key",
							expr: &actionExpr{
								pos: position{line: 552, col: 22, offset: 17112},
								run: (*parser).callonNamedAttribute4,
								expr: &seqExpr{
									pos: position{line: 552, col: 22, offset: 17112},
									exprs: []any{
										&notExpr{
											pos: position{line: 552, col: 22, offset: 17112},
											expr: &actionExpr{
												pos: position{line: 2897, col: 10, offset: 91732},
												run: (*parser).callonNamedAttribute7,
												expr: &charClassMatcher{
													pos:        position{line: 2897, col: 10, offset: 91732},
													val:        "[\\t ]",
													chars:      []rune{'\t', ' '},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 552, col: 29, offset: 17119},
											expr: &charClassMatcher{
												pos:        position{line: 552, col: 29, offset: 17119},
												val:        "[^\\r\\n=,]]",
												chars:      []rune{'\r', '\n', '=', ',', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 545, col: 5, offset: 16853},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 545, col: 9, offset: 16857},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonNamedAttribute13,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 546, col: 5, offset: 16869},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 12, offset: 16876},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 546, col: 28, offset: 16892},
							expr: &seqExpr{
								pos: position{line: 546, col: 29, offset: 16893},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 546, col: 29, offset: 16893},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 546, col: 33, offset: 16897},
										expr: &actionExpr{
											pos: position{line: 2897, col: 10, offset: 91732},
											run: (*parser).callonNamedAttribute21,
											expr: &charClassMatcher{
												pos:        position{line: 2897, col: 10, offset: 91732},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 556, col: 1, offset: 17176},
			expr: &actionExpr{
				pos: position{line: 557, col: 5, offset: 17199},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 557, col: 5, offset: 17199},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 557, col: 5, offset: 17199},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 558, col: 9, offset: 17215},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 558, col: 9, offset: 17215},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 559, col: 11, offset: 17253},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 560, col: 11, offset: 17291},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 562, col: 5, offset: 17325},
							expr: &notExpr{
								pos: position{line: 562, col: 7, offset: 17327},
								expr: &seqExpr{
									pos: position{line: 562, col: 9, offset: 17329},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 562, col: 9, offset: 17329},
											expr: &actionExpr{
												pos: position{line: 2897, col: 10, offset: 91732},
												run: (*parser).callonAttributeValue12,
												expr: &charClassMatcher{
													pos:        position{line: 2897, col: 10, offset: 91732},
													val:        "[\\t ]",
													chars:      []rune{'\t', ' '},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 562, col: 16, offset: 17336},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 566, col: 1, offset: 17377},
			expr: &actionExpr{
				pos: position{line: 567, col: 5, offset: 17412},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 567, col: 5, offset: 17412},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 567, col: 5, offset: 17412},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&notExpr{
							pos: position{line: 567, col: 9, offset: 17416},
							expr: &litMatcher{
								pos:        position{line: 567, col: 10, offset: 17417},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 5, offset: 17496},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 14, offset: 17505},
								name: "SingleQuotedAttributeValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 569, col: 5, offset: 17544},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValueContent",
			pos:  position{line: 573, col: 1, offset: 17585},
			expr: &actionExpr{
				pos: position{line: 574, col: 5, offset: 17627},
				run: (*parser).callonSingleQuotedAttributeValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 574, col: 5, offset: 17627},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 574, col: 14, offset: 17636},
						expr: &choiceExpr{
							pos: position{line: 575, col: 9, offset: 17646},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 2791, col: 14, offset: 88901},
									run: (*parser).callonSingleQuotedAttributeValueContent5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2791, col: 14, offset: 88901},
										expr: &charClassMatcher{
											pos:        position{line: 2791, col: 14, offset: 88901},
											val:        "[\\pL\\pN]",
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&actionExpr{
									pos: position{line: 2897, col: 10, offset: 91732},
									run: (*parser).callonSingleQuotedAttributeValueContent8,
									expr: &charClassMatcher{
										pos:        position{line: 2897, col: 10, offset: 91732},
										val:        "[\\t ]",
										chars:      []rune{'\t', ' '},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 577, col: 11, offset: 17682},
									name: "QuotationMark",
								},
								&actionExpr{
									pos: position{line: 639, col: 5, offset: 20141},
									run: (*parser).callonSingleQuotedAttributeValueContent11,
									expr: &seqExpr{
										pos: position{line: 639, col: 5, offset: 20141},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 639, col: 5, offset: 20141},
												run: (*parser).callonSingleQuotedAttributeValueContent13,
											},
											&labeledExpr{
												pos:   position{line: 642, col: 5, offset: 20213},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 642, col: 14, offset: 20222},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 648, col: 5, offset: 20351},
															run: (*parser).callonSingleQuotedAttributeValueContent16,
															expr: &seqExpr{
																pos: position{line: 648, col: 5, offset: 20351},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 648, col: 5, offset: 20351},
																		val:        "\\{",
																		ignoreCase: false,
																		want:       "\"\\\\{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 648, col: 13, offset: 20359},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 321, col: 18, offset: 9768},
																			run: (*parser).callonSingleQuotedAttributeValueContent20,
																			expr: &seqExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				exprs: []any{
																					&charClassMatcher{
																						pos:        position{line: 321, col: 18, offset: 9768},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 321, col: 28, offset: 9778},
																						expr: &charClassMatcher{
																							pos:        position{line: 321, col: 29, offset: 9779},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 648, col: 32, offset: 20378},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 655, col: 5, offset: 20619},
															run: (*parser).callonSingleQuotedAttributeValueContent26,
															expr: &seqExpr{
																pos: position{line: 655, col: 5, offset: 20619},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 655, col: 5, offset: 20619},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 655, col: 9, offset: 20623},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 321, col: 18, offset: 9768},
																			run: (*parser).callonSingleQuotedAttributeValueContent30,
																			expr: &seqExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				exprs: []any{
																					&charClassMatcher{
																						pos:        position{line: 321, col: 18, offset: 9768},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 321, col: 28, offset: 9778},
																						expr: &charClassMatcher{
																							pos:        position{line: 321, col: 29, offset: 9779},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 655, col: 28, offset: 20642},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 661, col: 25, offset: 20823},
															run: (*parser).callonSingleQuotedAttributeValueContent36,
															expr: &seqExpr{
																pos: position{line: 661, col: 25, offset: 20823},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 661, col: 25, offset: 20823},
																		val:        "{counter:",
																		ignoreCase: false,
																		want:       "\"{counter:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 661, col: 37, offset: 20835},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 321, col: 18, offset: 9768},
																			run: (*parser).callonSingleQuotedAttributeValueContent40,
																			expr: &seqExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				exprs: []any{
																					&charClassMatcher{
																						pos:        position{line: 321, col: 18, offset: 9768},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 321, col: 28, offset: 9778},
																						expr: &charClassMatcher{
																							pos:        position{line: 321, col: 29, offset: 9779},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 661, col: 56, offset: 20854},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 661, col: 62, offset: 20860},
																			expr: &actionExpr{
																				pos: position{line: 669, col: 17, offset: 21155},
																				run: (*parser).callonSingleQuotedAttributeValueContent47,
																				expr: &seqExpr{
																					pos: position{line: 669, col: 17, offset: 21155},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 669, col: 17, offset: 21155},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 669, col: 21, offset: 21159},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 669, col: 28, offset: 21166},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 669, col: 28, offset: 21166},
																										run: (*parser).callonSingleQuotedAttributeValueContent52,
																										expr: &charClassMatcher{
																											pos:        position{line: 669, col: 28, offset: 21166},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 671, col: 9, offset: 21220},
																										run: (*parser).callonSingleQuotedAttributeValueContent54,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 671, col: 9, offset: 21220},
																											expr: &charClassMatcher{
																												pos:        position{line: 671, col: 9, offset: 21220},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 661, col: 78, offset: 20876},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 665, col: 25, offset: 20994},
															run: (*parser).callonSingleQuotedAttributeValueContent58,
															expr: &seqExpr{
																pos: position{line: 665, col: 25, offset: 20994},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 665, col: 25, offset: 20994},
																		val:        "{counter2:",
																		ignoreCase: false,
																		want:       "\"{counter2:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 665, col: 38, offset: 21007},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 321, col: 18, offset: 9768},
																			run: (*parser).callonSingleQuotedAttributeValueContent62,
																			expr: &seqExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				exprs: []any{
																					&charClassMatcher{
																						pos:        position{line: 321, col: 18, offset: 9768},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 321, col: 28, offset: 9778},
																						expr: &charClassMatcher{
																							pos:        position{line: 321, col: 29, offset: 9779},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 665, col: 57, offset: 21026},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 665, col: 63, offset: 21032},
																			expr: &actionExpr{
																				pos: position{line: 669, col: 17, offset: 21155},
																				run: (*parser).callonSingleQuotedAttributeValueContent69,
																				expr: &seqExpr{
																					pos: position{line: 669, col: 17, offset: 21155},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 669, col: 17, offset: 21155},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 669, col: 21, offset: 21159},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 669, col: 28, offset: 21166},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 669, col: 28, offset: 21166},
																										run: (*parser).callonSingleQuotedAttributeValueContent74,
																										expr: &charClassMatcher{
																											pos:        position{line: 669, col: 28, offset: 21166},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 671, col: 9, offset: 21220},
																										run: (*parser).callonSingleQuotedAttributeValueContent76,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 671, col: 9, offset: 21220},
																											expr: &charClassMatcher{
																												pos:        position{line: 671, col: 9, offset: 21220},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 665, col: 79, offset: 21048},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 579, col: 12, offset: 17736},
									run: (*parser).callonSingleQuotedAttributeValueContent80,
									expr: &litMatcher{
										pos:        position{line: 579, col: 12, offset: 17736},
										val:        "\\'",
										ignoreCase: false,
										want:       "\"\\\\'\"",
									},
								},
								&litMatcher{
									pos:        position{line: 582, col: 13, offset: 17838},
									val:        "'`",
									ignoreCase: false,
									want:       "\"'`\"",
								},
								&litMatcher{
									pos:        position{line: 582, col: 20, offset: 17845},
									val:        "`'",
									ignoreCase: false,
									want:       "\"`'\"",
								},
								&actionExpr{
									pos: position{line: 582, col: 27, offset: 17852},
									run: (*parser).callonSingleQuotedAttributeValueContent84,
									expr: &litMatcher{
										pos:        position{line: 582, col: 27, offset: 17852},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&actionExpr{
									pos: position{line: 585, col: 12, offset: 18012},
									run: (*parser).callonSingleQuotedAttributeValueContent86,
									expr: &oneOrMoreExpr{
										pos: position{line: 585, col: 12, offset: 18012},
										expr: &charClassMatcher{
											pos:        position{line: 585, col: 12, offset: 18012},
											val:        "[^\\r\\n\\\\\\ ]",
											chars:      []rune{'\r', '\n', '\\', '\'', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 592, col: 1, offset: 18209},
			expr: &actionExpr{
				pos: position{line: 593, col: 5, offset: 18244},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 593, col: 5, offset: 18244},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 593, col: 5, offset: 18244},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&notExpr{
							pos: position{line: 593, col: 10, offset: 18249},
							expr: &litMatcher{
								pos:        position{line: 593, col: 11, offset: 18250},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 594, col: 5, offset: 18329},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 14, offset: 18338},
								name: "DoubleQuotedAttributeValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 595, col: 5, offset: 18377},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&andExpr{
							pos: position{line: 595, col: 10, offset: 18382},
							expr: &notExpr{
								pos: position{line: 595, col: 12, offset: 18384},
								expr: &seqExpr{
									pos: position{line: 595, col: 14, offset: 18386},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 595, col: 14, offset: 18386},
											expr: &actionExpr{
												pos: position{line: 2897, col: 10, offset: 91732},
												run: (*parser).callonDoubleQuotedAttributeValue13,
												expr: &charClassMatcher{
													pos:        position{line: 2897, col: 10, offset: 91732},
													val:        "[\\t ]",
													chars:      []rune{'\t', ' '},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 595, col: 21, offset: 18393},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValueContent",
			pos:  position{line: 599, col: 1, offset: 18436},
			expr: &actionExpr{
				pos: position{line: 600, col: 5, offset: 18478},
				run: (*parser).callonDoubleQuotedAttributeValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 600, col: 5, offset: 18478},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 600, col: 14, offset: 18487},
						expr: &choiceExpr{
							pos: position{line: 601, col: 9, offset: 18497},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 2791, col: 14, offset: 88901},
									run: (*parser).callonDoubleQuotedAttributeValueContent5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2791, col: 14, offset: 88901},
										expr: &charClassMatcher{
											pos:        position{line: 2791, col: 14, offset: 88901},
											val:        "[\\pL\\pN]",
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&actionExpr{
									pos: position{line: 2897, col: 10, offset: 91732},
									run: (*parser).callonDoubleQuotedAttributeValueContent8,
									expr: &charClassMatcher{
										pos:        position{line: 2897, col: 10, offset: 91732},
										val:        "[\\t ]",
										chars:      []rune{'\t', ' '},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 603, col: 11, offset: 18533},
									name: "QuotationMark",
								},
								&actionExpr{
									pos: position{line: 639, col: 5, offset: 20141},
									run: (*parser).callonDoubleQuotedAttributeValueContent11,
									expr: &seqExpr{
										pos: position{line: 639, col: 5, offset: 20141},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 639, col: 5, offset: 20141},
												run: (*parser).callonDoubleQuotedAttributeValueContent13,
											},
											&labeledExpr{
												pos:   position{line: 642, col: 5, offset: 20213},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 642, col: 14, offset: 20222},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 648, col: 5, offset: 20351},
															run: (*parser).callonDoubleQuotedAttributeValueContent16,
															expr: &seqExpr{
																pos: position{line: 648, col: 5, offset: 20351},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 648, col: 5, offset: 20351},
																		val:        "\\{",
																		ignoreCase: false,
																		want:       "\"\\\\{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 648, col: 13, offset: 20359},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 321, col: 18, offset: 9768},
																			run: (*parser).callonDoubleQuotedAttributeValueContent20,
																			expr: &seqExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				exprs: []any{
																					&charClassMatcher{
																						pos:        position{line: 321, col: 18, offset: 9768},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 321, col: 28, offset: 9778},
																						expr: &charClassMatcher{
																							pos:        position{line: 321, col: 29, offset: 9779},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 648, col: 32, offset: 20378},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 655, col: 5, offset: 20619},
															run: (*parser).callonDoubleQuotedAttributeValueContent26,
															expr: &seqExpr{
																pos: position{line: 655, col: 5, offset: 20619},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 655, col: 5, offset: 20619},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 655, col: 9, offset: 20623},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 321, col: 18, offset: 9768},
																			run: (*parser).callonDoubleQuotedAttributeValueContent30,
																			expr: &seqExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				exprs: []any{
																					&charClassMatcher{
																						pos:        position{line: 321, col: 18, offset: 9768},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 321, col: 28, offset: 9778},
																						expr: &charClassMatcher{
																							pos:        position{line: 321, col: 29, offset: 9779},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 655, col: 28, offset: 20642},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 661, col: 25, offset: 20823},
															run: (*parser).callonDoubleQuotedAttributeValueContent36,
															expr: &seqExpr{
																pos: position{line: 661, col: 25, offset: 20823},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 661, col: 25, offset: 20823},
																		val:        "{counter:",
																		ignoreCase: false,
																		want:       "\"{counter:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 661, col: 37, offset: 20835},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 321, col: 18, offset: 9768},
																			run: (*parser).callonDoubleQuotedAttributeValueContent40,
																			expr: &seqExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				exprs: []any{
																					&charClassMatcher{
																						pos:        position{line: 321, col: 18, offset: 9768},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 321, col: 28, offset: 9778},
																						expr: &charClassMatcher{
																							pos:        position{line: 321, col: 29, offset: 9779},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 661, col: 56, offset: 20854},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 661, col: 62, offset: 20860},
																			expr: &actionExpr{
																				pos: position{line: 669, col: 17, offset: 21155},
																				run: (*parser).callonDoubleQuotedAttributeValueContent47,
																				expr: &seqExpr{
																					pos: position{line: 669, col: 17, offset: 21155},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 669, col: 17, offset: 21155},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 669, col: 21, offset: 21159},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 669, col: 28, offset: 21166},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 669, col: 28, offset: 21166},
																										run: (*parser).callonDoubleQuotedAttributeValueContent52,
																										expr: &charClassMatcher{
																											pos:        position{line: 669, col: 28, offset: 21166},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 671, col: 9, offset: 21220},
																										run: (*parser).callonDoubleQuotedAttributeValueContent54,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 671, col: 9, offset: 21220},
																											expr: &charClassMatcher{
																												pos:        position{line: 671, col: 9, offset: 21220},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 661, col: 78, offset: 20876},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 665, col: 25, offset: 20994},
															run: (*parser).callonDoubleQuotedAttributeValueContent58,
															expr: &seqExpr{
																pos: position{line: 665, col: 25, offset: 20994},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 665, col: 25, offset: 20994},
																		val:        "{counter2:",
																		ignoreCase: false,
																		want:       "\"{counter2:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 665, col: 38, offset: 21007},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 321, col: 18, offset: 9768},
																			run: (*parser).callonDoubleQuotedAttributeValueContent62,
																			expr: &seqExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				exprs: []any{
																					&charClassMatcher{
																						pos:        position{line: 321, col: 18, offset: 9768},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 321, col: 28, offset: 9778},
																						expr: &charClassMatcher{
																							pos:        position{line: 321, col: 29, offset: 9779},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 665, col: 57, offset: 21026},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 665, col: 63, offset: 21032},
																			expr: &actionExpr{
																				pos: position{line: 669, col: 17, offset: 21155},
																				run: (*parser).callonDoubleQuotedAttributeValueContent69,
																				expr: &seqExpr{
																					pos: position{line: 669, col: 17, offset: 21155},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 669, col: 17, offset: 21155},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 669, col: 21, offset: 21159},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 669, col: 28, offset: 21166},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 669, col: 28, offset: 21166},
																										run: (*parser).callonDoubleQuotedAttributeValueContent74,
																										expr: &charClassMatcher{
																											pos:        position{line: 669, col: 28, offset: 21166},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 671, col: 9, offset: 21220},
																										run: (*parser).callonDoubleQuotedAttributeValueContent76,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 671, col: 9, offset: 21220},
																											expr: &charClassMatcher{
																												pos:        position{line: 671, col: 9, offset: 21220},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 665, col: 79, offset: 21048},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 605, col: 12, offset: 18588},
									run: (*parser).callonDoubleQuotedAttributeValueContent80,
									expr: &litMatcher{
										pos:        position{line: 605, col: 12, offset: 18588},
										val:        "\\\"",
										ignoreCase: false,
										want:       "\"\\\\\\\"\"",
									},
								},
								&litMatcher{
									pos:        position{line: 608, col: 13, offset: 18690},
									val:        "\"`",
									ignoreCase: false,
									want:       "\"\\\"`\"",
								},
								&litMatcher{
									pos:        position{line: 608, col: 21, offset: 18698},
									val:        "`\"",
									ignoreCase: false,
									want:       "\"`\\\"\"",
								},
								&litMatcher{
									pos:        position{line: 608, col: 29, offset: 18706},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&actionExpr{
									pos: position{line: 608, col: 35, offset: 18712},
									run: (*parser).callonDoubleQuotedAttributeValueContent85,
									expr: &litMatcher{
										pos:        position{line: 608, col: 35, offset: 18712},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
								&actionExpr{
									pos: position{line: 611, col: 12, offset: 18895},
									run: (*parser).callonDoubleQuotedAttributeValueContent87,
									expr: &oneOrMoreExpr{
										pos: position{line: 611, col: 12, offset: 18895},
										expr: &charClassMatcher{
											pos:        position{line: 611, col: 12, offset: 18895},
											val:        "[^\\r\\n\\\\\"` ]",
											chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 619, col: 1, offset: 19169},
			expr: &actionExpr{
				pos: position{line: 622, col: 5, offset: 19353},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 622, col: 5, offset: 19353},
					exprs: []any{
						&notExpr{
							pos: position{line: 622, col: 5, offset: 19353},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonUnquotedAttributeValue4,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 623, col: 5, offset: 19422},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 623, col: 14, offset: 19431},
								expr: &choiceExpr{
									pos: position{line: 624, col: 9, offset: 19441},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 624, col: 10, offset: 19442},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 624, col: 10, offset: 19442},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&ruleRefExpr{
													pos:  position{line: 624, col: 14, offset: 19446},
													name: "UnquotedAttributeValue",
												},
												&litMatcher{
													pos:        position{line: 624, col: 37, offset: 19469},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&actionExpr{
											pos: position{line: 639, col: 5, offset: 20141},
											run: (*parser).callonUnquotedAttributeValue13,
											expr: &seqExpr{
												pos: position{line: 639, col: 5, offset: 20141},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 639, col: 5, offset: 20141},
														run: (*parser).callonUnquotedAttributeValue15,
													},
													&labeledExpr{
														pos:   position{line: 642, col: 5, offset: 20213},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 642, col: 14, offset: 20222},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 648, col: 5, offset: 20351},
																	run: (*parser).callonUnquotedAttributeValue18,
																	expr: &seqExpr{
																		pos: position{line: 648, col: 5, offset: 20351},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 648, col: 5, offset: 20351},
																				val:        "\\{",
																				ignoreCase: false,
																				want:       "\"\\\\{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 648, col: 13, offset: 20359},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					run: (*parser).callonUnquotedAttributeValue22,
																					expr: &seqExpr{
																						pos: position{line: 321, col: 18, offset: 9768},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 321, col: 18, offset: 9768},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 321, col: 28, offset: 9778},
																								expr: &charClassMatcher{
																									pos:        position{line: 321, col: 29, offset: 9779},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 648, col: 32, offset: 20378},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 655, col: 5, offset: 20619},
																	run: (*parser).callonUnquotedAttributeValue28,
																	expr: &seqExpr{
																		pos: position{line: 655, col: 5, offset: 20619},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 655, col: 5, offset: 20619},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 655, col: 9, offset: 20623},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					run: (*parser).callonUnquotedAttributeValue32,
																					expr: &seqExpr{
																						pos: position{line: 321, col: 18, offset: 9768},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 321, col: 18, offset: 9768},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 321, col: 28, offset: 9778},
																								expr: &charClassMatcher{
																									pos:        position{line: 321, col: 29, offset: 9779},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 655, col: 28, offset: 20642},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 661, col: 25, offset: 20823},
																	run: (*parser).callonUnquotedAttributeValue38,
																	expr: &seqExpr{
																		pos: position{line: 661, col: 25, offset: 20823},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 661, col: 25, offset: 20823},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 661, col: 37, offset: 20835},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					run: (*parser).callonUnquotedAttributeValue42,
																					expr: &seqExpr{
																						pos: position{line: 321, col: 18, offset: 9768},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 321, col: 18, offset: 9768},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 321, col: 28, offset: 9778},
																								expr: &charClassMatcher{
																									pos:        position{line: 321, col: 29, offset: 9779},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 661, col: 56, offset: 20854},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 661, col: 62, offset: 20860},
																					expr: &actionExpr{
																						pos: position{line: 669, col: 17, offset: 21155},
																						run: (*parser).callonUnquotedAttributeValue49,
																						expr: &seqExpr{
																							pos: position{line: 669, col: 17, offset: 21155},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 669, col: 17, offset: 21155},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 669, col: 21, offset: 21159},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 669, col: 28, offset: 21166},
																										alternatives: []any{
																											&actionExpr{
																												pos: position{line: 669, col: 28, offset: 21166},
																												run: (*parser).callonUnquotedAttributeValue54,
																												expr: &charClassMatcher{
																													pos:        position{line: 669, col: 28, offset: 21166},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 671, col: 9, offset: 21220},
																												run: (*parser).callonUnquotedAttributeValue56,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 671, col: 9, offset: 21220},
																													expr: &charClassMatcher{
																														pos:        position{line: 671, col: 9, offset: 21220},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 661, col: 78, offset: 20876},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 665, col: 25, offset: 20994},
																	run: (*parser).callonUnquotedAttributeValue60,
																	expr: &seqExpr{
																		pos: position{line: 665, col: 25, offset: 20994},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 665, col: 25, offset: 20994},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 665, col: 38, offset: 21007},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					run: (*parser).callonUnquotedAttributeValue64,
																					expr: &seqExpr{
																						pos: position{line: 321, col: 18, offset: 9768},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 321, col: 18, offset: 9768},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 321, col: 28, offset: 9778},
																								expr: &charClassMatcher{
																									pos:        position{line: 321, col: 29, offset: 9779},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 665, col: 57, offset: 21026},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 665, col: 63, offset: 21032},
																					expr: &actionExpr{
																						pos: position{line: 669, col: 17, offset: 21155},
																						run: (*parser).callonUnquotedAttributeValue71,
																						expr: &seqExpr{
																							pos: position{line: 669, col: 17, offset: 21155},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 669, col: 17, offset: 21155},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 669, col: 21, offset: 21159},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 669, col: 28, offset: 21166},
																										alternatives: []any{
																											&actionExpr{
																												pos: position{line: 669, col: 28, offset: 21166},
																												run: (*parser).callonUnquotedAttributeValue76,
																												expr: &charClassMatcher{
																													pos:        position{line: 669, col: 28, offset: 21166},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 671, col: 9, offset: 21220},
																												run: (*parser).callonUnquotedAttributeValue78,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 671, col: 9, offset: 21220},
																													expr: &charClassMatcher{
																														pos:        position{line: 671, col: 9, offset: 21220},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 665, col: 79, offset: 21048},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 625, col: 32, offset: 19556},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
										&actionExpr{
											pos: position{line: 2897, col: 10, offset: 91732},
											run: (*parser).callonUnquotedAttributeValue83,
											expr: &charClassMatcher{
												pos:        position{line: 2897, col: 10, offset: 91732},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 627, col: 12, offset: 19641},
											run: (*parser).callonUnquotedAttributeValue85,
											expr: &oneOrMoreExpr{
												pos: position{line: 627, col: 12, offset: 19641},
												expr: &charClassMatcher{
													pos:        position{line: 627, col: 12, offset: 19641},
													val:        "[^=,]{ ]",
													chars:      []rune{'=', ',', ']', '{', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 687, col: 1, offset: 21782},
			expr: &choiceExpr{
				pos: position{line: 687, col: 19, offset: 21800},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 689, col: 27, offset: 21876},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 689, col: 27, offset: 21876},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 689, col: 27, offset: 21876},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 689, col: 32, offset: 21881},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2882, col: 7, offset: 91384},
										run: (*parser).callonCrossReference6,
										expr: &oneOrMoreExpr{
											pos: position{line: 2882, col: 7, offset: 91384},
											expr: &charClassMatcher{
												pos:        position{line: 2882, col: 7, offset: 91384},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 689, col: 40, offset: 21889},
									expr: &actionExpr{
										pos: position{line: 2897, col: 10, offset: 91732},
										run: (*parser).callonCrossReference10,
										expr: &charClassMatcher{
											pos:        position{line: 2897, col: 10, offset: 91732},
											val:        "[\\t ]",
											chars:      []rune{'\t', ' '},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&litMatcher{
									pos:        position{line: 689, col: 47, offset: 21896},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 689, col: 51, offset: 21900},
									label: "label",
									expr: &oneOrMoreExpr{
										pos: position{line: 699, col: 24, offset: 22301},
										expr: &choiceExpr{
											pos: position{line: 700, col: 5, offset: 22307},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 700, col: 6, offset: 22308},
													run: (*parser).callonCrossReference16,
													expr: &seqExpr{
														pos: position{line: 700, col: 6, offset: 22308},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 700, col: 6, offset: 22308},
																val:        "[\\pL\\pN]",
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 700, col: 14, offset: 22316},
																expr: &charClassMatcher{
																	pos:        position{line: 700, col: 14, offset: 22316},
																	val:        "[^\\r\\n{<>]",
																	chars:      []rune{'\r', '\n', '{', '<', '>'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 648, col: 5, offset: 20351},
													run: (*parser).callonCrossReference21,
													expr: &seqExpr{
														pos: position{line: 648, col: 5, offset: 20351},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 648, col: 5, offset: 20351},
																val:        "\\{",
																ignoreCase: false,
																want:       "\"\\\\{\"",
															},
															&labeledExpr{
																pos:   position{line: 648, col: 13, offset: 20359},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 321, col: 18, offset: 9768},
																	run: (*parser).callonCrossReference25,
																	expr: &seqExpr{
																		pos: position{line: 321, col: 18, offset: 9768},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 321, col: 18, offset: 9768},
																				val:        "[_\\pL\\pN]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 321, col: 28, offset: 9778},
																				expr: &charClassMatcher{
																					pos:        position{line: 321, col: 29, offset: 9779},
																					val:        "[-\\pL\\pN]",
																					chars:      []rune{'-'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 648, col: 32, offset: 20378},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 655, col: 5, offset: 20619},
													run: (*parser).callonCrossReference31,
													expr: &seqExpr{
														pos: position{line: 655, col: 5, offset: 20619},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 655, col: 5, offset: 20619},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
															&labeledExpr{
																pos:   position{line: 655, col: 9, offset: 20623},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 321, col: 18, offset: 9768},
																	run: (*parser).callonCrossReference35,
																	expr: &seqExpr{
																		pos: position{line: 321, col: 18, offset: 9768},
																		exprs: []any{
																			&charClassMatcher{
																				pos:        position{line: 321, col: 18, offset: 9768},
																				val:        "[_\\pL\\pN]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 321, col: 28, offset: 9778},
																				expr: &charClassMatcher{
																					pos:        position{line: 321, col: 29, offset: 9779},
																					val:        "[-\\pL\\pN]",
																					chars:      []rune{'-'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 655, col: 28, offset: 20642},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 704, col: 8, offset: 22542},
													run: (*parser).callonCrossReference41,
													expr: &litMatcher{
														pos:        position{line: 704, col: 8, offset: 22542},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 689, col: 79, offset: 21928},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 691, col: 9, offset: 22001},
						run: (*parser).callonCrossReference44,
						expr: &seqExpr{
							pos: position{line: 691, col: 9, offset: 22001},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 691, col: 9, offset: 22001},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 691, col: 14, offset: 22006},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2882, col: 7, offset: 91384},
										run: (*parser).callonCrossReference48,
										expr: &oneOrMoreExpr{
											pos: position{line: 2882, col: 7, offset: 91384},
											expr: &charClassMatcher{
												pos:        position{line: 2882, col: 7, offset: 91384},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 691, col: 22, offset: 22014},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 687, col: 44, offset: 21825},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 695, col: 1, offset: 22085},
			expr: &actionExpr{
				pos: position{line: 695, col: 27, offset: 22111},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 695, col: 27, offset: 22111},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 695, col: 27, offset: 22111},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 695, col: 35, offset: 22119},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2851, col: 17, offset: 90395},
								run: (*parser).callonExternalCrossReference5,
								expr: &labeledExpr{
									pos:   position{line: 2851, col: 17, offset: 90395},
									label: "path",
									expr: &actionExpr{
										pos: position{line: 2868, col: 5, offset: 90849},
										run: (*parser).callonExternalCrossReference7,
										expr: &labeledExpr{
											pos:   position{line: 2868, col: 5, offset: 90849},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 2868, col: 14, offset: 90858},
												expr: &choiceExpr{
													pos: position{line: 2869, col: 9, offset: 90868},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2869, col: 9, offset: 90868},
															run: (*parser).callonExternalCrossReference11,
															expr: &seqExpr{
																pos: position{line: 2869, col: 9, offset: 90868},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 2869, col: 9, offset: 90868},
																		expr: &litMatcher{
																			pos:        position{line: 2869, col: 10, offset: 90869},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2870, col: 9, offset: 90897},
																		expr: &charClassMatcher{
																			pos:        position{line: 2870, col: 10, offset: 90898},
																			val:        "[^\\r\\n[]�{,;?!.<> ]",
																			chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '.', '<', '>', ' '},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 2873, col: 11, offset: 91110},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 2873, col: 11, offset: 91110},
																	val:        "[,;?!.]",
																	chars:      []rune{',', ';', '?', '!', '.'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&andExpr{
																	pos: position{line: 2873, col: 19, offset: 91118},
																	expr: &seqExpr{
																		pos: position{line: 2873, col: 21, offset: 91120},
																		exprs: []any{
																			&notExpr{
																				pos: position{line: 2873, col: 21, offset: 91120},
																				expr: &actionExpr{
																					pos: position{line: 2897, col: 10, offset: 91732},
																					run: (*parser).callonExternalCrossReference22,
																					expr: &charClassMatcher{
																						pos:        position{line: 2897, col: 10, offset: 91732},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2873, col: 28, offset: 91127},
																				expr: &notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 639, col: 5, offset: 20141},
															run: (*parser).callonExternalCrossReference27,
															expr: &seqExpr{
																pos: position{line: 639, col: 5, offset: 20141},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 639, col: 5, offset: 20141},
																		run: (*parser).callonExternalCrossReference29,
																	},
																	&labeledExpr{
																		pos:   position{line: 642, col: 5, offset: 20213},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 642, col: 14, offset: 20222},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 648, col: 5, offset: 20351},
																					run: (*parser).callonExternalCrossReference32,
																					expr: &seqExpr{
																						pos: position{line: 648, col: 5, offset: 20351},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 648, col: 5, offset: 20351},
																								val:        "\\{",
																								ignoreCase: false,
																								want:       "\"\\\\{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 648, col: 13, offset: 20359},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									run: (*parser).callonExternalCrossReference36,
																									expr: &seqExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										exprs: []any{
																											&charClassMatcher{
																												pos:        position{line: 321, col: 18, offset: 9768},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 321, col: 28, offset: 9778},
																												expr: &charClassMatcher{
																													pos:        position{line: 321, col: 29, offset: 9779},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 648, col: 32, offset: 20378},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 655, col: 5, offset: 20619},
																					run: (*parser).callonExternalCrossReference42,
																					expr: &seqExpr{
																						pos: position{line: 655, col: 5, offset: 20619},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 655, col: 5, offset: 20619},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 655, col: 9, offset: 20623},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									run: (*parser).callonExternalCrossReference46,
																									expr: &seqExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										exprs: []any{
																											&charClassMatcher{
																												pos:        position{line: 321, col: 18, offset: 9768},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 321, col: 28, offset: 9778},
																												expr: &charClassMatcher{
																													pos:        position{line: 321, col: 29, offset: 9779},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 655, col: 28, offset: 20642},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 661, col: 25, offset: 20823},
																					run: (*parser).callonExternalCrossReference52,
																					expr: &seqExpr{
																						pos: position{line: 661, col: 25, offset: 20823},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 661, col: 25, offset: 20823},
																								val:        "{counter:",
																								ignoreCase: false,
																								want:       "\"{counter:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 661, col: 37, offset: 20835},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									run: (*parser).callonExternalCrossReference56,
																									expr: &seqExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										exprs: []any{
																											&charClassMatcher{
																												pos:        position{line: 321, col: 18, offset: 9768},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 321, col: 28, offset: 9778},
																												expr: &charClassMatcher{
																													pos:        position{line: 321, col: 29, offset: 9779},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 661, col: 56, offset: 20854},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 661, col: 62, offset: 20860},
																									expr: &actionExpr{
																										pos: position{line: 669, col: 17, offset: 21155},
																										run: (*parser).callonExternalCrossReference63,
																										expr: &seqExpr{
																											pos: position{line: 669, col: 17, offset: 21155},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 669, col: 17, offset: 21155},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 669, col: 21, offset: 21159},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 669, col: 28, offset: 21166},
																														alternatives: []any{
																															&actionExpr{
																																pos: position{line: 669, col: 28, offset: 21166},
																																run: (*parser).callonExternalCrossReference68,
																																expr: &charClassMatcher{
																																	pos:        position{line: 669, col: 28, offset: 21166},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 671, col: 9, offset: 21220},
																																run: (*parser).callonExternalCrossReference70,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 671, col: 9, offset: 21220},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 671, col: 9, offset: 21220},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 661, col: 78, offset: 20876},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 665, col: 25, offset: 20994},
																					run: (*parser).callonExternalCrossReference74,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 25, offset: 20994},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 665, col: 25, offset: 20994},
																								val:        "{counter2:",
																								ignoreCase: false,
																								want:       "\"{counter2:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 38, offset: 21007},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									run: (*parser).callonExternalCrossReference78,
																									expr: &seqExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										exprs: []any{
																											&charClassMatcher{
																												pos:        position{line: 321, col: 18, offset: 9768},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 321, col: 28, offset: 9778},
																												expr: &charClassMatcher{
																													pos:        position{line: 321, col: 29, offset: 9779},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 57, offset: 21026},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 665, col: 63, offset: 21032},
																									expr: &actionExpr{
																										pos: position{line: 669, col: 17, offset: 21155},
																										run: (*parser).callonExternalCrossReference85,
																										expr: &seqExpr{
																											pos: position{line: 669, col: 17, offset: 21155},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 669, col: 17, offset: 21155},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 669, col: 21, offset: 21159},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 669, col: 28, offset: 21166},
																														alternatives: []any{
																															&actionExpr{
																																pos: position{line: 669, col: 28, offset: 21166},
																																run: (*parser).callonExternalCrossReference90,
																																expr: &charClassMatcher{
																																	pos:        position{line: 669, col: 28, offset: 21166},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 671, col: 9, offset: 21220},
																																run: (*parser).callonExternalCrossReference92,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 671, col: 9, offset: 21220},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 671, col: 9, offset: 21220},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 665, col: 79, offset: 21048},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1201, col: 23, offset: 37004},
															run: (*parser).callonExternalCrossReference96,
															expr: &seqExpr{
																pos: position{line: 1201, col: 23, offset: 37004},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1199, col: 32, offset: 36972},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1201, col: 51, offset: 37032},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1201, col: 56, offset: 37037},
																			run: (*parser).callonExternalCrossReference100,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1201, col: 56, offset: 37037},
																				expr: &charClassMatcher{
																					pos:        position{line: 1201, col: 56, offset: 37037},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1199, col: 32, offset: 36972},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2876, col: 11, offset: 91247},
															run: (*parser).callonExternalCrossReference104,
															expr: &litMatcher{
																pos:        position{line: 2876, col: 11, offset: 91247},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 54, offset: 22138},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 66, offset: 22150},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 991, col: 1, offset: 30799},
			expr: &actionExpr{
				pos: position{line: 992, col: 5, offset: 30832},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 992, col: 5, offset: 30832},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 992, col: 5, offset: 30832},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 992, col: 11, offset: 30838},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 2847, col: 14, offset: 90325},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 2847, col: 14, offset: 90325},
									expr: &charClassMatcher{
										pos:        position{line: 2847, col: 14, offset: 90325},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2919, col: 8, offset: 92130},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 2906, col: 12, offset: 91903},
									run: (*parser).callonMarkdownQuoteAttribution9,
									expr: &choiceExpr{
										pos: position{line: 2906, col: 13, offset: 91904},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2906, col: 13, offset: 91904},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 20, offset: 91911},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 29, offset: 91920},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2916, col: 8, offset: 92080},
									expr: &anyMatcher{
										line: 2916, col: 9, offset: 92081,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 1103, col: 1, offset: 33755},
			expr: &actionExpr{
				pos: position{line: 1104, col: 5, offset: 33778},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 1104, col: 5, offset: 33778},
					exprs: []any{
						&andCodeExpr{
							pos: position{line: 1104, col: 5, offset: 33778},
							run: (*parser).callonDocumentHeader3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1107, col: 5, offset: 33839},
							expr: &choiceExpr{
								pos: position{line: 1107, col: 6, offset: 33840},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2465, col: 22, offset: 79256},
										run: (*parser).callonDocumentHeader6,
										expr: &seqExpr{
											pos: position{line: 2465, col: 22, offset: 79256},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2470, col: 31, offset: 79477},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2470, col: 36, offset: 79482},
													expr: &litMatcher{
														pos:        position{line: 2470, col: 37, offset: 79483},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2465, col: 49, offset: 79283},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2843, col: 13, offset: 90258},
														run: (*parser).callonDocumentHeader12,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2843, col: 13, offset: 90258},
															expr: &charClassMatcher{
																pos:        position{line: 2843, col: 13, offset: 90258},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonDocumentHeader16,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 823, col: 5, offset: 26356},
										run: (*parser).callonDocumentHeader23,
										expr: &seqExpr{
											pos: position{line: 823, col: 5, offset: 26356},
											exprs: []any{
												&actionExpr{
													pos: position{line: 743, col: 5, offset: 23616},
													run: (*parser).callonDocumentHeader25,
													expr: &seqExpr{
														pos: position{line: 743, col: 5, offset: 23616},
														exprs: []any{
															&labeledExpr{
																pos:   position{line: 743, col: 5, offset: 23616},
																label: "delimiter",
																expr: &actionExpr{
																	pos: position{line: 743, col: 16, offset: 23627},
																	run: (*parser).callonDocumentHeader28,
																	expr: &seqExpr{
																		pos: position{line: 743, col: 16, offset: 23627},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 743, col: 16, offset: 23627},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 743, col: 23, offset: 23634},
																				expr: &litMatcher{
																					pos:        position{line: 743, col: 23, offset: 23634},
																					val:        "/",
																					ignoreCase: false,
																					want:       "\"/\"",
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 745, col: 8, offset: 23718},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonDocumentHeader34,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2919, col: 8, offset: 92130},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 2906, col: 12, offset: 91903},
																		run: (*parser).callonDocumentHeader37,
																		expr: &choiceExpr{
																			pos: position{line: 2906, col: 13, offset: 91904},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2906, col: 13, offset: 91904},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 20, offset: 91911},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 29, offset: 91920},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 824, col: 5, offset: 26387},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 834, col: 5, offset: 26673},
														expr: &actionExpr{
															pos: position{line: 834, col: 6, offset: 26674},
															run: (*parser).callonDocumentHeader46,
															expr: &seqExpr{
																pos: position{line: 834, col: 6, offset: 26674},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 834, col: 6, offset: 26674},
																		expr: &choiceExpr{
																			pos: position{line: 831, col: 29, offset: 26616},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 743, col: 5, offset: 23616},
																					run: (*parser).callonDocumentHeader50,
																					expr: &seqExpr{
																						pos: position{line: 743, col: 5, offset: 23616},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 743, col: 5, offset: 23616},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 743, col: 16, offset: 23627},
																									run: (*parser).callonDocumentHeader53,
																									expr: &seqExpr{
																										pos: position{line: 743, col: 16, offset: 23627},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 743, col: 16, offset: 23627},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 743, col: 23, offset: 23634},
																												expr: &litMatcher{
																													pos:        position{line: 743, col: 23, offset: 23634},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 745, col: 8, offset: 23718},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonDocumentHeader59,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonDocumentHeader62,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 835, col: 5, offset: 26704},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 814, col: 5, offset: 26120},
																			run: (*parser).callonDocumentHeader72,
																			expr: &seqExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 815, col: 5, offset: 26195},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2843, col: 13, offset: 90258},
																							run: (*parser).callonDocumentHeader77,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								expr: &charClassMatcher{
																									pos:        position{line: 2843, col: 13, offset: 90258},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonDocumentHeader81,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 825, col: 5, offset: 26421},
													expr: &choiceExpr{
														pos: position{line: 831, col: 29, offset: 26616},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 743, col: 5, offset: 23616},
																run: (*parser).callonDocumentHeader90,
																expr: &seqExpr{
																	pos: position{line: 743, col: 5, offset: 23616},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 743, col: 5, offset: 23616},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 743, col: 16, offset: 23627},
																				run: (*parser).callonDocumentHeader93,
																				expr: &seqExpr{
																					pos: position{line: 743, col: 16, offset: 23627},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 743, col: 16, offset: 23627},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 743, col: 23, offset: 23634},
																							expr: &litMatcher{
																								pos:        position{line: 743, col: 23, offset: 23634},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 745, col: 8, offset: 23718},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonDocumentHeader99,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonDocumentHeader102,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1108, col: 5, offset: 33936},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1108, col: 12, offset: 33943},
								name: "DocumentTitle",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1109, col: 5, offset: 33962},
							expr: &choiceExpr{
								pos: position{line: 1109, col: 6, offset: 33963},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2465, col: 22, offset: 79256},
										run: (*parser).callonDocumentHeader115,
										expr: &seqExpr{
											pos: position{line: 2465, col: 22, offset: 79256},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2470, col: 31, offset: 79477},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2470, col: 36, offset: 79482},
													expr: &litMatcher{
														pos:        position{line: 2470, col: 37, offset: 79483},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2465, col: 49, offset: 79283},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2843, col: 13, offset: 90258},
														run: (*parser).callonDocumentHeader121,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2843, col: 13, offset: 90258},
															expr: &charClassMatcher{
																pos:        position{line: 2843, col: 13, offset: 90258},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonDocumentHeader125,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 823, col: 5, offset: 26356},
										run: (*parser).callonDocumentHeader132,
										expr: &seqExpr{
											pos: position{line: 823, col: 5, offset: 26356},
											exprs: []any{
												&actionExpr{
													pos: position{line: 743, col: 5, offset: 23616},
													run: (*parser).callonDocumentHeader134,
													expr: &seqExpr{
														pos: position{line: 743, col: 5, offset: 23616},
														exprs: []any{
															&labeledExpr{
																pos:   position{line: 743, col: 5, offset: 23616},
																label: "delimiter",
																expr: &actionExpr{
																	pos: position{line: 743, col: 16, offset: 23627},
																	run: (*parser).callonDocumentHeader137,
																	expr: &seqExpr{
																		pos: position{line: 743, col: 16, offset: 23627},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 743, col: 16, offset: 23627},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 743, col: 23, offset: 23634},
																				expr: &litMatcher{
																					pos:        position{line: 743, col: 23, offset: 23634},
																					val:        "/",
																					ignoreCase: false,
																					want:       "\"/\"",
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 745, col: 8, offset: 23718},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonDocumentHeader143,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2919, col: 8, offset: 92130},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 2906, col: 12, offset: 91903},
																		run: (*parser).callonDocumentHeader146,
																		expr: &choiceExpr{
																			pos: position{line: 2906, col: 13, offset: 91904},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2906, col: 13, offset: 91904},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 20, offset: 91911},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 29, offset: 91920},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 824, col: 5, offset: 26387},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 834, col: 5, offset: 26673},
														expr: &actionExpr{
															pos: position{line: 834, col: 6, offset: 26674},
															run: (*parser).callonDocumentHeader155,
															expr: &seqExpr{
																pos: position{line: 834, col: 6, offset: 26674},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 834, col: 6, offset: 26674},
																		expr: &choiceExpr{
																			pos: position{line: 831, col: 29, offset: 26616},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 743, col: 5, offset: 23616},
																					run: (*parser).callonDocumentHeader159,
																					expr: &seqExpr{
																						pos: position{line: 743, col: 5, offset: 23616},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 743, col: 5, offset: 23616},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 743, col: 16, offset: 23627},
																									run: (*parser).callonDocumentHeader162,
																									expr: &seqExpr{
																										pos: position{line: 743, col: 16, offset: 23627},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 743, col: 16, offset: 23627},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 743, col: 23, offset: 23634},
																												expr: &litMatcher{
																													pos:        position{line: 743, col: 23, offset: 23634},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 745, col: 8, offset: 23718},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonDocumentHeader168,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonDocumentHeader171,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 835, col: 5, offset: 26704},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 814, col: 5, offset: 26120},
																			run: (*parser).callonDocumentHeader181,
																			expr: &seqExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 815, col: 5, offset: 26195},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2843, col: 13, offset: 90258},
																							run: (*parser).callonDocumentHeader186,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								expr: &charClassMatcher{
																									pos:        position{line: 2843, col: 13, offset: 90258},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonDocumentHeader190,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 825, col: 5, offset: 26421},
													expr: &choiceExpr{
														pos: position{line: 831, col: 29, offset: 26616},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 743, col: 5, offset: 23616},
																run: (*parser).callonDocumentHeader199,
																expr: &seqExpr{
																	pos: position{line: 743, col: 5, offset: 23616},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 743, col: 5, offset: 23616},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 743, col: 16, offset: 23627},
																				run: (*parser).callonDocumentHeader202,
																				expr: &seqExpr{
																					pos: position{line: 743, col: 16, offset: 23627},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 743, col: 16, offset: 23627},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 743, col: 23, offset: 23634},
																							expr: &litMatcher{
																								pos:        position{line: 743, col: 23, offset: 23634},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 745, col: 8, offset: 23718},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonDocumentHeader208,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonDocumentHeader211,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1110, col: 5, offset: 34059},
							label: "authorsAndRevision",
							expr: &zeroOrOneExpr{
								pos: position{line: 1110, col: 24, offset: 34078},
								expr: &actionExpr{
									pos: position{line: 1121, col: 5, offset: 34453},
									run: (*parser).callonDocumentHeader222,
									expr: &seqExpr{
										pos: position{line: 1121, col: 5, offset: 34453},
										exprs: []any{
											&notExpr{
												pos: position{line: 1121, col: 5, offset: 34453},
												expr: &litMatcher{
													pos:        position{line: 1121, col: 6, offset: 34454},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 1122, col: 5, offset: 34462},
												label: "authors",
												expr: &actionExpr{
													pos: position{line: 1128, col: 20, offset: 34718},
													run: (*parser).callonDocumentHeader227,
													expr: &seqExpr{
														pos: position{line: 1128, col: 20, offset: 34718},
														exprs: []any{
															&zeroOrMoreExpr{
																pos: position{line: 1128, col: 20, offset: 34718},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonDocumentHeader230,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1128, col: 27, offset: 34725},
																label: "authors",
																expr: &oneOrMoreExpr{
																	pos: position{line: 1128, col: 36, offset: 34734},
																	expr: &actionExpr{
																		pos: position{line: 1133, col: 5, offset: 34847},
																		run: (*parser).callonDocumentHeader234,
																		expr: &seqExpr{
																			pos: position{line: 1133, col: 5, offset: 34847},
																			exprs: []any{
																				&labeledExpr{
																					pos:   position{line: 1133, col: 5, offset: 34847},
																					label: "fullName",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 1133, col: 14, offset: 34856},
																						expr: &actionExpr{
																							pos: position{line: 1144, col: 5, offset: 35236},
																							run: (*parser).callonDocumentHeader238,
																							expr: &seqExpr{
																								pos: position{line: 1144, col: 5, offset: 35236},
																								exprs: []any{
																									&labeledExpr{
																										pos:   position{line: 1144, col: 5, offset: 35236},
																										label: "part1",
																										expr: &actionExpr{
																											pos: position{line: 1144, col: 12, offset: 35243},
																											run: (*parser).callonDocumentHeader241,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1144, col: 12, offset: 35243},
																												expr: &charClassMatcher{
																													pos:        position{line: 1144, col: 12, offset: 35243},
																													val:        "[^<;\\r\\n ]",
																													chars:      []rune{'<', ';', '\r', '\n', ' '},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1147, col: 5, offset: 35323},
																										expr: &actionExpr{
																											pos: position{line: 2897, col: 10, offset: 91732},
																											run: (*parser).callonDocumentHeader245,
																											expr: &charClassMatcher{
																												pos:        position{line: 2897, col: 10, offset: 91732},
																												val:        "[\\t ]",
																												chars:      []rune{'\t', ' '},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1148, col: 5, offset: 35334},
																										label: "part2",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 1148, col: 11, offset: 35340},
																											expr: &actionExpr{
																												pos: position{line: 1148, col: 12, offset: 35341},
																												run: (*parser).callonDocumentHeader249,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1148, col: 12, offset: 35341},
																													expr: &charClassMatcher{
																														pos:        position{line: 1148, col: 12, offset: 35341},
																														val:        "[^<;\\r\\n ]",
																														chars:      []rune{'<', ';', '\r', '\n', ' '},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1151, col: 5, offset: 35422},
																										expr: &actionExpr{
																											pos: position{line: 2897, col: 10, offset: 91732},
																											run: (*parser).callonDocumentHeader253,
																											expr: &charClassMatcher{
																												pos:        position{line: 2897, col: 10, offset: 91732},
																												val:        "[\\t ]",
																												chars:      []rune{'\t', ' '},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1152, col: 5, offset: 35433},
																										label: "part3",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 1152, col: 11, offset: 35439},
																											expr: &actionExpr{
																												pos: position{line: 1152, col: 12, offset: 35440},
																												run: (*parser).callonDocumentHeader257,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1152, col: 12, offset: 35440},
																													expr: &charClassMatcher{
																														pos:        position{line: 1152, col: 12, offset: 35440},
																														val:        "[^<;\\r\\n]",
																														chars:      []rune{'<', ';', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1155, col: 5, offset: 35519},
																										expr: &actionExpr{
																											pos: position{line: 2897, col: 10, offset: 91732},
																											run: (*parser).callonDocumentHeader261,
																											expr: &charClassMatcher{
																												pos:        position{line: 2897, col: 10, offset: 91732},
																												val:        "[\\t ]",
																												chars:      []rune{'\t', ' '},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1133, col: 40, offset: 34882},
																					label: "email",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 1133, col: 46, offset: 34888},
																						expr: &actionExpr{
																							pos: position{line: 1161, col: 5, offset: 35641},
																							run: (*parser).callonDocumentHeader265,
																							expr: &seqExpr{
																								pos: position{line: 1161, col: 5, offset: 35641},
																								exprs: []any{
																									&andExpr{
																										pos: position{line: 2914, col: 11, offset: 92066},
																										expr: &anyMatcher{
																											line: 2914, col: 13, offset: 92068,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1162, col: 5, offset: 35653},
																										val:        "<",
																										ignoreCase: false,
																										want:       "\"<\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 1163, col: 5, offset: 35662},
																										label: "email",
																										expr: &actionExpr{
																											pos: position{line: 1163, col: 12, offset: 35669},
																											run: (*parser).callonDocumentHeader271,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1163, col: 13, offset: 35670},
																												expr: &charClassMatcher{
																													pos:        position{line: 1163, col: 13, offset: 35670},
																													val:        "[^>\\r\\n]",
																													chars:      []rune{'>', '\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1166, col: 5, offset: 35730},
																										val:        ">",
																										ignoreCase: false,
																										want:       "\">\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1133, col: 69, offset: 34911},
																					expr: &actionExpr{
																						pos: position{line: 2897, col: 10, offset: 91732},
																						run: (*parser).callonDocumentHeader276,
																						expr: &charClassMatcher{
																							pos:        position{line: 2897, col: 10, offset: 91732},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 1133, col: 76, offset: 34918},
																					expr: &litMatcher{
																						pos:        position{line: 1133, col: 76, offset: 34918},
																						val:        ";",
																						ignoreCase: false,
																						want:       "\";\"",
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1133, col: 81, offset: 34923},
																					expr: &actionExpr{
																						pos: position{line: 2897, col: 10, offset: 91732},
																						run: (*parser).callonDocumentHeader281,
																						expr: &charClassMatcher{
																							pos:        position{line: 2897, col: 10, offset: 91732},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1134, col: 5, offset: 34935},
																					run: (*parser).callonDocumentHeader283,
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2919, col: 8, offset: 92130},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 2906, col: 12, offset: 91903},
																		run: (*parser).callonDocumentHeader285,
																		expr: &choiceExpr{
																			pos: position{line: 2906, col: 13, offset: 91904},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2906, col: 13, offset: 91904},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 20, offset: 91911},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 29, offset: 91920},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1123, col: 5, offset: 34492},
												expr: &choiceExpr{
													pos: position{line: 1123, col: 6, offset: 34493},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2465, col: 22, offset: 79256},
															run: (*parser).callonDocumentHeader294,
															expr: &seqExpr{
																pos: position{line: 2465, col: 22, offset: 79256},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2470, col: 31, offset: 79477},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2470, col: 36, offset: 79482},
																		expr: &litMatcher{
																			pos:        position{line: 2470, col: 37, offset: 79483},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2465, col: 49, offset: 79283},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2843, col: 13, offset: 90258},
																			run: (*parser).callonDocumentHeader300,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2843, col: 13, offset: 90258},
																				expr: &charClassMatcher{
																					pos:        position{line: 2843, col: 13, offset: 90258},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonDocumentHeader304,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 823, col: 5, offset: 26356},
															run: (*parser).callonDocumentHeader311,
															expr: &seqExpr{
																pos: position{line: 823, col: 5, offset: 26356},
																exprs: []any{
																	&actionExpr{
																		pos: position{line: 743, col: 5, offset: 23616},
																		run: (*parser).callonDocumentHeader313,
																		expr: &seqExpr{
																			pos: position{line: 743, col: 5, offset: 23616},
																			exprs: []any{
																				&labeledExpr{
																					pos:   position{line: 743, col: 5, offset: 23616},
																					label: "delimiter",
																					expr: &actionExpr{
																						pos: position{line: 743, col: 16, offset: 23627},
																						run: (*parser).callonDocumentHeader316,
																						expr: &seqExpr{
																							pos: position{line: 743, col: 16, offset: 23627},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 743, col: 16, offset: 23627},
																									val:        "////",
																									ignoreCase: false,
																									want:       "\"////\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 743, col: 23, offset: 23634},
																									expr: &litMatcher{
																										pos:        position{line: 743, col: 23, offset: 23634},
																										val:        "/",
																										ignoreCase: false,
																										want:       "\"/\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 745, col: 8, offset: 23718},
																					expr: &actionExpr{
																						pos: position{line: 2897, col: 10, offset: 91732},
																						run: (*parser).callonDocumentHeader322,
																						expr: &charClassMatcher{
																							pos:        position{line: 2897, col: 10, offset: 91732},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2919, col: 8, offset: 92130},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2906, col: 12, offset: 91903},
																							run: (*parser).callonDocumentHeader325,
																							expr: &choiceExpr{
																								pos: position{line: 2906, col: 13, offset: 91904},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2906, col: 13, offset: 91904},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 20, offset: 91911},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 29, offset: 91920},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2916, col: 8, offset: 92080},
																							expr: &anyMatcher{
																								line: 2916, col: 9, offset: 92081,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 824, col: 5, offset: 26387},
																		label: "content",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 834, col: 5, offset: 26673},
																			expr: &actionExpr{
																				pos: position{line: 834, col: 6, offset: 26674},
																				run: (*parser).callonDocumentHeader334,
																				expr: &seqExpr{
																					pos: position{line: 834, col: 6, offset: 26674},
																					exprs: []any{
																						&notExpr{
																							pos: position{line: 834, col: 6, offset: 26674},
																							expr: &choiceExpr{
																								pos: position{line: 831, col: 29, offset: 26616},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 743, col: 5, offset: 23616},
																										run: (*parser).callonDocumentHeader338,
																										expr: &seqExpr{
																											pos: position{line: 743, col: 5, offset: 23616},
																											exprs: []any{
																												&labeledExpr{
																													pos:   position{line: 743, col: 5, offset: 23616},
																													label: "delimiter",
																													expr: &actionExpr{
																														pos: position{line: 743, col: 16, offset: 23627},
																														run: (*parser).callonDocumentHeader341,
																														expr: &seqExpr{
																															pos: position{line: 743, col: 16, offset: 23627},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 743, col: 16, offset: 23627},
																																	val:        "////",
																																	ignoreCase: false,
																																	want:       "\"////\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 743, col: 23, offset: 23634},
																																	expr: &litMatcher{
																																		pos:        position{line: 743, col: 23, offset: 23634},
																																		val:        "/",
																																		ignoreCase: false,
																																		want:       "\"/\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 745, col: 8, offset: 23718},
																													expr: &actionExpr{
																														pos: position{line: 2897, col: 10, offset: 91732},
																														run: (*parser).callonDocumentHeader347,
																														expr: &charClassMatcher{
																															pos:        position{line: 2897, col: 10, offset: 91732},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2919, col: 8, offset: 92130},
																													alternatives: []any{
																														&actionExpr{
																															pos: position{line: 2906, col: 12, offset: 91903},
																															run: (*parser).callonDocumentHeader350,
																															expr: &choiceExpr{
																																pos: position{line: 2906, col: 13, offset: 91904},
																																alternatives: []any{
																																	&litMatcher{
																																		pos:        position{line: 2906, col: 13, offset: 91904},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2906, col: 20, offset: 91911},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2906, col: 29, offset: 91920},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2916, col: 8, offset: 92080},
																															expr: &anyMatcher{
																																line: 2916, col: 9, offset: 92081,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 835, col: 5, offset: 26704},
																							label: "line",
																							expr: &actionExpr{
																								pos: position{line: 814, col: 5, offset: 26120},
																								run: (*parser).callonDocumentHeader360,
																								expr: &seqExpr{
																									pos: position{line: 814, col: 5, offset: 26120},
																									exprs: []any{
																										&andExpr{
																											pos: position{line: 2914, col: 11, offset: 92066},
																											expr: &anyMatcher{
																												line: 2914, col: 13, offset: 92068,
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 815, col: 5, offset: 26195},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 2843, col: 13, offset: 90258},
																												run: (*parser).callonDocumentHeader365,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 2843, col: 13, offset: 90258},
																													expr: &charClassMatcher{
																														pos:        position{line: 2843, col: 13, offset: 90258},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonDocumentHeader369,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 825, col: 5, offset: 26421},
																		expr: &choiceExpr{
																			pos: position{line: 831, col: 29, offset: 26616},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 743, col: 5, offset: 23616},
																					run: (*parser).callonDocumentHeader378,
																					expr: &seqExpr{
																						pos: position{line: 743, col: 5, offset: 23616},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 743, col: 5, offset: 23616},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 743, col: 16, offset: 23627},
																									run: (*parser).callonDocumentHeader381,
																									expr: &seqExpr{
																										pos: position{line: 743, col: 16, offset: 23627},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 743, col: 16, offset: 23627},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 743, col: 23, offset: 23634},
																												expr: &litMatcher{
																													pos:        position{line: 743, col: 23, offset: 23634},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 745, col: 8, offset: 23718},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonDocumentHeader387,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonDocumentHeader390,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1124, col: 5, offset: 34567},
												label: "revision",
												expr: &zeroOrOneExpr{
													pos: position{line: 1124, col: 14, offset: 34576},
													expr: &actionExpr{
														pos: position{line: 1172, col: 21, offset: 35919},
														run: (*parser).callonDocumentHeader401,
														expr: &seqExpr{
															pos: position{line: 1172, col: 21, offset: 35919},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 1172, col: 21, offset: 35919},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonDocumentHeader404,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1172, col: 28, offset: 35926},
																	expr: &litMatcher{
																		pos:        position{line: 1172, col: 29, offset: 35927},
																		val:        ":",
																		ignoreCase: false,
																		want:       "\":\"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1172, col: 33, offset: 35931},
																	label: "revision",
																	expr: &choiceExpr{
																		pos: position{line: 1173, col: 9, offset: 35950},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 1173, col: 10, offset: 35951},
																				run: (*parser).callonDocumentHeader410,
																				expr: &seqExpr{
																					pos: position{line: 1173, col: 10, offset: 35951},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1173, col: 10, offset: 35951},
																							label: "revnumber",
																							expr: &choiceExpr{
																								pos: position{line: 1182, col: 27, offset: 36468},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 1182, col: 27, offset: 36468},
																										run: (*parser).callonDocumentHeader414,
																										expr: &seqExpr{
																											pos: position{line: 1182, col: 27, offset: 36468},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 1182, col: 27, offset: 36468},
																													val:        "v",
																													ignoreCase: true,
																													want:       "\"v\"i",
																												},
																												&charClassMatcher{
																													pos:        position{line: 1182, col: 32, offset: 36473},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 1182, col: 38, offset: 36479},
																													expr: &charClassMatcher{
																														pos:        position{line: 1182, col: 38, offset: 36479},
																														val:        "[^:,\\r\\n]",
																														chars:      []rune{':', ',', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1184, col: 5, offset: 36527},
																										run: (*parser).callonDocumentHeader420,
																										expr: &seqExpr{
																											pos: position{line: 1184, col: 5, offset: 36527},
																											exprs: []any{
																												&zeroOrOneExpr{
																													pos: position{line: 1184, col: 5, offset: 36527},
																													expr: &litMatcher{
																														pos:        position{line: 1184, col: 5, offset: 36527},
																														val:        "v",
																														ignoreCase: true,
																														want:       "\"v\"i",
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 1184, col: 11, offset: 36533},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 1184, col: 17, offset: 36539},
																													expr: &charClassMatcher{
																														pos:        position{line: 1184, col: 17, offset: 36539},
																														val:        "[^:,\\r\\n]",
																														chars:      []rune{':', ',', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1184, col: 28, offset: 36550},
																													expr: &actionExpr{
																														pos: position{line: 2897, col: 10, offset: 91732},
																														run: (*parser).callonDocumentHeader428,
																														expr: &charClassMatcher{
																															pos:        position{line: 2897, col: 10, offset: 91732},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 1184, col: 35, offset: 36557},
																													expr: &litMatcher{
																														pos:        position{line: 1184, col: 36, offset: 36558},
																														val:        ",",
																														ignoreCase: false,
																														want:       "\",\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 1173, col: 45, offset: 35986},
																							expr: &litMatcher{
																								pos:        position{line: 1173, col: 45, offset: 35986},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1173, col: 50, offset: 35991},
																							label: "revdate",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1173, col: 58, offset: 35999},
																								expr: &actionExpr{
																									pos: position{line: 1188, col: 25, offset: 36622},
																									run: (*parser).callonDocumentHeader436,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1188, col: 25, offset: 36622},
																										expr: &charClassMatcher{
																											pos:        position{line: 1188, col: 25, offset: 36622},
																											val:        "[^:\\r\\n]",
																											chars:      []rune{':', '\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 1173, col: 82, offset: 36023},
																							expr: &litMatcher{
																								pos:        position{line: 1173, col: 82, offset: 36023},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1173, col: 87, offset: 36028},
																							label: "revremark",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1173, col: 97, offset: 36038},
																								expr: &actionExpr{
																									pos: position{line: 1192, col: 27, offset: 36694},
																									run: (*parser).callonDocumentHeader443,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1192, col: 27, offset: 36694},
																										expr: &charClassMatcher{
																											pos:        position{line: 1192, col: 27, offset: 36694},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1175, col: 15, offset: 36156},
																				run: (*parser).callonDocumentHeader446,
																				expr: &seqExpr{
																					pos: position{line: 1175, col: 15, offset: 36156},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1175, col: 15, offset: 36156},
																							label: "revdate",
																							expr: &actionExpr{
																								pos: position{line: 1188, col: 25, offset: 36622},
																								run: (*parser).callonDocumentHeader449,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1188, col: 25, offset: 36622},
																									expr: &charClassMatcher{
																										pos:        position{line: 1188, col: 25, offset: 36622},
																										val:        "[^:\\r\\n]",
																										chars:      []rune{':', '\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 1175, col: 46, offset: 36187},
																							expr: &litMatcher{
																								pos:        position{line: 1175, col: 46, offset: 36187},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1175, col: 51, offset: 36192},
																							label: "revremark",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1175, col: 61, offset: 36202},
																								expr: &actionExpr{
																									pos: position{line: 1192, col: 27, offset: 36694},
																									run: (*parser).callonDocumentHeader456,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1192, col: 27, offset: 36694},
																										expr: &charClassMatcher{
																											pos:        position{line: 1192, col: 27, offset: 36694},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonDocumentHeader460,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1111, col: 5, offset: 34113},
							label: "extraElements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1111, col: 19, offset: 34127},
								expr: &choiceExpr{
									pos: position{line: 1111, col: 20, offset: 34128},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 1111, col: 20, offset: 34128},
											name: "AttributeDeclaration",
										},
										&actionExpr{
											pos: position{line: 363, col: 19, offset: 10942},
											run: (*parser).callonDocumentHeader471,
											expr: &seqExpr{
												pos: position{line: 363, col: 19, offset: 10942},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 363, col: 19, offset: 10942},
														val:        ":!",
														ignoreCase: false,
														want:       "\":!\"",
													},
													&labeledExpr{
														pos:   position{line: 363, col: 24, offset: 10947},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 321, col: 18, offset: 9768},
															run: (*parser).callonDocumentHeader475,
															expr: &seqExpr{
																pos: position{line: 321, col: 18, offset: 9768},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 321, col: 18, offset: 9768},
																		val:        "[_\\pL\\pN]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 321, col: 28, offset: 9778},
																		expr: &charClassMatcher{
																			pos:        position{line: 321, col: 29, offset: 9779},
																			val:        "[-\\pL\\pN]",
																			chars:      []rune{'-'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 363, col: 45, offset: 10968},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 363, col: 49, offset: 10972},
														expr: &actionExpr{
															pos: position{line: 2897, col: 10, offset: 91732},
															run: (*parser).callonDocumentHeader482,
															expr: &charClassMatcher{
																pos:        position{line: 2897, col: 10, offset: 91732},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2919, col: 8, offset: 92130},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonDocumentHeader485,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 365, col: 9, offset: 11063},
											run: (*parser).callonDocumentHeader492,
											expr: &seqExpr{
												pos: position{line: 365, col: 9, offset: 11063},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 365, col: 9, offset: 11063},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&labeledExpr{
														pos:   position{line: 365, col: 13, offset: 11067},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 321, col: 18, offset: 9768},
															run: (*parser).callonDocumentHeader496,
															expr: &seqExpr{
																pos: position{line: 321, col: 18, offset: 9768},
																exprs: []any{
																	&charClassMatcher{
																		pos:        position{line: 321, col: 18, offset: 9768},
																		val:        "[_\\pL\\pN]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 321, col: 28, offset: 9778},
																		expr: &charClassMatcher{
																			pos:        position{line: 321, col: 29, offset: 9779},
																			val:        "[-\\pL\\pN]",
																			chars:      []rune{'-'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 365, col: 34, offset: 11088},
														val:        "!:",
														ignoreCase: false,
														want:       "\"!:\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 365, col: 39, offset: 11093},
														expr: &actionExpr{
															pos: position{line: 2897, col: 10, offset: 91732},
															run: (*parser).callonDocumentHeader503,
															expr: &charClassMatcher{
																pos:        position{line: 2897, col: 10, offset: 91732},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2919, col: 8, offset: 92130},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonDocumentHeader506,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2465, col: 22, offset: 79256},
											run: (*parser).callonDocumentHeader513,
											expr: &seqExpr{
												pos: position{line: 2465, col: 22, offset: 79256},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 2470, col: 31, offset: 79477},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
													&notExpr{
														pos: position{line: 2470, col: 36, offset: 79482},
														expr: &litMatcher{
															pos:        position{line: 2470, col: 37, offset: 79483},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
													},
													&labeledExpr{
														pos:   position{line: 2465, col: 49, offset: 79283},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2843, col: 13, offset: 90258},
															run: (*parser).callonDocumentHeader519,
															expr: &zeroOrMoreExpr{
																pos: position{line: 2843, col: 13, offset: 90258},
																expr: &charClassMatcher{
																	pos:        position{line: 2843, col: 13, offset: 90258},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2919, col: 8, offset: 92130},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonDocumentHeader523,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 823, col: 5, offset: 26356},
											run: (*parser).callonDocumentHeader530,
											expr: &seqExpr{
												pos: position{line: 823, col: 5, offset: 26356},
												exprs: []any{
													&actionExpr{
														pos: position{line: 743, col: 5, offset: 23616},
														run: (*parser).callonDocumentHeader532,
														expr: &seqExpr{
															pos: position{line: 743, col: 5, offset: 23616},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 743, col: 5, offset: 23616},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 743, col: 16, offset: 23627},
																		run: (*parser).callonDocumentHeader535,
																		expr: &seqExpr{
																			pos: position{line: 743, col: 16, offset: 23627},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 743, col: 16, offset: 23627},
																					val:        "////",
																					ignoreCase: false,
																					want:       "\"////\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 743, col: 23, offset: 23634},
																					expr: &litMatcher{
																						pos:        position{line: 743, col: 23, offset: 23634},
																						val:        "/",
																						ignoreCase: false,
																						want:       "\"/\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 745, col: 8, offset: 23718},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonDocumentHeader541,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonDocumentHeader544,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 824, col: 5, offset: 26387},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 834, col: 5, offset: 26673},
															expr: &actionExpr{
																pos: position{line: 834, col: 6, offset: 26674},
																run: (*parser).callonDocumentHeader553,
																expr: &seqExpr{
																	pos: position{line: 834, col: 6, offset: 26674},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 834, col: 6, offset: 26674},
																			expr: &choiceExpr{
																				pos: position{line: 831, col: 29, offset: 26616},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 743, col: 5, offset: 23616},
																						run: (*parser).callonDocumentHeader557,
																						expr: &seqExpr{
																							pos: position{line: 743, col: 5, offset: 23616},
																							exprs: []any{
																								&labeledExpr{
																									pos:   position{line: 743, col: 5, offset: 23616},
																									label: "delimiter",
																									expr: &actionExpr{
																										pos: position{line: 743, col: 16, offset: 23627},
																										run: (*parser).callonDocumentHeader560,
																										expr: &seqExpr{
																											pos: position{line: 743, col: 16, offset: 23627},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 743, col: 16, offset: 23627},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 743, col: 23, offset: 23634},
																													expr: &litMatcher{
																														pos:        position{line: 743, col: 23, offset: 23634},
																														val:        "/",
																														ignoreCase: false,
																														want:       "\"/\"",
																													},
																												},
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 745, col: 8, offset: 23718},
																									expr: &actionExpr{
																										pos: position{line: 2897, col: 10, offset: 91732},
																										run: (*parser).callonDocumentHeader566,
																										expr: &charClassMatcher{
																											pos:        position{line: 2897, col: 10, offset: 91732},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2919, col: 8, offset: 92130},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2906, col: 12, offset: 91903},
																											run: (*parser).callonDocumentHeader569,
																											expr: &choiceExpr{
																												pos: position{line: 2906, col: 13, offset: 91904},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2906, col: 13, offset: 91904},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 20, offset: 91911},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 29, offset: 91920},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2916, col: 8, offset: 92080},
																											expr: &anyMatcher{
																												line: 2916, col: 9, offset: 92081,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 835, col: 5, offset: 26704},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				run: (*parser).callonDocumentHeader579,
																				expr: &seqExpr{
																					pos: position{line: 814, col: 5, offset: 26120},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 815, col: 5, offset: 26195},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								run: (*parser).callonDocumentHeader584,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2843, col: 13, offset: 90258},
																									expr: &charClassMatcher{
																										pos:        position{line: 2843, col: 13, offset: 90258},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonDocumentHeader588,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 825, col: 5, offset: 26421},
														expr: &choiceExpr{
															pos: position{line: 831, col: 29, offset: 26616},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 743, col: 5, offset: 23616},
																	run: (*parser).callonDocumentHeader597,
																	expr: &seqExpr{
																		pos: position{line: 743, col: 5, offset: 23616},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 743, col: 5, offset: 23616},
																				label: "delimiter",
																				expr: &actionExpr{
																					pos: position{line: 743, col: 16, offset: 23627},
																					run: (*parser).callonDocumentHeader600,
																					expr: &seqExpr{
																						pos: position{line: 743, col: 16, offset: 23627},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 743, col: 16, offset: 23627},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 743, col: 23, offset: 23634},
																								expr: &litMatcher{
																									pos:        position{line: 743, col: 23, offset: 23634},
																									val:        "/",
																									ignoreCase: false,
																									want:       "\"/\"",
																								},
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 745, col: 8, offset: 23718},
																				expr: &actionExpr{
																					pos: position{line: 2897, col: 10, offset: 91732},
																					run: (*parser).callonDocumentHeader606,
																					expr: &charClassMatcher{
																						pos:        position{line: 2897, col: 10, offset: 91732},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2919, col: 8, offset: 92130},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 2906, col: 12, offset: 91903},
																						run: (*parser).callonDocumentHeader609,
																						expr: &choiceExpr{
																							pos: position{line: 2906, col: 13, offset: 91904},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2906, col: 13, offset: 91904},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2906, col: 20, offset: 91911},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2906, col: 29, offset: 91920},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2916, col: 8, offset: 92080},
																	expr: &anyMatcher{
																		line: 2916, col: 9, offset: 92081,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 1115, col: 1, offset: 34325},
			expr: &actionExpr{
				pos: position{line: 1116, col: 5, offset: 34347},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 5, offset: 34347},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1116, col: 5, offset: 34347},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&actionExpr{
							pos: position{line: 2901, col: 11, offset: 91793},
							run: (*parser).callonDocumentTitle4,
							expr: &oneOrMoreExpr{
								pos: position{line: 2901, col: 11, offset: 91793},
								expr: &charClassMatcher{
									pos:        position{line: 2901, col: 11, offset: 91793},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1116, col: 16, offset: 34358},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 23, offset: 34365},
								name: "SectionTitle",
							},
						},
						&choiceExpr{
							pos: position{line: 2919, col: 8, offset: 92130},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 2906, col: 12, offset: 91903},
									run: (*parser).callonDocumentTitle10,
									expr: &choiceExpr{
										pos: position{line: 2906, col: 13, offset: 91904},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2906, col: 13, offset: 91904},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 20, offset: 91911},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 29, offset: 91920},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2916, col: 8, offset: 92080},
									expr: &anyMatcher{
										line: 2916, col: 9, offset: 92081,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorFullName",
			pos:  position{line: 1143, col: 1, offset: 35205},
			expr: &actionExpr{
				pos: position{line: 1144, col: 5, offset: 35236},
				run: (*parser).callonDocumentAuthorFullName1,
				expr: &seqExpr{
					pos: position{line: 1144, col: 5, offset: 35236},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1144, col: 5, offset: 35236},
							label: "part1",
							expr: &actionExpr{
								pos: position{line: 1144, col: 12, offset: 35243},
								run: (*parser).callonDocumentAuthorFullName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1144, col: 12, offset: 35243},
									expr: &charClassMatcher{
										pos:        position{line: 1144, col: 12, offset: 35243},
										val:        "[^<;\\r\\n ]",
										chars:      []rune{'<', ';', '\r', '\n', ' '},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1147, col: 5, offset: 35323},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonDocumentAuthorFullName8,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1148, col: 5, offset: 35334},
							label: "part2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1148, col: 11, offset: 35340},
								expr: &actionExpr{
									pos: position{line: 1148, col: 12, offset: 35341},
									run: (*parser).callonDocumentAuthorFullName12,
									expr: &oneOrMoreExpr{
										pos: position{line: 1148, col: 12, offset: 35341},
										expr: &charClassMatcher{
											pos:        position{line: 1148, col: 12, offset: 35341},
											val:        "[^<;\\r\\n ]",
											chars:      []rune{'<', ';', '\r', '\n', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1151, col: 5, offset: 35422},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonDocumentAuthorFullName16,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1152, col: 5, offset: 35433},
							label: "part3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1152, col: 11, offset: 35439},
								expr: &actionExpr{
									pos: position{line: 1152, col: 12, offset: 35440},
									run: (*parser).callonDocumentAuthorFullName20,
									expr: &oneOrMoreExpr{
										pos: position{line: 1152, col: 12, offset: 35440},
										expr: &charClassMatcher{
											pos:        position{line: 1152, col: 12, offset: 35440},
											val:        "[^<;\\r\\n]",
											chars:      []rune{'<', ';', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1155, col: 5, offset: 35519},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonDocumentAuthorFullName24,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineButton",
			pos:  position{line: 1268, col: 1, offset: 39248},
			expr: &actionExpr{
				pos: position{line: 1269, col: 5, offset: 39269},
				run: (*parser).callonInlineButton1,
				expr: &seqExpr{
					pos: position{line: 1269, col: 5, offset: 39269},
					exprs: []any{
						&andCodeExpr{
							pos: position{line: 1269, col: 5, offset: 39269},
							run: (*parser).callonInlineButton3,
						},
						&litMatcher{
							pos:        position{line: 1272, col: 5, offset: 39328},
							val:        "btn:",
							ignoreCase: false,
							want:       "\"btn:\"",
						},
						&labeledExpr{
							pos:   position{line: 1272, col: 12, offset: 39335},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1272, col: 24, offset: 39347},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMenu",
			pos:  position{line: 1279, col: 1, offset: 39635},
			expr: &actionExpr{
				pos: position{line: 1280, col: 5, offset: 39654},
				run: (*parser).callonInlineMenu1,
				expr: &seqExpr{
					pos: position{line: 1280, col: 5, offset: 39654},
					exprs: []any{
						&andCodeExpr{
							pos: position{line: 1280, col: 5, offset: 39654},
							run: (*parser).callonInlineMenu3,
						},
						&litMatcher{
							pos:        position{line: 1283, col: 5, offset: 39713},
							val:        "menu:",
							ignoreCase: false,
							want:       "\"menu:\"",
						},
						&labeledExpr{
							pos:   position{line: 1283, col: 13, offset: 39721},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 2882, col: 7, offset: 91384},
								run: (*parser).callonInlineMenu6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2882, col: 7, offset: 91384},
									expr: &charClassMatcher{
										pos:        position{line: 2882, col: 7, offset: 91384},
										val:        "[^[]<>,]",
										chars:      []rune{'[', ']', '<', '>', ','},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1283, col: 21, offset: 39729},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1283, col: 33, offset: 39741},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1290, col: 1, offset: 40040},
			expr: &actionExpr{
				pos: position{line: 1290, col: 14, offset: 40053},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1290, col: 14, offset: 40053},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1290, col: 14, offset: 40053},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1290, col: 19, offset: 40058},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1290, col: 25, offset: 40064},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1290, col: 43, offset: 40082},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1294, col: 1, offset: 40151},
			expr: &actionExpr{
				pos: position{line: 1294, col: 21, offset: 40171},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1294, col: 21, offset: 40171},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1294, col: 30, offset: 40180},
						expr: &choiceExpr{
							pos: position{line: 1294, col: 31, offset: 40181},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 2791, col: 14, offset: 88901},
									run: (*parser).callonIndexTermContent5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2791, col: 14, offset: 88901},
										expr: &charClassMatcher{
											pos:        position{line: 2791, col: 14, offset: 88901},
											val:        "[\\pL\\pN]",
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1294, col: 43, offset: 40193},
									name: "QuotedText",
								},
								&actionExpr{
									pos: position{line: 2897, col: 10, offset: 91732},
									run: (*parser).callonIndexTermContent9,
									expr: &charClassMatcher{
										pos:        position{line: 2897, col: 10, offset: 91732},
										val:        "[\\t ]",
										chars:      []rune{'\t', ' '},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&actionExpr{
									pos: position{line: 2452, col: 5, offset: 78802},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2452, col: 5, offset: 78802},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 2452, col: 5, offset: 78802},
												run: (*parser).callonIndexTermContent13,
											},
											&labeledExpr{
												pos:   position{line: 2455, col: 5, offset: 78878},
												label: "element",
												expr: &actionExpr{
													pos: position{line: 2456, col: 9, offset: 78896},
													run: (*parser).callonIndexTermContent15,
													expr: &charClassMatcher{
														pos:        position{line: 2456, col: 10, offset: 78897},
														val:        "[<>&]",
														chars:      []rune{'<', '>', '&'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1201, col: 23, offset: 37004},
									run: (*parser).callonIndexTermContent17,
									expr: &seqExpr{
										pos: position{line: 1201, col: 23, offset: 37004},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1199, col: 32, offset: 36972},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1201, col: 51, offset: 37032},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1201, col: 56, offset: 37037},
													run: (*parser).callonIndexTermContent21,
													expr: &oneOrMoreExpr{
														pos: position{line: 1201, col: 56, offset: 37037},
														expr: &charClassMatcher{
															pos:        position{line: 1201, col: 56, offset: 37037},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1199, col: 32, offset: 36972},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1294, col: 104, offset: 40254},
									run: (*parser).callonIndexTermContent25,
									expr: &seqExpr{
										pos: position{line: 1294, col: 105, offset: 40255},
										exprs: []any{
											&notExpr{
												pos: position{line: 1294, col: 105, offset: 40255},
												expr: &litMatcher{
													pos:        position{line: 1294, col: 106, offset: 40256},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1294, col: 111, offset: 40261,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1314, col: 1, offset: 40970},
			expr: &actionExpr{
				pos: position{line: 1315, col: 5, offset: 40989},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1315, col: 5, offset: 40989},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1315, col: 5, offset: 40989},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1315, col: 15, offset: 40999},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2855, col: 13, offset: 90491},
								run: (*parser).callonImageBlock5,
								expr: &seqExpr{
									pos: position{line: 2855, col: 13, offset: 90491},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 2855, col: 13, offset: 90491},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2855, col: 20, offset: 90498},
												expr: &actionExpr{
													pos: position{line: 2863, col: 11, offset: 90737},
													run: (*parser).callonImageBlock9,
													expr: &choiceExpr{
														pos: position{line: 2863, col: 12, offset: 90738},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2863, col: 12, offset: 90738},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 2863, col: 24, offset: 90750},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 2863, col: 37, offset: 90763},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 2863, col: 48, offset: 90774},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 2863, col: 59, offset: 90785},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2855, col: 30, offset: 90508},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 2868, col: 5, offset: 90849},
												run: (*parser).callonImageBlock17,
												expr: &labeledExpr{
													pos:   position{line: 2868, col: 5, offset: 90849},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 2868, col: 14, offset: 90858},
														expr: &choiceExpr{
															pos: position{line: 2869, col: 9, offset: 90868},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 2869, col: 9, offset: 90868},
																	run: (*parser).callonImageBlock21,
																	expr: &seqExpr{
																		pos: position{line: 2869, col: 9, offset: 90868},
																		exprs: []any{
																			&notExpr{
																				pos: position{line: 2869, col: 9, offset: 90868},
																				expr: &litMatcher{
																					pos:        position{line: 2869, col: 10, offset: 90869},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 2870, col: 9, offset: 90897},
																				expr: &charClassMatcher{
																					pos:        position{line: 2870, col: 10, offset: 90898},
																					val:        "[^\\r\\n[]�{,;?!.<> ]",
																					chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '.', '<', '>', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2873, col: 11, offset: 91110},
																	exprs: []any{
																		&charClassMatcher{
																			pos:        position{line: 2873, col: 11, offset: 91110},
																			val:        "[,;?!.]",
																			chars:      []rune{',', ';', '?', '!', '.'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&andExpr{
																			pos: position{line: 2873, col: 19, offset: 91118},
																			expr: &seqExpr{
																				pos: position{line: 2873, col: 21, offset: 91120},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2873, col: 21, offset: 91120},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonImageBlock32,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2873, col: 28, offset: 91127},
																						expr: &notExpr{
																							pos: position{line: 2916, col: 8, offset: 92080},
																							expr: &anyMatcher{
																								line: 2916, col: 9, offset: 92081,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 639, col: 5, offset: 20141},
																	run: (*parser).callonImageBlock37,
																	expr: &seqExpr{
																		pos: position{line: 639, col: 5, offset: 20141},
																		exprs: []any{
																			&andCodeExpr{
																				pos: position{line: 639, col: 5, offset: 20141},
																				run: (*parser).callonImageBlock39,
																			},
																			&labeledExpr{
																				pos:   position{line: 642, col: 5, offset: 20213},
																				label: "element",
																				expr: &choiceExpr{
																					pos: position{line: 642, col: 14, offset: 20222},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 648, col: 5, offset: 20351},
																							run: (*parser).callonImageBlock42,
																							expr: &seqExpr{
																								pos: position{line: 648, col: 5, offset: 20351},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 648, col: 5, offset: 20351},
																										val:        "\\{",
																										ignoreCase: false,
																										want:       "\"\\\\{\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 648, col: 13, offset: 20359},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											run: (*parser).callonImageBlock46,
																											expr: &seqExpr{
																												pos: position{line: 321, col: 18, offset: 9768},
																												exprs: []any{
																													&charClassMatcher{
																														pos:        position{line: 321, col: 18, offset: 9768},
																														val:        "[_\\pL\\pN]",
																														chars:      []rune{'_'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 321, col: 28, offset: 9778},
																														expr: &charClassMatcher{
																															pos:        position{line: 321, col: 29, offset: 9779},
																															val:        "[-\\pL\\pN]",
																															chars:      []rune{'-'},
																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 648, col: 32, offset: 20378},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 655, col: 5, offset: 20619},
																							run: (*parser).callonImageBlock52,
																							expr: &seqExpr{
																								pos: position{line: 655, col: 5, offset: 20619},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 655, col: 5, offset: 20619},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 655, col: 9, offset: 20623},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											run: (*parser).callonImageBlock56,
																											expr: &seqExpr{
																												pos: position{line: 321, col: 18, offset: 9768},
																												exprs: []any{
																													&charClassMatcher{
																														pos:        position{line: 321, col: 18, offset: 9768},
																														val:        "[_\\pL\\pN]",
																														chars:      []rune{'_'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 321, col: 28, offset: 9778},
																														expr: &charClassMatcher{
																															pos:        position{line: 321, col: 29, offset: 9779},
																															val:        "[-\\pL\\pN]",
																															chars:      []rune{'-'},
																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 655, col: 28, offset: 20642},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 661, col: 25, offset: 20823},
																							run: (*parser).callonImageBlock62,
																							expr: &seqExpr{
																								pos: position{line: 661, col: 25, offset: 20823},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 661, col: 25, offset: 20823},
																										val:        "{counter:",
																										ignoreCase: false,
																										want:       "\"{counter:\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 661, col: 37, offset: 20835},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											run: (*parser).callonImageBlock66,
																											expr: &seqExpr{
																												pos: position{line: 321, col: 18, offset: 9768},
																												exprs: []any{
																													&charClassMatcher{
																														pos:        position{line: 321, col: 18, offset: 9768},
																														val:        "[_\\pL\\pN]",
																														chars:      []rune{'_'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 321, col: 28, offset: 9778},
																														expr: &charClassMatcher{
																															pos:        position{line: 321, col: 29, offset: 9779},
																															val:        "[-\\pL\\pN]",
																															chars:      []rune{'-'},
																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 661, col: 56, offset: 20854},
																										label: "start",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 661, col: 62, offset: 20860},
																											expr: &actionExpr{
																												pos: position{line: 669, col: 17, offset: 21155},
																												run: (*parser).callonImageBlock73,
																												expr: &seqExpr{
																													pos: position{line: 669, col: 17, offset: 21155},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 669, col: 17, offset: 21155},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 669, col: 21, offset: 21159},
																															label: "start",
																															expr: &choiceExpr{
																																pos: position{line: 669, col: 28, offset: 21166},
																																alternatives: []any{
																																	&actionExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		run: (*parser).callonImageBlock78,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 669, col: 28, offset: 21166},
																																			val:        "[A-Za-z]",
																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 671, col: 9, offset: 21220},
																																		run: (*parser).callonImageBlock80,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 671, col: 9, offset: 21220},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 671, col: 9, offset: 21220},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 661, col: 78, offset: 20876},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 665, col: 25, offset: 20994},
																							run: (*parser).callonImageBlock84,
																							expr: &seqExpr{
																								pos: position{line: 665, col: 25, offset: 20994},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 665, col: 25, offset: 20994},
																										val:        "{counter2:",
																										ignoreCase: false,
																										want:       "\"{counter2:\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 665, col: 38, offset: 21007},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											run: (*parser).callonImageBlock88,
																											expr: &seqExpr{
																												pos: position{line: 321, col: 18, offset: 9768},
																												exprs: []any{
																													&charClassMatcher{
																														pos:        position{line: 321, col: 18, offset: 9768},
																														val:        "[_\\pL\\pN]",
																														chars:      []rune{'_'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 321, col: 28, offset: 9778},
																														expr: &charClassMatcher{
																															pos:        position{line: 321, col: 29, offset: 9779},
																															val:        "[-\\pL\\pN]",
																															chars:      []rune{'-'},
																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 665, col: 57, offset: 21026},
																										label: "start",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 665, col: 63, offset: 21032},
																											expr: &actionExpr{
																												pos: position{line: 669, col: 17, offset: 21155},
																												run: (*parser).callonImageBlock95,
																												expr: &seqExpr{
																													pos: position{line: 669, col: 17, offset: 21155},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 669, col: 17, offset: 21155},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 669, col: 21, offset: 21159},
																															label: "start",
																															expr: &choiceExpr{
																																pos: position{line: 669, col: 28, offset: 21166},
																																alternatives: []any{
																																	&actionExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		run: (*parser).callonImageBlock100,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 669, col: 28, offset: 21166},
																																			val:        "[A-Za-z]",
																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 671, col: 9, offset: 21220},
																																		run: (*parser).callonImageBlock102,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 671, col: 9, offset: 21220},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 671, col: 9, offset: 21220},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 665, col: 79, offset: 21048},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1201, col: 23, offset: 37004},
																	run: (*parser).callonImageBlock106,
																	expr: &seqExpr{
																		pos: position{line: 1201, col: 23, offset: 37004},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 1199, col: 32, offset: 36972},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1201, col: 51, offset: 37032},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1201, col: 56, offset: 37037},
																					run: (*parser).callonImageBlock110,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1201, col: 56, offset: 37037},
																						expr: &charClassMatcher{
																							pos:        position{line: 1201, col: 56, offset: 37037},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1199, col: 32, offset: 36972},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2876, col: 11, offset: 91247},
																	run: (*parser).callonImageBlock114,
																	expr: &litMatcher{
																		pos:        position{line: 2876, col: 11, offset: 91247},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1315, col: 31, offset: 41015},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1315, col: 43, offset: 41027},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1315, col: 61, offset: 41045},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonImageBlock119,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2919, col: 8, offset: 92130},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 2906, col: 12, offset: 91903},
									run: (*parser).callonImageBlock122,
									expr: &choiceExpr{
										pos: position{line: 2906, col: 13, offset: 91904},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2906, col: 13, offset: 91904},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 20, offset: 91911},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 29, offset: 91920},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2916, col: 8, offset: 92080},
									expr: &anyMatcher{
										line: 2916, col: 9, offset: 92081,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1320, col: 1, offset: 41262},
			expr: &actionExpr{
				pos: position{line: 1320, col: 16, offset: 41277},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 16, offset: 41277},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1320, col: 16, offset: 41277},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1320, col: 25, offset: 41286},
							expr: &litMatcher{
								pos:        position{line: 1320, col: 26, offset: 41287},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 30, offset: 41291},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2855, col: 13, offset: 90491},
								run: (*parser).callonInlineImage7,
								expr: &seqExpr{
									pos: position{line: 2855, col: 13, offset: 90491},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 2855, col: 13, offset: 90491},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2855, col: 20, offset: 90498},
												expr: &actionExpr{
													pos: position{line: 2863, col: 11, offset: 90737},
													run: (*parser).callonInlineImage11,
													expr: &choiceExpr{
														pos: position{line: 2863, col: 12, offset: 90738},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2863, col: 12, offset: 90738},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 2863, col: 24, offset: 90750},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 2863, col: 37, offset: 90763},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 2863, col: 48, offset: 90774},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 2863, col: 59, offset: 90785},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2855, col: 30, offset: 90508},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 2868, col: 5, offset: 90849},
												run: (*parser).callonInlineImage19,
												expr: &labeledExpr{
													pos:   position{line: 2868, col: 5, offset: 90849},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 2868, col: 14, offset: 90858},
														expr: &choiceExpr{
															pos: position{line: 2869, col: 9, offset: 90868},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 2869, col: 9, offset: 90868},
																	run: (*parser).callonInlineImage23,
																	expr: &seqExpr{
																		pos: position{line: 2869, col: 9, offset: 90868},
																		exprs: []any{
																			&notExpr{
																				pos: position{line: 2869, col: 9, offset: 90868},
																				expr: &litMatcher{
																					pos:        position{line: 2869, col: 10, offset: 90869},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 2870, col: 9, offset: 90897},
																				expr: &charClassMatcher{
																					pos:        position{line: 2870, col: 10, offset: 90898},
																					val:        "[^\\r\\n[]�{,;?!.<> ]",
																					chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '.', '<', '>', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&seqExpr{
																	pos: position{line: 2873, col: 11, offset: 91110},
																	exprs: []any{
																		&charClassMatcher{
																			pos:        position{line: 2873, col: 11, offset: 91110},
																			val:        "[,;?!.]",
																			chars:      []rune{',', ';', '?', '!', '.'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&andExpr{
																			pos: position{line: 2873, col: 19, offset: 91118},
																			expr: &seqExpr{
																				pos: position{line: 2873, col: 21, offset: 91120},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2873, col: 21, offset: 91120},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonInlineImage34,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2873, col: 28, offset: 91127},
																						expr: &notExpr{
																							pos: position{line: 2916, col: 8, offset: 92080},
																							expr: &anyMatcher{
																								line: 2916, col: 9, offset: 92081,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 639, col: 5, offset: 20141},
																	run: (*parser).callonInlineImage39,
																	expr: &seqExpr{
																		pos: position{line: 639, col: 5, offset: 20141},
																		exprs: []any{
																			&andCodeExpr{
																				pos: position{line: 639, col: 5, offset: 20141},
																				run: (*parser).callonInlineImage41,
																			},
																			&labeledExpr{
																				pos:   position{line: 642, col: 5, offset: 20213},
																				label: "element",
																				expr: &choiceExpr{
																					pos: position{line: 642, col: 14, offset: 20222},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 648, col: 5, offset: 20351},
																							run: (*parser).callonInlineImage44,
																							expr: &seqExpr{
																								pos: position{line: 648, col: 5, offset: 20351},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 648, col: 5, offset: 20351},
																										val:        "\\{",
																										ignoreCase: false,
																										want:       "\"\\\\{\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 648, col: 13, offset: 20359},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											run: (*parser).callonInlineImage48,
																											expr: &seqExpr{
																												pos: position{line: 321, col: 18, offset: 9768},
																												exprs: []any{
																													&charClassMatcher{
																														pos:        position{line: 321, col: 18, offset: 9768},
																														val:        "[_\\pL\\pN]",
																														chars:      []rune{'_'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 321, col: 28, offset: 9778},
																														expr: &charClassMatcher{
																															pos:        position{line: 321, col: 29, offset: 9779},
																															val:        "[-\\pL\\pN]",
																															chars:      []rune{'-'},
																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 648, col: 32, offset: 20378},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 655, col: 5, offset: 20619},
																							run: (*parser).callonInlineImage54,
																							expr: &seqExpr{
																								pos: position{line: 655, col: 5, offset: 20619},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 655, col: 5, offset: 20619},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 655, col: 9, offset: 20623},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											run: (*parser).callonInlineImage58,
																											expr: &seqExpr{
																												pos: position{line: 321, col: 18, offset: 9768},
																												exprs: []any{
																													&charClassMatcher{
																														pos:        position{line: 321, col: 18, offset: 9768},
																														val:        "[_\\pL\\pN]",
																														chars:      []rune{'_'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 321, col: 28, offset: 9778},
																														expr: &charClassMatcher{
																															pos:        position{line: 321, col: 29, offset: 9779},
																															val:        "[-\\pL\\pN]",
																															chars:      []rune{'-'},
																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 655, col: 28, offset: 20642},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 661, col: 25, offset: 20823},
																							run: (*parser).callonInlineImage64,
																							expr: &seqExpr{
																								pos: position{line: 661, col: 25, offset: 20823},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 661, col: 25, offset: 20823},
																										val:        "{counter:",
																										ignoreCase: false,
																										want:       "\"{counter:\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 661, col: 37, offset: 20835},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											run: (*parser).callonInlineImage68,
																											expr: &seqExpr{
																												pos: position{line: 321, col: 18, offset: 9768},
																												exprs: []any{
																													&charClassMatcher{
																														pos:        position{line: 321, col: 18, offset: 9768},
																														val:        "[_\\pL\\pN]",
																														chars:      []rune{'_'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 321, col: 28, offset: 9778},
																														expr: &charClassMatcher{
																															pos:        position{line: 321, col: 29, offset: 9779},
																															val:        "[-\\pL\\pN]",
																															chars:      []rune{'-'},
																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 661, col: 56, offset: 20854},
																										label: "start",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 661, col: 62, offset: 20860},
																											expr: &actionExpr{
																												pos: position{line: 669, col: 17, offset: 21155},
																												run: (*parser).callonInlineImage75,
																												expr: &seqExpr{
																													pos: position{line: 669, col: 17, offset: 21155},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 669, col: 17, offset: 21155},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 669, col: 21, offset: 21159},
																															label: "start",
																															expr: &choiceExpr{
																																pos: position{line: 669, col: 28, offset: 21166},
																																alternatives: []any{
																																	&actionExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		run: (*parser).callonInlineImage80,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 669, col: 28, offset: 21166},
																																			val:        "[A-Za-z]",
																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 671, col: 9, offset: 21220},
																																		run: (*parser).callonInlineImage82,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 671, col: 9, offset: 21220},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 671, col: 9, offset: 21220},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 661, col: 78, offset: 20876},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 665, col: 25, offset: 20994},
																							run: (*parser).callonInlineImage86,
																							expr: &seqExpr{
																								pos: position{line: 665, col: 25, offset: 20994},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 665, col: 25, offset: 20994},
																										val:        "{counter2:",
																										ignoreCase: false,
																										want:       "\"{counter2:\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 665, col: 38, offset: 21007},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 321, col: 18, offset: 9768},
																											run: (*parser).callonInlineImage90,
																											expr: &seqExpr{
																												pos: position{line: 321, col: 18, offset: 9768},
																												exprs: []any{
																													&charClassMatcher{
																														pos:        position{line: 321, col: 18, offset: 9768},
																														val:        "[_\\pL\\pN]",
																														chars:      []rune{'_'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 321, col: 28, offset: 9778},
																														expr: &charClassMatcher{
																															pos:        position{line: 321, col: 29, offset: 9779},
																															val:        "[-\\pL\\pN]",
																															chars:      []rune{'-'},
																															classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 665, col: 57, offset: 21026},
																										label: "start",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 665, col: 63, offset: 21032},
																											expr: &actionExpr{
																												pos: position{line: 669, col: 17, offset: 21155},
																												run: (*parser).callonInlineImage97,
																												expr: &seqExpr{
																													pos: position{line: 669, col: 17, offset: 21155},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 669, col: 17, offset: 21155},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 669, col: 21, offset: 21159},
																															label: "start",
																															expr: &choiceExpr{
																																pos: position{line: 669, col: 28, offset: 21166},
																																alternatives: []any{
																																	&actionExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		run: (*parser).callonInlineImage102,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 669, col: 28, offset: 21166},
																																			val:        "[A-Za-z]",
																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 671, col: 9, offset: 21220},
																																		run: (*parser).callonInlineImage104,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 671, col: 9, offset: 21220},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 671, col: 9, offset: 21220},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 665, col: 79, offset: 21048},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1201, col: 23, offset: 37004},
																	run: (*parser).callonInlineImage108,
																	expr: &seqExpr{
																		pos: position{line: 1201, col: 23, offset: 37004},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 1199, col: 32, offset: 36972},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1201, col: 51, offset: 37032},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1201, col: 56, offset: 37037},
																					run: (*parser).callonInlineImage112,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1201, col: 56, offset: 37037},
																						expr: &charClassMatcher{
																							pos:        position{line: 1201, col: 56, offset: 37037},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1199, col: 32, offset: 36972},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2876, col: 11, offset: 91247},
																	run: (*parser).callonInlineImage116,
																	expr: &litMatcher{
																		pos:        position{line: 2876, col: 11, offset: 91247},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 46, offset: 41307},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 58, offset: 41319},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1327, col: 1, offset: 41715},
			expr: &actionExpr{
				pos: position{line: 1327, col: 15, offset: 41729},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1327, col: 15, offset: 41729},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1327, col: 15, offset: 41729},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 23, offset: 41737},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1327, col: 29, offset: 41743},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1327, col: 29, offset: 41743},
									expr: &charClassMatcher{
										pos:        position{line: 1327, col: 29, offset: 41743},
										val:        "[_-\\pL\\pN]",
										chars:      []rune{'_', '-'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 73, offset: 41787},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 85, offset: 41799},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1334, col: 1, offset: 42165},
			expr: &actionExpr{
				pos: position{line: 1334, col: 19, offset: 42183},
				run: (*parser).callonInlineFootnote1,
				expr: &seqExpr{
					pos: position{line: 1334, col: 19, offset: 42183},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1334, col: 19, offset: 42183},
							val:        "footnote:",
							ignoreCase: false,
							want:       "\"footnote:\"",
						},
						&labeledExpr{
							pos:   position{line: 1334, col: 31, offset: 42195},
							label: "ref",
							expr: &zeroOrOneExpr{
								pos: position{line: 1334, col: 35, offset: 42199},
								expr: &actionExpr{
									pos: position{line: 2791, col: 14, offset: 88901},
									run: (*parser).callonInlineFootnote6,
									expr: &oneOrMoreExpr{
										pos: position{line: 2791, col: 14, offset: 88901},
										expr: &charClassMatcher{
											pos:        position{line: 2791, col: 14, offset: 88901},
											val:        "[\\pL\\pN]",
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1334, col: 50, offset: 42214},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1334, col: 54, offset: 42218},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1334, col: 64, offset: 42228},
								name: "FootnoteElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1334, col: 82, offset: 42246},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FootnoteElements",
			pos:  position{line: 1340, col: 1, offset: 42403},
			expr: &actionExpr{
				pos: position{line: 1340, col: 21, offset: 42423},
				run: (*parser).callonFootnoteElements1,
				expr: &labeledExpr{
					pos:   position{line: 1340, col: 21, offset: 42423},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1340, col: 30, offset: 42432},
						expr: &ruleRefExpr{
							pos:  position{line: 1340, col: 31, offset: 42433},
							name: "FootnoteElement",
						},
					},
				},
			},
		},
		{
			name: "FootnoteElement",
			pos:  position{line: 1344, col: 1, offset: 42525},
			expr: &actionExpr{
				pos: position{line: 1345, col: 5, offset: 42549},
				run: (*parser).callonFootnoteElement1,
				expr: &seqExpr{
					pos: position{line: 1345, col: 5, offset: 42549},
					exprs: []any{
						&notExpr{
							pos: position{line: 1345, col: 5, offset: 42549},
							expr: &litMatcher{
								pos:        position{line: 1345, col: 6, offset: 42550},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1346, col: 5, offset: 42559},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1347, col: 9, offset: 42577},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2796, col: 5, offset: 88974},
										run: (*parser).callonFootnoteElement7,
										expr: &seqExpr{
											pos: position{line: 2796, col: 5, offset: 88974},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2796, col: 5, offset: 88974},
													label: "text",
													expr: &actionExpr{
														pos: position{line: 2796, col: 11, offset: 88980},
														run: (*parser).callonFootnoteElement10,
														expr: &oneOrMoreExpr{
															pos: position{line: 2796, col: 11, offset: 88980},
															expr: &charClassMatcher{
																pos:        position{line: 2796, col: 11, offset: 88980},
																val:        "[\\pL\\pN]",
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2799, col: 5, offset: 89038},
													expr: &seqExpr{
														pos: position{line: 2800, col: 9, offset: 89049},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2800, col: 9, offset: 89049},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
															&andCodeExpr{
																pos: position{line: 2801, col: 9, offset: 89098},
																run: (*parser).callonFootnoteElement16,
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2805, col: 5, offset: 89178},
													expr: &seqExpr{
														pos: position{line: 2806, col: 9, offset: 89189},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2806, col: 9, offset: 89189},
																val:        "@",
																ignoreCase: false,
																want:       "\"@\"",
															},
															&charClassMatcher{
																pos:        position{line: 2806, col: 13, offset: 89193},
																val:        "[\\pL\\pN]",
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2901, col: 11, offset: 91793},
										run: (*parser).callonFootnoteElement21,
										expr: &oneOrMoreExpr{
											pos: position{line: 2901, col: 11, offset: 91793},
											expr: &charClassMatcher{
												pos:        position{line: 2901, col: 11, offset: 91793},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2483, col: 5, offset: 79973},
										run: (*parser).callonFootnoteElement24,
										expr: &seqExpr{
											pos: position{line: 2483, col: 5, offset: 79973},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2483, col: 5, offset: 79973},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2483, col: 10, offset: 79978},
													expr: &charClassMatcher{
														pos:        position{line: 2483, col: 11, offset: 79979},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2489, col: 5, offset: 80171},
										run: (*parser).callonFootnoteElement29,
										expr: &seqExpr{
											pos: position{line: 2489, col: 5, offset: 80171},
											exprs: []any{
												&andCodeExpr{
													pos: position{line: 2489, col: 5, offset: 80171},
													run: (*parser).callonFootnoteElement31,
												},
												&andCodeExpr{
													pos: position{line: 2492, col: 5, offset: 80242},
													run: (*parser).callonFootnoteElement32,
												},
												&litMatcher{
													pos:        position{line: 2496, col: 5, offset: 80367},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2496, col: 9, offset: 80371},
													expr: &charClassMatcher{
														pos:        position{line: 2496, col: 10, offset: 80372},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1350, col: 11, offset: 42644},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 1351, col: 11, offset: 42660},
										name: "Replacement",
									},
									&actionExpr{
										pos: position{line: 2814, col: 5, offset: 89386},
										run: (*parser).callonFootnoteElement38,
										expr: &choiceExpr{
											pos: position{line: 2815, col: 9, offset: 89396},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2815, col: 10, offset: 89397},
													val:        "[.,;?)!/:\"\\@=-]",
													chars:      []rune{'.', ',', ';', '?', ')', '!', '/', ':', '"', '\'', '@', '=', '-'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2817, col: 13, offset: 89494},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2817, col: 13, offset: 89494},
															run: (*parser).callonFootnoteElement42,
														},
														&litMatcher{
															pos:        position{line: 2820, col: 13, offset: 89594},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2820, col: 19, offset: 89600},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&seqExpr{
													pos: position{line: 2823, col: 13, offset: 89638},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2823, col: 13, offset: 89638},
															run: (*parser).callonFootnoteElement46,
														},
														&charClassMatcher{
															pos:        position{line: 2826, col: 14, offset: 89731},
															val:        "[*_`#]",
															chars:      []rune{'*', '_', '`', '#'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&seqExpr{
													pos: position{line: 2828, col: 12, offset: 89775},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 2828, col: 12, offset: 89775},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
														&notExpr{
															pos: position{line: 2828, col: 16, offset: 89779},
															expr: &litMatcher{
																pos:        position{line: 2828, col: 17, offset: 89780},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1353, col: 11, offset: 42733},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 1209, col: 5, offset: 37450},
										run: (*parser).callonFootnoteElement53,
										expr: &seqExpr{
											pos: position{line: 1209, col: 5, offset: 37450},
											exprs: []any{
												&andCodeExpr{
													pos: position{line: 1209, col: 5, offset: 37450},
													run: (*parser).callonFootnoteElement55,
												},
												&litMatcher{
													pos:        position{line: 1212, col: 5, offset: 37526},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&andCodeExpr{
													pos: position{line: 1213, col: 5, offset: 37534},
													run: (*parser).callonFootnoteElement57,
												},
												&zeroOrMoreExpr{
													pos: position{line: 1217, col: 5, offset: 37621},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonFootnoteElement59,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&andExpr{
													pos: position{line: 1217, col: 12, offset: 37628},
													expr: &choiceExpr{
														pos: position{line: 2919, col: 8, offset: 92130},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonFootnoteElement63,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 639, col: 5, offset: 20141},
										run: (*parser).callonFootnoteElement70,
										expr: &seqExpr{
											pos: position{line: 639, col: 5, offset: 20141},
											exprs: []any{
												&andCodeExpr{
													pos: position{line: 639, col: 5, offset: 20141},
													run: (*parser).callonFootnoteElement72,
												},
												&labeledExpr{
													pos:   position{line: 642, col: 5, offset: 20213},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 642, col: 14, offset: 20222},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 648, col: 5, offset: 20351},
																run: (*parser).callonFootnoteElement75,
																expr: &seqExpr{
																	pos: position{line: 648, col: 5, offset: 20351},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 648, col: 5, offset: 20351},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 648, col: 13, offset: 20359},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				run: (*parser).callonFootnoteElement79,
																				expr: &seqExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 321, col: 18, offset: 9768},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 321, col: 28, offset: 9778},
																							expr: &charClassMatcher{
																								pos:        position{line: 321, col: 29, offset: 9779},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 648, col: 32, offset: 20378},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 655, col: 5, offset: 20619},
																run: (*parser).callonFootnoteElement85,
																expr: &seqExpr{
																	pos: position{line: 655, col: 5, offset: 20619},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 655, col: 5, offset: 20619},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 655, col: 9, offset: 20623},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				run: (*parser).callonFootnoteElement89,
																				expr: &seqExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 321, col: 18, offset: 9768},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 321, col: 28, offset: 9778},
																							expr: &charClassMatcher{
																								pos:        position{line: 321, col: 29, offset: 9779},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 655, col: 28, offset: 20642},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20823},
																run: (*parser).callonFootnoteElement95,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20823},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20823},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 37, offset: 20835},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				run: (*parser).callonFootnoteElement99,
																				expr: &seqExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 321, col: 18, offset: 9768},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 321, col: 28, offset: 9778},
																							expr: &charClassMatcher{
																								pos:        position{line: 321, col: 29, offset: 9779},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 56, offset: 20854},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 62, offset: 20860},
																				expr: &actionExpr{
																					pos: position{line: 669, col: 17, offset: 21155},
																					run: (*parser).callonFootnoteElement106,
																					expr: &seqExpr{
																						pos: position{line: 669, col: 17, offset: 21155},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 669, col: 17, offset: 21155},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 669, col: 21, offset: 21159},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 669, col: 28, offset: 21166},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 669, col: 28, offset: 21166},
																											run: (*parser).callonFootnoteElement111,
																											expr: &charClassMatcher{
																												pos:        position{line: 669, col: 28, offset: 21166},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 671, col: 9, offset: 21220},
																											run: (*parser).callonFootnoteElement113,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 671, col: 9, offset: 21220},
																												expr: &charClassMatcher{
																													pos:        position{line: 671, col: 9, offset: 21220},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 78, offset: 20876},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 665, col: 25, offset: 20994},
																run: (*parser).callonFootnoteElement117,
																expr: &seqExpr{
																	pos: position{line: 665, col: 25, offset: 20994},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 665, col: 25, offset: 20994},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 665, col: 38, offset: 21007},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				run: (*parser).callonFootnoteElement121,
																				expr: &seqExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 321, col: 18, offset: 9768},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 321, col: 28, offset: 9778},
																							expr: &charClassMatcher{
																								pos:        position{line: 321, col: 29, offset: 9779},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 665, col: 57, offset: 21026},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 665, col: 63, offset: 21032},
																				expr: &actionExpr{
																					pos: position{line: 669, col: 17, offset: 21155},
																					run: (*parser).callonFootnoteElement128,
																					expr: &seqExpr{
																						pos: position{line: 669, col: 17, offset: 21155},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 669, col: 17, offset: 21155},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 669, col: 21, offset: 21159},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 669, col: 28, offset: 21166},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 669, col: 28, offset: 21166},
																											run: (*parser).callonFootnoteElement133,
																											expr: &charClassMatcher{
																												pos:        position{line: 669, col: 28, offset: 21166},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 671, col: 9, offset: 21220},
																											run: (*parser).callonFootnoteElement135,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 671, col: 9, offset: 21220},
																												expr: &charClassMatcher{
																													pos:        position{line: 671, col: 9, offset: 21220},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 665, col: 79, offset: 21048},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2452, col: 5, offset: 78802},
										run: (*parser).callonFootnoteElement139,
										expr: &seqExpr{
											pos: position{line: 2452, col: 5, offset: 78802},
											exprs: []any{
												&andCodeExpr{
													pos: position{line: 2452, col: 5, offset: 78802},
													run: (*parser).callonFootnoteElement141,
												},
												&labeledExpr{
													pos:   position{line: 2455, col: 5, offset: 78878},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 2456, col: 9, offset: 78896},
														run: (*parser).callonFootnoteElement143,
														expr: &charClassMatcher{
															pos:        position{line: 2456, col: 10, offset: 78897},
															val:        "[<>&]",
															chars:      []rune{'<', '>', '&'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2906, col: 12, offset: 91903},
										run: (*parser).callonFootnoteElement145,
										expr: &choiceExpr{
											pos: position{line: 2906, col: 13, offset: 91904},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 2906, col: 13, offset: 91904},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2906, col: 20, offset: 91911},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2906, col: 29, offset: 91920},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2836, col: 12, offset: 90040},
										run: (*parser).callonFootnoteElement150,
										expr: &charClassMatcher{
											pos:        position{line: 2836, col: 12, offset: 90040},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1392, col: 1, offset: 44578},
			expr: &choiceExpr{
				pos: position{line: 1392, col: 21, offset: 44598},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1392, col: 21, offset: 44598},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1392, col: 21, offset: 44598},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1392, col: 21, offset: 44598},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1392, col: 30, offset: 44607},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1392, col: 38, offset: 44615},
										expr: &actionExpr{
											pos: position{line: 1398, col: 30, offset: 44941},
											run: (*parser).callonPassthroughMacro7,
											expr: &charClassMatcher{
												pos:        position{line: 1398, col: 30, offset: 44941},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1392, col: 67, offset: 44644},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1394, col: 9, offset: 44748},
						run: (*parser).callonPassthroughMacro10,
						expr: &seqExpr{
							pos: position{line: 1394, col: 9, offset: 44748},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1394, col: 9, offset: 44748},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1394, col: 19, offset: 44758},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1394, col: 27, offset: 44766},
										expr: &choiceExpr{
											pos: position{line: 1394, col: 28, offset: 44767},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1394, col: 28, offset: 44767},
													name: "QuotedText",
												},
												&actionExpr{
													pos: position{line: 1398, col: 30, offset: 44941},
													run: (*parser).callonPassthroughMacro17,
													expr: &charClassMatcher{
														pos:        position{line: 1398, col: 30, offset: 44941},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1394, col: 69, offset: 44808},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1405, col: 1, offset: 45197},
			expr: &choiceExpr{
				pos: position{line: 1405, col: 9, offset: 45205},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1408, col: 5, offset: 45274},
						run: (*parser).callonLink2,
						expr: &seqExpr{
							pos: position{line: 1408, col: 5, offset: 45274},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1408, col: 5, offset: 45274},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&labeledExpr{
									pos:   position{line: 1409, col: 5, offset: 45283},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2859, col: 23, offset: 90618},
										run: (*parser).callonLink6,
										expr: &seqExpr{
											pos: position{line: 2859, col: 23, offset: 90618},
											exprs: []any{
												&notExpr{
													pos: position{line: 2859, col: 23, offset: 90618},
													expr: &litMatcher{
														pos:        position{line: 2859, col: 24, offset: 90619},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2859, col: 28, offset: 90623},
													label: "scheme",
													expr: &actionExpr{
														pos: position{line: 2863, col: 11, offset: 90737},
														run: (*parser).callonLink11,
														expr: &choiceExpr{
															pos: position{line: 2863, col: 12, offset: 90738},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2863, col: 12, offset: 90738},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 2863, col: 24, offset: 90750},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 2863, col: 37, offset: 90763},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 2863, col: 48, offset: 90774},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 2863, col: 59, offset: 90785},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2859, col: 44, offset: 90639},
													label: "path",
													expr: &actionExpr{
														pos: position{line: 2868, col: 5, offset: 90849},
														run: (*parser).callonLink19,
														expr: &labeledExpr{
															pos:   position{line: 2868, col: 5, offset: 90849},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 2868, col: 14, offset: 90858},
																expr: &choiceExpr{
																	pos: position{line: 2869, col: 9, offset: 90868},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2869, col: 9, offset: 90868},
																			run: (*parser).callonLink23,
																			expr: &seqExpr{
																				pos: position{line: 2869, col: 9, offset: 90868},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2869, col: 9, offset: 90868},
																						expr: &litMatcher{
																							pos:        position{line: 2869, col: 10, offset: 90869},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 2870, col: 9, offset: 90897},
																						expr: &charClassMatcher{
																							pos:        position{line: 2870, col: 10, offset: 90898},
																							val:        "[^\\r\\n[]�{,;?!.<> ]",
																							chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '.', '<', '>', ' '},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2873, col: 11, offset: 91110},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 2873, col: 11, offset: 91110},
																					val:        "[,;?!.]",
																					chars:      []rune{',', ';', '?', '!', '.'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&andExpr{
																					pos: position{line: 2873, col: 19, offset: 91118},
																					expr: &seqExpr{
																						pos: position{line: 2873, col: 21, offset: 91120},
																						exprs: []any{
																							&notExpr{
																								pos: position{line: 2873, col: 21, offset: 91120},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonLink34,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2873, col: 28, offset: 91127},
																								expr: &notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 639, col: 5, offset: 20141},
																			run: (*parser).callonLink39,
																			expr: &seqExpr{
																				pos: position{line: 639, col: 5, offset: 20141},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 639, col: 5, offset: 20141},
																						run: (*parser).callonLink41,
																					},
																					&labeledExpr{
																						pos:   position{line: 642, col: 5, offset: 20213},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 642, col: 14, offset: 20222},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 648, col: 5, offset: 20351},
																									run: (*parser).callonLink44,
																									expr: &seqExpr{
																										pos: position{line: 648, col: 5, offset: 20351},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 648, col: 5, offset: 20351},
																												val:        "\\{",
																												ignoreCase: false,
																												want:       "\"\\\\{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 648, col: 13, offset: 20359},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonLink48,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 648, col: 32, offset: 20378},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 655, col: 5, offset: 20619},
																									run: (*parser).callonLink54,
																									expr: &seqExpr{
																										pos: position{line: 655, col: 5, offset: 20619},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 655, col: 5, offset: 20619},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 655, col: 9, offset: 20623},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonLink58,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 655, col: 28, offset: 20642},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 661, col: 25, offset: 20823},
																									run: (*parser).callonLink64,
																									expr: &seqExpr{
																										pos: position{line: 661, col: 25, offset: 20823},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 661, col: 25, offset: 20823},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 37, offset: 20835},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonLink68,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 56, offset: 20854},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 661, col: 62, offset: 20860},
																													expr: &actionExpr{
																														pos: position{line: 669, col: 17, offset: 21155},
																														run: (*parser).callonLink75,
																														expr: &seqExpr{
																															pos: position{line: 669, col: 17, offset: 21155},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 669, col: 17, offset: 21155},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 669, col: 21, offset: 21159},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 669, col: 28, offset: 21166},
																																				run: (*parser).callonLink80,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 669, col: 28, offset: 21166},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 671, col: 9, offset: 21220},
																																				run: (*parser).callonLink82,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 671, col: 9, offset: 21220},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 671, col: 9, offset: 21220},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 661, col: 78, offset: 20876},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 665, col: 25, offset: 20994},
																									run: (*parser).callonLink86,
																									expr: &seqExpr{
																										pos: position{line: 665, col: 25, offset: 20994},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 665, col: 25, offset: 20994},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 665, col: 38, offset: 21007},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonLink90,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 665, col: 57, offset: 21026},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 665, col: 63, offset: 21032},
																													expr: &actionExpr{
																														pos: position{line: 669, col: 17, offset: 21155},
																														run: (*parser).callonLink97,
																														expr: &seqExpr{
																															pos: position{line: 669, col: 17, offset: 21155},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 669, col: 17, offset: 21155},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 669, col: 21, offset: 21159},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 669, col: 28, offset: 21166},
																																				run: (*parser).callonLink102,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 669, col: 28, offset: 21166},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 671, col: 9, offset: 21220},
																																				run: (*parser).callonLink104,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 671, col: 9, offset: 21220},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 671, col: 9, offset: 21220},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 665, col: 79, offset: 21048},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1201, col: 23, offset: 37004},
																			run: (*parser).callonLink108,
																			expr: &seqExpr{
																				pos: position{line: 1201, col: 23, offset: 37004},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1199, col: 32, offset: 36972},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 1201, col: 51, offset: 37032},
																						label: "ref",
																						expr: &actionExpr{
																							pos: position{line: 1201, col: 56, offset: 37037},
																							run: (*parser).callonLink112,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1201, col: 56, offset: 37037},
																								expr: &charClassMatcher{
																									pos:        position{line: 1201, col: 56, offset: 37037},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 1199, col: 32, offset: 36972},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2876, col: 11, offset: 91247},
																			run: (*parser).callonLink116,
																			expr: &litMatcher{
																				pos:        position{line: 2876, col: 11, offset: 91247},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1414, col: 5, offset: 45502},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1405, col: 19, offset: 45215},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1405, col: 34, offset: 45230},
						name: "ExternalLink",
					},
					&actionExpr{
						pos: position{line: 1443, col: 17, offset: 46495},
						run: (*parser).callonLink121,
						expr: &seqExpr{
							pos: position{line: 1443, col: 17, offset: 46495},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1443, col: 17, offset: 46495},
									label: "local",
									expr: &actionExpr{
										pos: position{line: 1448, col: 5, offset: 46660},
										run: (*parser).callonLink124,
										expr: &seqExpr{
											pos: position{line: 1448, col: 5, offset: 46660},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1448, col: 5, offset: 46660},
													label: "local",
													expr: &actionExpr{
														pos: position{line: 1448, col: 12, offset: 46667},
														run: (*parser).callonLink127,
														expr: &oneOrMoreExpr{
															pos: position{line: 1448, col: 12, offset: 46667},
															expr: &charClassMatcher{
																pos:        position{line: 1448, col: 12, offset: 46667},
																val:        "[!#$%&\\*=?^_`{|}~.+-/\\pL\\pN]",
																chars:      []rune{'!', '#', '$', '%', '&', '\'', '*', '=', '?', '^', '_', '`', '{', '|', '}', '~', '.'},
																ranges:     []rune{'+', '/'},
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1451, col: 5, offset: 46751},
													run: (*parser).callonLink130,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1443, col: 43, offset: 46521},
									val:        "@",
									ignoreCase: false,
									want:       "\"@\"",
								},
								&labeledExpr{
									pos:   position{line: 1443, col: 47, offset: 46525},
									label: "domain",
									expr: &actionExpr{
										pos: position{line: 1460, col: 23, offset: 47045},
										run: (*parser).callonLink133,
										expr: &seqExpr{
											pos: position{line: 1460, col: 23, offset: 47045},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1460, col: 23, offset: 47045},
													label: "domain",
													expr: &actionExpr{
														pos: position{line: 1460, col: 31, offset: 47053},
														run: (*parser).callonLink136,
														expr: &seqExpr{
															pos: position{line: 1460, col: 31, offset: 47053},
															exprs: []any{
																&oneOrMoreExpr{
																	pos: position{line: 1460, col: 31, offset: 47053},
																	expr: &charClassMatcher{
																		pos:        position{line: 1460, col: 31, offset: 47053},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1460, col: 41, offset: 47063},
																	expr: &seqExpr{
																		pos: position{line: 1460, col: 42, offset: 47064},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 1460, col: 42, offset: 47064},
																				val:        ".",
																				ignoreCase: false,
																				want:       "\".\"",
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 1460, col: 46, offset: 47068},
																				expr: &charClassMatcher{
																					pos:        position{line: 1460, col: 46, offset: 47068},
																					val:        "[-\\pL\\pN]",
																					chars:      []rune{'-'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1463, col: 5, offset: 47129},
													run: (*parser).callonLink145,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1420, col: 1, offset: 45650},
			expr: &choiceExpr{
				pos: position{line: 1422, col: 5, offset: 45686},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1422, col: 5, offset: 45686},
						run: (*parser).callonRelativeLink2,
						expr: &seqExpr{
							pos: position{line: 1422, col: 5, offset: 45686},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1422, col: 5, offset: 45686},
									val:        "\\link:",
									ignoreCase: false,
									want:       "\"\\\\link:\"",
								},
								&labeledExpr{
									pos:   position{line: 1422, col: 17, offset: 45698},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2855, col: 13, offset: 90491},
										run: (*parser).callonRelativeLink6,
										expr: &seqExpr{
											pos: position{line: 2855, col: 13, offset: 90491},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2855, col: 13, offset: 90491},
													label: "scheme",
													expr: &zeroOrOneExpr{
														pos: position{line: 2855, col: 20, offset: 90498},
														expr: &actionExpr{
															pos: position{line: 2863, col: 11, offset: 90737},
															run: (*parser).callonRelativeLink10,
															expr: &choiceExpr{
																pos: position{line: 2863, col: 12, offset: 90738},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2863, col: 12, offset: 90738},
																		val:        "http://",
																		ignoreCase: false,
																		want:       "\"http://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2863, col: 24, offset: 90750},
																		val:        "https://",
																		ignoreCase: false,
																		want:       "\"https://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2863, col: 37, offset: 90763},
																		val:        "ftp://",
																		ignoreCase: false,
																		want:       "\"ftp://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2863, col: 48, offset: 90774},
																		val:        "irc://",
																		ignoreCase: false,
																		want:       "\"irc://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2863, col: 59, offset: 90785},
																		val:        "mailto:",
																		ignoreCase: false,
																		want:       "\"mailto:\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2855, col: 30, offset: 90508},
													label: "path",
													expr: &actionExpr{
														pos: position{line: 2868, col: 5, offset: 90849},
														run: (*parser).callonRelativeLink18,
														expr: &labeledExpr{
															pos:   position{line: 2868, col: 5, offset: 90849},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 2868, col: 14, offset: 90858},
																expr: &choiceExpr{
																	pos: position{line: 2869, col: 9, offset: 90868},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2869, col: 9, offset: 90868},
																			run: (*parser).callonRelativeLink22,
																			expr: &seqExpr{
																				pos: position{line: 2869, col: 9, offset: 90868},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2869, col: 9, offset: 90868},
																						expr: &litMatcher{
																							pos:        position{line: 2869, col: 10, offset: 90869},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 2870, col: 9, offset: 90897},
																						expr: &charClassMatcher{
																							pos:        position{line: 2870, col: 10, offset: 90898},
																							val:        "[^\\r\\n[]�{,;?!.<> ]",
																							chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '.', '<', '>', ' '},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2873, col: 11, offset: 91110},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 2873, col: 11, offset: 91110},
																					val:        "[,;?!.]",
																					chars:      []rune{',', ';', '?', '!', '.'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&andExpr{
																					pos: position{line: 2873, col: 19, offset: 91118},
																					expr: &seqExpr{
																						pos: position{line: 2873, col: 21, offset: 91120},
																						exprs: []any{
																							&notExpr{
																								pos: position{line: 2873, col: 21, offset: 91120},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonRelativeLink33,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2873, col: 28, offset: 91127},
																								expr: &notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 639, col: 5, offset: 20141},
																			run: (*parser).callonRelativeLink38,
																			expr: &seqExpr{
																				pos: position{line: 639, col: 5, offset: 20141},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 639, col: 5, offset: 20141},
																						run: (*parser).callonRelativeLink40,
																					},
																					&labeledExpr{
																						pos:   position{line: 642, col: 5, offset: 20213},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 642, col: 14, offset: 20222},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 648, col: 5, offset: 20351},
																									run: (*parser).callonRelativeLink43,
																									expr: &seqExpr{
																										pos: position{line: 648, col: 5, offset: 20351},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 648, col: 5, offset: 20351},
																												val:        "\\{",
																												ignoreCase: false,
																												want:       "\"\\\\{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 648, col: 13, offset: 20359},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonRelativeLink47,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 648, col: 32, offset: 20378},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 655, col: 5, offset: 20619},
																									run: (*parser).callonRelativeLink53,
																									expr: &seqExpr{
																										pos: position{line: 655, col: 5, offset: 20619},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 655, col: 5, offset: 20619},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 655, col: 9, offset: 20623},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonRelativeLink57,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 655, col: 28, offset: 20642},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 661, col: 25, offset: 20823},
																									run: (*parser).callonRelativeLink63,
																									expr: &seqExpr{
																										pos: position{line: 661, col: 25, offset: 20823},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 661, col: 25, offset: 20823},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 37, offset: 20835},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonRelativeLink67,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 56, offset: 20854},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 661, col: 62, offset: 20860},
																													expr: &actionExpr{
																														pos: position{line: 669, col: 17, offset: 21155},
																														run: (*parser).callonRelativeLink74,
																														expr: &seqExpr{
																															pos: position{line: 669, col: 17, offset: 21155},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 669, col: 17, offset: 21155},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 669, col: 21, offset: 21159},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 669, col: 28, offset: 21166},
																																				run: (*parser).callonRelativeLink79,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 669, col: 28, offset: 21166},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 671, col: 9, offset: 21220},
																																				run: (*parser).callonRelativeLink81,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 671, col: 9, offset: 21220},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 671, col: 9, offset: 21220},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 661, col: 78, offset: 20876},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 665, col: 25, offset: 20994},
																									run: (*parser).callonRelativeLink85,
																									expr: &seqExpr{
																										pos: position{line: 665, col: 25, offset: 20994},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 665, col: 25, offset: 20994},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 665, col: 38, offset: 21007},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonRelativeLink89,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 665, col: 57, offset: 21026},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 665, col: 63, offset: 21032},
																													expr: &actionExpr{
																														pos: position{line: 669, col: 17, offset: 21155},
																														run: (*parser).callonRelativeLink96,
																														expr: &seqExpr{
																															pos: position{line: 669, col: 17, offset: 21155},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 669, col: 17, offset: 21155},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 669, col: 21, offset: 21159},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 669, col: 28, offset: 21166},
																																				run: (*parser).callonRelativeLink101,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 669, col: 28, offset: 21166},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 671, col: 9, offset: 21220},
																																				run: (*parser).callonRelativeLink103,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 671, col: 9, offset: 21220},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 671, col: 9, offset: 21220},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 665, col: 79, offset: 21048},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1201, col: 23, offset: 37004},
																			run: (*parser).callonRelativeLink107,
																			expr: &seqExpr{
																				pos: position{line: 1201, col: 23, offset: 37004},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1199, col: 32, offset: 36972},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 1201, col: 51, offset: 37032},
																						label: "ref",
																						expr: &actionExpr{
																							pos: position{line: 1201, col: 56, offset: 37037},
																							run: (*parser).callonRelativeLink111,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1201, col: 56, offset: 37037},
																								expr: &charClassMatcher{
																									pos:        position{line: 1201, col: 56, offset: 37037},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 1199, col: 32, offset: 36972},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2876, col: 11, offset: 91247},
																			run: (*parser).callonRelativeLink115,
																			expr: &litMatcher{
																				pos:        position{line: 2876, col: 11, offset: 91247},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1422, col: 32, offset: 45713},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 1422, col: 44, offset: 45725},
										name: "InlineAttributes",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1427, col: 5, offset: 45857},
						run: (*parser).callonRelativeLink119,
						expr: &seqExpr{
							pos: position{line: 1427, col: 5, offset: 45857},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1427, col: 5, offset: 45857},
									val:        "link:",
									ignoreCase: false,
									want:       "\"link:\"",
								},
								&labeledExpr{
									pos:   position{line: 1427, col: 13, offset: 45865},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2855, col: 13, offset: 90491},
										run: (*parser).callonRelativeLink123,
										expr: &seqExpr{
											pos: position{line: 2855, col: 13, offset: 90491},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2855, col: 13, offset: 90491},
													label: "scheme",
													expr: &zeroOrOneExpr{
														pos: position{line: 2855, col: 20, offset: 90498},
														expr: &actionExpr{
															pos: position{line: 2863, col: 11, offset: 90737},
															run: (*parser).callonRelativeLink127,
															expr: &choiceExpr{
																pos: position{line: 2863, col: 12, offset: 90738},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2863, col: 12, offset: 90738},
																		val:        "http://",
																		ignoreCase: false,
																		want:       "\"http://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2863, col: 24, offset: 90750},
																		val:        "https://",
																		ignoreCase: false,
																		want:       "\"https://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2863, col: 37, offset: 90763},
																		val:        "ftp://",
																		ignoreCase: false,
																		want:       "\"ftp://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2863, col: 48, offset: 90774},
																		val:        "irc://",
																		ignoreCase: false,
																		want:       "\"irc://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2863, col: 59, offset: 90785},
																		val:        "mailto:",
																		ignoreCase: false,
																		want:       "\"mailto:\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2855, col: 30, offset: 90508},
													label: "path",
													expr: &actionExpr{
														pos: position{line: 2868, col: 5, offset: 90849},
														run: (*parser).callonRelativeLink135,
														expr: &labeledExpr{
															pos:   position{line: 2868, col: 5, offset: 90849},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 2868, col: 14, offset: 90858},
																expr: &choiceExpr{
																	pos: position{line: 2869, col: 9, offset: 90868},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2869, col: 9, offset: 90868},
																			run: (*parser).callonRelativeLink139,
																			expr: &seqExpr{
																				pos: position{line: 2869, col: 9, offset: 90868},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2869, col: 9, offset: 90868},
																						expr: &litMatcher{
																							pos:        position{line: 2869, col: 10, offset: 90869},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 2870, col: 9, offset: 90897},
																						expr: &charClassMatcher{
																							pos:        position{line: 2870, col: 10, offset: 90898},
																							val:        "[^\\r\\n[]�{,;?!.<> ]",
																							chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '.', '<', '>', ' '},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2873, col: 11, offset: 91110},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 2873, col: 11, offset: 91110},
																					val:        "[,;?!.]",
																					chars:      []rune{',', ';', '?', '!', '.'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&andExpr{
																					pos: position{line: 2873, col: 19, offset: 91118},
																					expr: &seqExpr{
																						pos: position{line: 2873, col: 21, offset: 91120},
																						exprs: []any{
																							&notExpr{
																								pos: position{line: 2873, col: 21, offset: 91120},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonRelativeLink150,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2873, col: 28, offset: 91127},
																								expr: &notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 639, col: 5, offset: 20141},
																			run: (*parser).callonRelativeLink155,
																			expr: &seqExpr{
																				pos: position{line: 639, col: 5, offset: 20141},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 639, col: 5, offset: 20141},
																						run: (*parser).callonRelativeLink157,
																					},
																					&labeledExpr{
																						pos:   position{line: 642, col: 5, offset: 20213},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 642, col: 14, offset: 20222},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 648, col: 5, offset: 20351},
																									run: (*parser).callonRelativeLink160,
																									expr: &seqExpr{
																										pos: position{line: 648, col: 5, offset: 20351},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 648, col: 5, offset: 20351},
																												val:        "\\{",
																												ignoreCase: false,
																												want:       "\"\\\\{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 648, col: 13, offset: 20359},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonRelativeLink164,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 648, col: 32, offset: 20378},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 655, col: 5, offset: 20619},
																									run: (*parser).callonRelativeLink170,
																									expr: &seqExpr{
																										pos: position{line: 655, col: 5, offset: 20619},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 655, col: 5, offset: 20619},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 655, col: 9, offset: 20623},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonRelativeLink174,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 655, col: 28, offset: 20642},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 661, col: 25, offset: 20823},
																									run: (*parser).callonRelativeLink180,
																									expr: &seqExpr{
																										pos: position{line: 661, col: 25, offset: 20823},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 661, col: 25, offset: 20823},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 37, offset: 20835},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonRelativeLink184,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 56, offset: 20854},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 661, col: 62, offset: 20860},
																													expr: &actionExpr{
																														pos: position{line: 669, col: 17, offset: 21155},
																														run: (*parser).callonRelativeLink191,
																														expr: &seqExpr{
																															pos: position{line: 669, col: 17, offset: 21155},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 669, col: 17, offset: 21155},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 669, col: 21, offset: 21159},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 669, col: 28, offset: 21166},
																																				run: (*parser).callonRelativeLink196,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 669, col: 28, offset: 21166},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 671, col: 9, offset: 21220},
																																				run: (*parser).callonRelativeLink198,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 671, col: 9, offset: 21220},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 671, col: 9, offset: 21220},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 661, col: 78, offset: 20876},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 665, col: 25, offset: 20994},
																									run: (*parser).callonRelativeLink202,
																									expr: &seqExpr{
																										pos: position{line: 665, col: 25, offset: 20994},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 665, col: 25, offset: 20994},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 665, col: 38, offset: 21007},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonRelativeLink206,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 665, col: 57, offset: 21026},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 665, col: 63, offset: 21032},
																													expr: &actionExpr{
																														pos: position{line: 669, col: 17, offset: 21155},
																														run: (*parser).callonRelativeLink213,
																														expr: &seqExpr{
																															pos: position{line: 669, col: 17, offset: 21155},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 669, col: 17, offset: 21155},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 669, col: 21, offset: 21159},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 669, col: 28, offset: 21166},
																																				run: (*parser).callonRelativeLink218,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 669, col: 28, offset: 21166},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 671, col: 9, offset: 21220},
																																				run: (*parser).callonRelativeLink220,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 671, col: 9, offset: 21220},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 671, col: 9, offset: 21220},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 665, col: 79, offset: 21048},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1201, col: 23, offset: 37004},
																			run: (*parser).callonRelativeLink224,
																			expr: &seqExpr{
																				pos: position{line: 1201, col: 23, offset: 37004},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1199, col: 32, offset: 36972},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 1201, col: 51, offset: 37032},
																						label: "ref",
																						expr: &actionExpr{
																							pos: position{line: 1201, col: 56, offset: 37037},
																							run: (*parser).callonRelativeLink228,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1201, col: 56, offset: 37037},
																								expr: &charClassMatcher{
																									pos:        position{line: 1201, col: 56, offset: 37037},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 1199, col: 32, offset: 36972},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2876, col: 11, offset: 91247},
																			run: (*parser).callonRelativeLink232,
																			expr: &litMatcher{
																				pos:        position{line: 2876, col: 11, offset: 91247},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1427, col: 28, offset: 45880},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 1427, col: 40, offset: 45892},
										name: "InlineAttributes",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1431, col: 1, offset: 46008},
			expr: &choiceExpr{
				pos: position{line: 1434, col: 5, offset: 46170},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1434, col: 5, offset: 46170},
						run: (*parser).callonExternalLink2,
						expr: &seqExpr{
							pos: position{line: 1434, col: 5, offset: 46170},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1434, col: 5, offset: 46170},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 1434, col: 9, offset: 46174},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2859, col: 23, offset: 90618},
										run: (*parser).callonExternalLink6,
										expr: &seqExpr{
											pos: position{line: 2859, col: 23, offset: 90618},
											exprs: []any{
												&notExpr{
													pos: position{line: 2859, col: 23, offset: 90618},
													expr: &litMatcher{
														pos:        position{line: 2859, col: 24, offset: 90619},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2859, col: 28, offset: 90623},
													label: "scheme",
													expr: &actionExpr{
														pos: position{line: 2863, col: 11, offset: 90737},
														run: (*parser).callonExternalLink11,
														expr: &choiceExpr{
															pos: position{line: 2863, col: 12, offset: 90738},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2863, col: 12, offset: 90738},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 2863, col: 24, offset: 90750},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 2863, col: 37, offset: 90763},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 2863, col: 48, offset: 90774},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 2863, col: 59, offset: 90785},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2859, col: 44, offset: 90639},
													label: "path",
													expr: &actionExpr{
														pos: position{line: 2868, col: 5, offset: 90849},
														run: (*parser).callonExternalLink19,
														expr: &labeledExpr{
															pos:   position{line: 2868, col: 5, offset: 90849},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 2868, col: 14, offset: 90858},
																expr: &choiceExpr{
																	pos: position{line: 2869, col: 9, offset: 90868},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2869, col: 9, offset: 90868},
																			run: (*parser).callonExternalLink23,
																			expr: &seqExpr{
																				pos: position{line: 2869, col: 9, offset: 90868},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2869, col: 9, offset: 90868},
																						expr: &litMatcher{
																							pos:        position{line: 2869, col: 10, offset: 90869},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 2870, col: 9, offset: 90897},
																						expr: &charClassMatcher{
																							pos:        position{line: 2870, col: 10, offset: 90898},
																							val:        "[^\\r\\n[]�{,;?!.<> ]",
																							chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '.', '<', '>', ' '},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2873, col: 11, offset: 91110},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 2873, col: 11, offset: 91110},
																					val:        "[,;?!.]",
																					chars:      []rune{',', ';', '?', '!', '.'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&andExpr{
																					pos: position{line: 2873, col: 19, offset: 91118},
																					expr: &seqExpr{
																						pos: position{line: 2873, col: 21, offset: 91120},
																						exprs: []any{
																							&notExpr{
																								pos: position{line: 2873, col: 21, offset: 91120},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonExternalLink34,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2873, col: 28, offset: 91127},
																								expr: &notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 639, col: 5, offset: 20141},
																			run: (*parser).callonExternalLink39,
																			expr: &seqExpr{
																				pos: position{line: 639, col: 5, offset: 20141},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 639, col: 5, offset: 20141},
																						run: (*parser).callonExternalLink41,
																					},
																					&labeledExpr{
																						pos:   position{line: 642, col: 5, offset: 20213},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 642, col: 14, offset: 20222},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 648, col: 5, offset: 20351},
																									run: (*parser).callonExternalLink44,
																									expr: &seqExpr{
																										pos: position{line: 648, col: 5, offset: 20351},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 648, col: 5, offset: 20351},
																												val:        "\\{",
																												ignoreCase: false,
																												want:       "\"\\\\{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 648, col: 13, offset: 20359},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonExternalLink48,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 648, col: 32, offset: 20378},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 655, col: 5, offset: 20619},
																									run: (*parser).callonExternalLink54,
																									expr: &seqExpr{
																										pos: position{line: 655, col: 5, offset: 20619},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 655, col: 5, offset: 20619},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 655, col: 9, offset: 20623},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonExternalLink58,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 655, col: 28, offset: 20642},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 661, col: 25, offset: 20823},
																									run: (*parser).callonExternalLink64,
																									expr: &seqExpr{
																										pos: position{line: 661, col: 25, offset: 20823},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 661, col: 25, offset: 20823},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 37, offset: 20835},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonExternalLink68,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 56, offset: 20854},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 661, col: 62, offset: 20860},
																													expr: &actionExpr{
																														pos: position{line: 669, col: 17, offset: 21155},
																														run: (*parser).callonExternalLink75,
																														expr: &seqExpr{
																															pos: position{line: 669, col: 17, offset: 21155},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 669, col: 17, offset: 21155},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 669, col: 21, offset: 21159},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 669, col: 28, offset: 21166},
																																				run: (*parser).callonExternalLink80,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 669, col: 28, offset: 21166},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 671, col: 9, offset: 21220},
																																				run: (*parser).callonExternalLink82,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 671, col: 9, offset: 21220},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 671, col: 9, offset: 21220},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 661, col: 78, offset: 20876},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 665, col: 25, offset: 20994},
																									run: (*parser).callonExternalLink86,
																									expr: &seqExpr{
																										pos: position{line: 665, col: 25, offset: 20994},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 665, col: 25, offset: 20994},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 665, col: 38, offset: 21007},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonExternalLink90,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 665, col: 57, offset: 21026},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 665, col: 63, offset: 21032},
																													expr: &actionExpr{
																														pos: position{line: 669, col: 17, offset: 21155},
																														run: (*parser).callonExternalLink97,
																														expr: &seqExpr{
																															pos: position{line: 669, col: 17, offset: 21155},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 669, col: 17, offset: 21155},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 669, col: 21, offset: 21159},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 669, col: 28, offset: 21166},
																																				run: (*parser).callonExternalLink102,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 669, col: 28, offset: 21166},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 671, col: 9, offset: 21220},
																																				run: (*parser).callonExternalLink104,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 671, col: 9, offset: 21220},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 671, col: 9, offset: 21220},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 665, col: 79, offset: 21048},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1201, col: 23, offset: 37004},
																			run: (*parser).callonExternalLink108,
																			expr: &seqExpr{
																				pos: position{line: 1201, col: 23, offset: 37004},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1199, col: 32, offset: 36972},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 1201, col: 51, offset: 37032},
																						label: "ref",
																						expr: &actionExpr{
																							pos: position{line: 1201, col: 56, offset: 37037},
																							run: (*parser).callonExternalLink112,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1201, col: 56, offset: 37037},
																								expr: &charClassMatcher{
																									pos:        position{line: 1201, col: 56, offset: 37037},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 1199, col: 32, offset: 36972},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2876, col: 11, offset: 91247},
																			run: (*parser).callonExternalLink116,
																			expr: &litMatcher{
																				pos:        position{line: 2876, col: 11, offset: 91247},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1434, col: 34, offset: 46199},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1434, col: 45, offset: 46210},
										expr: &ruleRefExpr{
											pos:  position{line: 1434, col: 46, offset: 46211},
											name: "InlineAttributes",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1439, col: 5, offset: 46344},
						run: (*parser).callonExternalLink121,
						expr: &seqExpr{
							pos: position{line: 1439, col: 5, offset: 46344},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1439, col: 5, offset: 46344},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2859, col: 23, offset: 90618},
										run: (*parser).callonExternalLink124,
										expr: &seqExpr{
											pos: position{line: 2859, col: 23, offset: 90618},
											exprs: []any{
												&notExpr{
													pos: position{line: 2859, col: 23, offset: 90618},
													expr: &litMatcher{
														pos:        position{line: 2859, col: 24, offset: 90619},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2859, col: 28, offset: 90623},
													label: "scheme",
													expr: &actionExpr{
														pos: position{line: 2863, col: 11, offset: 90737},
														run: (*parser).callonExternalLink129,
														expr: &choiceExpr{
															pos: position{line: 2863, col: 12, offset: 90738},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2863, col: 12, offset: 90738},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 2863, col: 24, offset: 90750},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 2863, col: 37, offset: 90763},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 2863, col: 48, offset: 90774},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 2863, col: 59, offset: 90785},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2859, col: 44, offset: 90639},
													label: "path",
													expr: &actionExpr{
														pos: position{line: 2868, col: 5, offset: 90849},
														run: (*parser).callonExternalLink137,
														expr: &labeledExpr{
															pos:   position{line: 2868, col: 5, offset: 90849},
															label: "elements",
															expr: &oneOrMoreExpr{
																pos: position{line: 2868, col: 14, offset: 90858},
																expr: &choiceExpr{
																	pos: position{line: 2869, col: 9, offset: 90868},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2869, col: 9, offset: 90868},
																			run: (*parser).callonExternalLink141,
																			expr: &seqExpr{
																				pos: position{line: 2869, col: 9, offset: 90868},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 2869, col: 9, offset: 90868},
																						expr: &litMatcher{
																							pos:        position{line: 2869, col: 10, offset: 90869},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 2870, col: 9, offset: 90897},
																						expr: &charClassMatcher{
																							pos:        position{line: 2870, col: 10, offset: 90898},
																							val:        "[^\\r\\n[]�{,;?!.<> ]",
																							chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '.', '<', '>', ' '},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																		&seqExpr{
																			pos: position{line: 2873, col: 11, offset: 91110},
																			exprs: []any{
																				&charClassMatcher{
																					pos:        position{line: 2873, col: 11, offset: 91110},
																					val:        "[,;?!.]",
																					chars:      []rune{',', ';', '?', '!', '.'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&andExpr{
																					pos: position{line: 2873, col: 19, offset: 91118},
																					expr: &seqExpr{
																						pos: position{line: 2873, col: 21, offset: 91120},
																						exprs: []any{
																							&notExpr{
																								pos: position{line: 2873, col: 21, offset: 91120},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonExternalLink152,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2873, col: 28, offset: 91127},
																								expr: &notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 639, col: 5, offset: 20141},
																			run: (*parser).callonExternalLink157,
																			expr: &seqExpr{
																				pos: position{line: 639, col: 5, offset: 20141},
																				exprs: []any{
																					&andCodeExpr{
																						pos: position{line: 639, col: 5, offset: 20141},
																						run: (*parser).callonExternalLink159,
																					},
																					&labeledExpr{
																						pos:   position{line: 642, col: 5, offset: 20213},
																						label: "element",
																						expr: &choiceExpr{
																							pos: position{line: 642, col: 14, offset: 20222},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 648, col: 5, offset: 20351},
																									run: (*parser).callonExternalLink162,
																									expr: &seqExpr{
																										pos: position{line: 648, col: 5, offset: 20351},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 648, col: 5, offset: 20351},
																												val:        "\\{",
																												ignoreCase: false,
																												want:       "\"\\\\{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 648, col: 13, offset: 20359},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonExternalLink166,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 648, col: 32, offset: 20378},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 655, col: 5, offset: 20619},
																									run: (*parser).callonExternalLink172,
																									expr: &seqExpr{
																										pos: position{line: 655, col: 5, offset: 20619},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 655, col: 5, offset: 20619},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 655, col: 9, offset: 20623},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonExternalLink176,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 655, col: 28, offset: 20642},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 661, col: 25, offset: 20823},
																									run: (*parser).callonExternalLink182,
																									expr: &seqExpr{
																										pos: position{line: 661, col: 25, offset: 20823},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 661, col: 25, offset: 20823},
																												val:        "{counter:",
																												ignoreCase: false,
																												want:       "\"{counter:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 37, offset: 20835},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonExternalLink186,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 661, col: 56, offset: 20854},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 661, col: 62, offset: 20860},
																													expr: &actionExpr{
																														pos: position{line: 669, col: 17, offset: 21155},
																														run: (*parser).callonExternalLink193,
																														expr: &seqExpr{
																															pos: position{line: 669, col: 17, offset: 21155},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 669, col: 17, offset: 21155},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 669, col: 21, offset: 21159},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 669, col: 28, offset: 21166},
																																				run: (*parser).callonExternalLink198,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 669, col: 28, offset: 21166},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 671, col: 9, offset: 21220},
																																				run: (*parser).callonExternalLink200,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 671, col: 9, offset: 21220},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 671, col: 9, offset: 21220},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 661, col: 78, offset: 20876},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 665, col: 25, offset: 20994},
																									run: (*parser).callonExternalLink204,
																									expr: &seqExpr{
																										pos: position{line: 665, col: 25, offset: 20994},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 665, col: 25, offset: 20994},
																												val:        "{counter2:",
																												ignoreCase: false,
																												want:       "\"{counter2:\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 665, col: 38, offset: 21007},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 321, col: 18, offset: 9768},
																													run: (*parser).callonExternalLink208,
																													expr: &seqExpr{
																														pos: position{line: 321, col: 18, offset: 9768},
																														exprs: []any{
																															&charClassMatcher{
																																pos:        position{line: 321, col: 18, offset: 9768},
																																val:        "[_\\pL\\pN]",
																																chars:      []rune{'_'},
																																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 321, col: 28, offset: 9778},
																																expr: &charClassMatcher{
																																	pos:        position{line: 321, col: 29, offset: 9779},
																																	val:        "[-\\pL\\pN]",
																																	chars:      []rune{'-'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 665, col: 57, offset: 21026},
																												label: "start",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 665, col: 63, offset: 21032},
																													expr: &actionExpr{
																														pos: position{line: 669, col: 17, offset: 21155},
																														run: (*parser).callonExternalLink215,
																														expr: &seqExpr{
																															pos: position{line: 669, col: 17, offset: 21155},
																															exprs: []any{
																																&litMatcher{
																																	pos:        position{line: 669, col: 17, offset: 21155},
																																	val:        ":",
																																	ignoreCase: false,
																																	want:       "\":\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 669, col: 21, offset: 21159},
																																	label: "start",
																																	expr: &choiceExpr{
																																		pos: position{line: 669, col: 28, offset: 21166},
																																		alternatives: []any{
																																			&actionExpr{
																																				pos: position{line: 669, col: 28, offset: 21166},
																																				run: (*parser).callonExternalLink220,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 669, col: 28, offset: 21166},
																																					val:        "[A-Za-z]",
																																					ranges:     []rune{'A', 'Z', 'a', 'z'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 671, col: 9, offset: 21220},
																																				run: (*parser).callonExternalLink222,
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 671, col: 9, offset: 21220},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 671, col: 9, offset: 21220},
																																						val:        "[0-9]",
																																						ranges:     []rune{'0', '9'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 665, col: 79, offset: 21048},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 1201, col: 23, offset: 37004},
																			run: (*parser).callonExternalLink226,
																			expr: &seqExpr{
																				pos: position{line: 1201, col: 23, offset: 37004},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 1199, col: 32, offset: 36972},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 1201, col: 51, offset: 37032},
																						label: "ref",
																						expr: &actionExpr{
																							pos: position{line: 1201, col: 56, offset: 37037},
																							run: (*parser).callonExternalLink230,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1201, col: 56, offset: 37037},
																								expr: &charClassMatcher{
																									pos:        position{line: 1201, col: 56, offset: 37037},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 1199, col: 32, offset: 36972},
																						val:        "�",
																						ignoreCase: false,
																						want:       "\"�\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 2876, col: 11, offset: 91247},
																			run: (*parser).callonExternalLink234,
																			expr: &litMatcher{
																				pos:        position{line: 2876, col: 11, offset: 91247},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1439, col: 30, offset: 46369},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1439, col: 41, offset: 46380},
										expr: &ruleRefExpr{
											pos:  position{line: 1439, col: 42, offset: 46381},
											name: "InlineAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElements",
			pos:  position{line: 1473, col: 1, offset: 47522},
			expr: &actionExpr{
				pos: position{line: 1474, col: 5, offset: 47543},
				run: (*parser).callonListElements1,
				expr: &seqExpr{
					pos: position{line: 1474, col: 5, offset: 47543},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1474, col: 5, offset: 47543},
							label: "firstElement",
							expr: &choiceExpr{
								pos: position{line: 1480, col: 5, offset: 47745},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1573, col: 5, offset: 50679},
										run: (*parser).callonListElements5,
										expr: &seqExpr{
											pos: position{line: 1573, col: 5, offset: 50679},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1573, col: 5, offset: 50679},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1580, col: 5, offset: 50887},
														run: (*parser).callonListElements8,
														expr: &seqExpr{
															pos: position{line: 1580, col: 5, offset: 50887},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 1580, col: 5, offset: 50887},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListElements11,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1580, col: 12, offset: 50894},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1582, col: 9, offset: 50957},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 1582, col: 9, offset: 50957},
																				run: (*parser).callonListElements15,
																				expr: &seqExpr{
																					pos: position{line: 1582, col: 9, offset: 50957},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1582, col: 9, offset: 50957},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1582, col: 16, offset: 50964},
																								run: (*parser).callonListElements18,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1582, col: 16, offset: 50964},
																									expr: &litMatcher{
																										pos:        position{line: 1582, col: 17, offset: 50965},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1586, col: 9, offset: 51065},
																							run: (*parser).callonListElements21,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1605, col: 11, offset: 51782},
																				run: (*parser).callonListElements22,
																				expr: &seqExpr{
																					pos: position{line: 1605, col: 11, offset: 51782},
																					exprs: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 1605, col: 11, offset: 51782},
																							expr: &charClassMatcher{
																								pos:        position{line: 1605, col: 12, offset: 51783},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1605, col: 20, offset: 51791},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1607, col: 13, offset: 51908},
																				run: (*parser).callonListElements27,
																				expr: &seqExpr{
																					pos: position{line: 1607, col: 13, offset: 51908},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 1607, col: 14, offset: 51909},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1607, col: 21, offset: 51916},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1609, col: 13, offset: 52036},
																				run: (*parser).callonListElements31,
																				expr: &seqExpr{
																					pos: position{line: 1609, col: 13, offset: 52036},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 1609, col: 14, offset: 52037},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1609, col: 21, offset: 52044},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1611, col: 13, offset: 52164},
																				run: (*parser).callonListElements35,
																				expr: &seqExpr{
																					pos: position{line: 1611, col: 13, offset: 52164},
																					exprs: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 1611, col: 13, offset: 52164},
																							expr: &charClassMatcher{
																								pos:        position{line: 1611, col: 14, offset: 52165},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1611, col: 26, offset: 52177},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1613, col: 13, offset: 52297},
																				run: (*parser).callonListElements40,
																				expr: &seqExpr{
																					pos: position{line: 1613, col: 13, offset: 52297},
																					exprs: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 1613, col: 13, offset: 52297},
																							expr: &charClassMatcher{
																								pos:        position{line: 1613, col: 14, offset: 52298},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1613, col: 26, offset: 52310},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2901, col: 11, offset: 91793},
																	run: (*parser).callonListElements45,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		expr: &charClassMatcher{
																			pos:        position{line: 2901, col: 11, offset: 91793},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1574, col: 5, offset: 50718},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1521, col: 5, offset: 49185},
														run: (*parser).callonListElements49,
														expr: &seqExpr{
															pos: position{line: 1521, col: 5, offset: 49185},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 1521, col: 5, offset: 49185},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1521, col: 14, offset: 49194},
																		expr: &actionExpr{
																			pos: position{line: 1521, col: 15, offset: 49195},
																			run: (*parser).callonListElements53,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1521, col: 15, offset: 49195},
																				expr: &charClassMatcher{
																					pos:        position{line: 1521, col: 15, offset: 49195},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListElements57,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1623, col: 5, offset: 52576},
										run: (*parser).callonListElements64,
										expr: &seqExpr{
											pos: position{line: 1623, col: 5, offset: 52576},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1623, col: 5, offset: 52576},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1630, col: 5, offset: 52849},
														run: (*parser).callonListElements67,
														expr: &seqExpr{
															pos: position{line: 1630, col: 5, offset: 52849},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 1630, col: 5, offset: 52849},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListElements70,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1631, col: 5, offset: 52861},
																	label: "style",
																	expr: &actionExpr{
																		pos: position{line: 1632, col: 9, offset: 52877},
																		run: (*parser).callonListElements73,
																		expr: &choiceExpr{
																			pos: position{line: 1632, col: 10, offset: 52878},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 1632, col: 11, offset: 52879},
																					val:        "-",
																					ignoreCase: false,
																					want:       "\"-\"",
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1632, col: 18, offset: 52886},
																					expr: &litMatcher{
																						pos:        position{line: 1632, col: 19, offset: 52887},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1635, col: 7, offset: 52977},
																	run: (*parser).callonListElements78,
																},
																&actionExpr{
																	pos: position{line: 2901, col: 11, offset: 91793},
																	run: (*parser).callonListElements79,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		expr: &charClassMatcher{
																			pos:        position{line: 2901, col: 11, offset: 91793},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1624, col: 5, offset: 52617},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1624, col: 16, offset: 52628},
														expr: &actionExpr{
															pos: position{line: 1645, col: 5, offset: 53242},
															run: (*parser).callonListElements84,
															expr: &seqExpr{
																pos: position{line: 1645, col: 5, offset: 53242},
																exprs: []any{
																	&andExpr{
																		pos: position{line: 1645, col: 5, offset: 53242},
																		expr: &litMatcher{
																			pos:        position{line: 1645, col: 6, offset: 53243},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1645, col: 10, offset: 53247},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1646, col: 7, offset: 53261},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 1646, col: 7, offset: 53261},
																					run: (*parser).callonListElements90,
																					expr: &litMatcher{
																						pos:        position{line: 1646, col: 7, offset: 53261},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1647, col: 7, offset: 53306},
																					run: (*parser).callonListElements92,
																					expr: &litMatcher{
																						pos:        position{line: 1647, col: 7, offset: 53306},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1648, col: 7, offset: 53349},
																					run: (*parser).callonListElements94,
																					expr: &litMatcher{
																						pos:        position{line: 1648, col: 7, offset: 53349},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		run: (*parser).callonListElements96,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2901, col: 11, offset: 91793},
																			expr: &charClassMatcher{
																				pos:        position{line: 2901, col: 11, offset: 91793},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1625, col: 5, offset: 52667},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1521, col: 5, offset: 49185},
														run: (*parser).callonListElements100,
														expr: &seqExpr{
															pos: position{line: 1521, col: 5, offset: 49185},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 1521, col: 5, offset: 49185},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1521, col: 14, offset: 49194},
																		expr: &actionExpr{
																			pos: position{line: 1521, col: 15, offset: 49195},
																			run: (*parser).callonListElements104,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1521, col: 15, offset: 49195},
																				expr: &charClassMatcher{
																					pos:        position{line: 1521, col: 15, offset: 49195},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListElements108,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1713, col: 5, offset: 55189},
										run: (*parser).callonListElements115,
										expr: &seqExpr{
											pos: position{line: 1713, col: 5, offset: 55189},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1713, col: 5, offset: 55189},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1719, col: 5, offset: 55386},
														run: (*parser).callonListElements118,
														expr: &seqExpr{
															pos: position{line: 1719, col: 5, offset: 55386},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1719, col: 5, offset: 55386},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1719, col: 9, offset: 55390},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1719, col: 14, offset: 55395},
																		run: (*parser).callonListElements122,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1719, col: 14, offset: 55395},
																			expr: &charClassMatcher{
																				pos:        position{line: 1719, col: 14, offset: 55395},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1719, col: 62, offset: 55443},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2901, col: 11, offset: 91793},
																	run: (*parser).callonListElements126,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		expr: &charClassMatcher{
																			pos:        position{line: 2901, col: 11, offset: 91793},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1714, col: 5, offset: 55225},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1521, col: 5, offset: 49185},
														run: (*parser).callonListElements130,
														expr: &seqExpr{
															pos: position{line: 1521, col: 5, offset: 49185},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 1521, col: 5, offset: 49185},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1521, col: 14, offset: 49194},
																		expr: &actionExpr{
																			pos: position{line: 1521, col: 15, offset: 49195},
																			run: (*parser).callonListElements134,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1521, col: 15, offset: 49195},
																				expr: &charClassMatcher{
																					pos:        position{line: 1521, col: 15, offset: 49195},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListElements138,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1657, col: 5, offset: 53542},
										run: (*parser).callonListElements145,
										expr: &seqExpr{
											pos: position{line: 1657, col: 5, offset: 53542},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1657, col: 5, offset: 53542},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1665, col: 5, offset: 53868},
														run: (*parser).callonListElements148,
														expr: &oneOrMoreExpr{
															pos: position{line: 1665, col: 5, offset: 53868},
															expr: &seqExpr{
																pos: position{line: 1665, col: 6, offset: 53869},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 1665, col: 6, offset: 53869},
																		expr: &actionExpr{
																			pos: position{line: 1670, col: 5, offset: 54019},
																			run: (*parser).callonListElements152,
																			expr: &seqExpr{
																				pos: position{line: 1670, col: 5, offset: 54019},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 1670, col: 5, offset: 54019},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1670, col: 16, offset: 54030},
																							run: (*parser).callonListElements155,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1670, col: 16, offset: 54030},
																								expr: &litMatcher{
																									pos:        position{line: 1670, col: 17, offset: 54031},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1673, col: 5, offset: 54088},
																						run: (*parser).callonListElements158,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1665, col: 35, offset: 53898},
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonListElements161,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1665, col: 40, offset: 53903,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1658, col: 5, offset: 53577},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1670, col: 5, offset: 54019},
														run: (*parser).callonListElements170,
														expr: &seqExpr{
															pos: position{line: 1670, col: 5, offset: 54019},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 1670, col: 5, offset: 54019},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1670, col: 16, offset: 54030},
																		run: (*parser).callonListElements173,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1670, col: 16, offset: 54030},
																			expr: &litMatcher{
																				pos:        position{line: 1670, col: 17, offset: 54031},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1673, col: 5, offset: 54088},
																	run: (*parser).callonListElements176,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1659, col: 5, offset: 53622},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1681, col: 5, offset: 54337},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 1683, col: 9, offset: 54403},
																run: (*parser).callonListElements179,
																expr: &seqExpr{
																	pos: position{line: 1683, col: 9, offset: 54403},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 1683, col: 9, offset: 54403},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonListElements182,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonListElements185,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1684, col: 9, offset: 54422},
																			expr: &actionExpr{
																				pos: position{line: 680, col: 14, offset: 21521},
																				run: (*parser).callonListElements193,
																				expr: &seqExpr{
																					pos: position{line: 680, col: 14, offset: 21521},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 680, col: 21, offset: 21528},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonListElements198,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonListElements201,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1690, col: 9, offset: 54551},
																run: (*parser).callonListElements208,
																expr: &seqExpr{
																	pos: position{line: 1690, col: 9, offset: 54551},
																	exprs: []any{
																		&actionExpr{
																			pos: position{line: 2901, col: 11, offset: 91793},
																			run: (*parser).callonListElements210,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2901, col: 11, offset: 91793},
																				expr: &charClassMatcher{
																					pos:        position{line: 2901, col: 11, offset: 91793},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1691, col: 9, offset: 54624},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1691, col: 18, offset: 54633},
																				run: (*parser).callonListElements214,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1691, col: 18, offset: 54633},
																					expr: &charClassMatcher{
																						pos:        position{line: 1691, col: 18, offset: 54633},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonListElements218,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1475, col: 5, offset: 47574},
							label: "extraElements",
							expr: &ruleRefExpr{
								pos:  position{line: 1475, col: 20, offset: 47589},
								name: "ExtraListElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ExtraListElements",
			pos:  position{line: 1485, col: 1, offset: 47844},
			expr: &actionExpr{
				pos: position{line: 1485, col: 22, offset: 47865},
				run: (*parser).callonExtraListElements1,
				expr: &labeledExpr{
					pos:   position{line: 1485, col: 22, offset: 47865},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1485, col: 31, offset: 47874},
						expr: &ruleRefExpr{
							pos:  position{line: 1485, col: 32, offset: 47875},
							name: "ExtraListElement",
						},
					},
				},
			},
		},
		{
			name: "ExtraListElement",
			pos:  position{line: 1489, col: 1, offset: 47955},
			expr: &actionExpr{
				pos: position{line: 1490, col: 5, offset: 48094},
				run: (*parser).callonExtraListElement1,
				expr: &seqExpr{
					pos: position{line: 1490, col: 5, offset: 48094},
					exprs: []any{
						&andExpr{
							pos: position{line: 2914, col: 11, offset: 92066},
							expr: &anyMatcher{
								line: 2914, col: 13, offset: 92068,
							},
						},
						&labeledExpr{
							pos:   position{line: 1491, col: 5, offset: 48106},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1492, col: 9, offset: 48124},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1492, col: 13, offset: 48128},
										run: (*parser).callonExtraListElement7,
										expr: &seqExpr{
											pos: position{line: 1492, col: 13, offset: 48128},
											exprs: []any{
												&zeroOrMoreExpr{
													pos: position{line: 1492, col: 13, offset: 48128},
													expr: &actionExpr{
														pos: position{line: 680, col: 14, offset: 21521},
														run: (*parser).callonExtraListElement10,
														expr: &seqExpr{
															pos: position{line: 680, col: 14, offset: 21521},
															exprs: []any{
																&andExpr{
																	pos: position{line: 2914, col: 11, offset: 92066},
																	expr: &anyMatcher{
																		line: 2914, col: 13, offset: 92068,
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 680, col: 21, offset: 21528},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonExtraListElement15,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonExtraListElement18,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1493, col: 13, offset: 48152},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 1493, col: 22, offset: 48161},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 1573, col: 5, offset: 50679},
																run: (*parser).callonExtraListElement27,
																expr: &seqExpr{
																	pos: position{line: 1573, col: 5, offset: 50679},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1573, col: 5, offset: 50679},
																			label: "prefix",
																			expr: &actionExpr{
																				pos: position{line: 1580, col: 5, offset: 50887},
																				run: (*parser).callonExtraListElement30,
																				expr: &seqExpr{
																					pos: position{line: 1580, col: 5, offset: 50887},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 1580, col: 5, offset: 50887},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement33,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1580, col: 12, offset: 50894},
																							label: "prefix",
																							expr: &choiceExpr{
																								pos: position{line: 1582, col: 9, offset: 50957},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 1582, col: 9, offset: 50957},
																										run: (*parser).callonExtraListElement37,
																										expr: &seqExpr{
																											pos: position{line: 1582, col: 9, offset: 50957},
																											exprs: []any{
																												&labeledExpr{
																													pos:   position{line: 1582, col: 9, offset: 50957},
																													label: "depth",
																													expr: &actionExpr{
																														pos: position{line: 1582, col: 16, offset: 50964},
																														run: (*parser).callonExtraListElement40,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 1582, col: 16, offset: 50964},
																															expr: &litMatcher{
																																pos:        position{line: 1582, col: 17, offset: 50965},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																												&andCodeExpr{
																													pos: position{line: 1586, col: 9, offset: 51065},
																													run: (*parser).callonExtraListElement43,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1605, col: 11, offset: 51782},
																										run: (*parser).callonExtraListElement44,
																										expr: &seqExpr{
																											pos: position{line: 1605, col: 11, offset: 51782},
																											exprs: []any{
																												&oneOrMoreExpr{
																													pos: position{line: 1605, col: 11, offset: 51782},
																													expr: &charClassMatcher{
																														pos:        position{line: 1605, col: 12, offset: 51783},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1605, col: 20, offset: 51791},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1607, col: 13, offset: 51908},
																										run: (*parser).callonExtraListElement49,
																										expr: &seqExpr{
																											pos: position{line: 1607, col: 13, offset: 51908},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 1607, col: 14, offset: 51909},
																													val:        "[a-z]",
																													ranges:     []rune{'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&litMatcher{
																													pos:        position{line: 1607, col: 21, offset: 51916},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1609, col: 13, offset: 52036},
																										run: (*parser).callonExtraListElement53,
																										expr: &seqExpr{
																											pos: position{line: 1609, col: 13, offset: 52036},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 1609, col: 14, offset: 52037},
																													val:        "[A-Z]",
																													ranges:     []rune{'A', 'Z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&litMatcher{
																													pos:        position{line: 1609, col: 21, offset: 52044},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1611, col: 13, offset: 52164},
																										run: (*parser).callonExtraListElement57,
																										expr: &seqExpr{
																											pos: position{line: 1611, col: 13, offset: 52164},
																											exprs: []any{
																												&oneOrMoreExpr{
																													pos: position{line: 1611, col: 13, offset: 52164},
																													expr: &charClassMatcher{
																														pos:        position{line: 1611, col: 14, offset: 52165},
																														val:        "[ivxdlcm]",
																														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1611, col: 26, offset: 52177},
																													val:        ")",
																													ignoreCase: false,
																													want:       "\")\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1613, col: 13, offset: 52297},
																										run: (*parser).callonExtraListElement62,
																										expr: &seqExpr{
																											pos: position{line: 1613, col: 13, offset: 52297},
																											exprs: []any{
																												&oneOrMoreExpr{
																													pos: position{line: 1613, col: 13, offset: 52297},
																													expr: &charClassMatcher{
																														pos:        position{line: 1613, col: 14, offset: 52298},
																														val:        "[IVXDLCM]",
																														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1613, col: 26, offset: 52310},
																													val:        ")",
																													ignoreCase: false,
																													want:       "\")\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2901, col: 11, offset: 91793},
																							run: (*parser).callonExtraListElement67,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2901, col: 11, offset: 91793},
																								expr: &charClassMatcher{
																									pos:        position{line: 2901, col: 11, offset: 91793},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1574, col: 5, offset: 50718},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1521, col: 5, offset: 49185},
																				run: (*parser).callonExtraListElement71,
																				expr: &seqExpr{
																					pos: position{line: 1521, col: 5, offset: 49185},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1521, col: 5, offset: 49185},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1521, col: 14, offset: 49194},
																								expr: &actionExpr{
																									pos: position{line: 1521, col: 15, offset: 49195},
																									run: (*parser).callonExtraListElement75,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1521, col: 15, offset: 49195},
																										expr: &charClassMatcher{
																											pos:        position{line: 1521, col: 15, offset: 49195},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement79,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1623, col: 5, offset: 52576},
																run: (*parser).callonExtraListElement86,
																expr: &seqExpr{
																	pos: position{line: 1623, col: 5, offset: 52576},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1623, col: 5, offset: 52576},
																			label: "prefix",
																			expr: &actionExpr{
																				pos: position{line: 1630, col: 5, offset: 52849},
																				run: (*parser).callonExtraListElement89,
																				expr: &seqExpr{
																					pos: position{line: 1630, col: 5, offset: 52849},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 1630, col: 5, offset: 52849},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement92,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1631, col: 5, offset: 52861},
																							label: "style",
																							expr: &actionExpr{
																								pos: position{line: 1632, col: 9, offset: 52877},
																								run: (*parser).callonExtraListElement95,
																								expr: &choiceExpr{
																									pos: position{line: 1632, col: 10, offset: 52878},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 1632, col: 11, offset: 52879},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 1632, col: 18, offset: 52886},
																											expr: &litMatcher{
																												pos:        position{line: 1632, col: 19, offset: 52887},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1635, col: 7, offset: 52977},
																							run: (*parser).callonExtraListElement100,
																						},
																						&actionExpr{
																							pos: position{line: 2901, col: 11, offset: 91793},
																							run: (*parser).callonExtraListElement101,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2901, col: 11, offset: 91793},
																								expr: &charClassMatcher{
																									pos:        position{line: 2901, col: 11, offset: 91793},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1624, col: 5, offset: 52617},
																			label: "checkstyle",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1624, col: 16, offset: 52628},
																				expr: &actionExpr{
																					pos: position{line: 1645, col: 5, offset: 53242},
																					run: (*parser).callonExtraListElement106,
																					expr: &seqExpr{
																						pos: position{line: 1645, col: 5, offset: 53242},
																						exprs: []any{
																							&andExpr{
																								pos: position{line: 1645, col: 5, offset: 53242},
																								expr: &litMatcher{
																									pos:        position{line: 1645, col: 6, offset: 53243},
																									val:        "[",
																									ignoreCase: false,
																									want:       "\"[\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1645, col: 10, offset: 53247},
																								label: "style",
																								expr: &choiceExpr{
																									pos: position{line: 1646, col: 7, offset: 53261},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 1646, col: 7, offset: 53261},
																											run: (*parser).callonExtraListElement112,
																											expr: &litMatcher{
																												pos:        position{line: 1646, col: 7, offset: 53261},
																												val:        "[ ]",
																												ignoreCase: false,
																												want:       "\"[ ]\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1647, col: 7, offset: 53306},
																											run: (*parser).callonExtraListElement114,
																											expr: &litMatcher{
																												pos:        position{line: 1647, col: 7, offset: 53306},
																												val:        "[*]",
																												ignoreCase: false,
																												want:       "\"[*]\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1648, col: 7, offset: 53349},
																											run: (*parser).callonExtraListElement116,
																											expr: &litMatcher{
																												pos:        position{line: 1648, col: 7, offset: 53349},
																												val:        "[x]",
																												ignoreCase: false,
																												want:       "\"[x]\"",
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2901, col: 11, offset: 91793},
																								run: (*parser).callonExtraListElement118,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2901, col: 11, offset: 91793},
																									expr: &charClassMatcher{
																										pos:        position{line: 2901, col: 11, offset: 91793},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1625, col: 5, offset: 52667},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1521, col: 5, offset: 49185},
																				run: (*parser).callonExtraListElement122,
																				expr: &seqExpr{
																					pos: position{line: 1521, col: 5, offset: 49185},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1521, col: 5, offset: 49185},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1521, col: 14, offset: 49194},
																								expr: &actionExpr{
																									pos: position{line: 1521, col: 15, offset: 49195},
																									run: (*parser).callonExtraListElement126,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1521, col: 15, offset: 49195},
																										expr: &charClassMatcher{
																											pos:        position{line: 1521, col: 15, offset: 49195},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement130,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1713, col: 5, offset: 55189},
																run: (*parser).callonExtraListElement137,
																expr: &seqExpr{
																	pos: position{line: 1713, col: 5, offset: 55189},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1713, col: 5, offset: 55189},
																			label: "ref",
																			expr: &actionExpr{
																				pos: position{line: 1719, col: 5, offset: 55386},
																				run: (*parser).callonExtraListElement140,
																				expr: &seqExpr{
																					pos: position{line: 1719, col: 5, offset: 55386},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 1719, col: 5, offset: 55386},
																							val:        "<",
																							ignoreCase: false,
																							want:       "\"<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 1719, col: 9, offset: 55390},
																							label: "ref",
																							expr: &actionExpr{
																								pos: position{line: 1719, col: 14, offset: 55395},
																								run: (*parser).callonExtraListElement144,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1719, col: 14, offset: 55395},
																									expr: &charClassMatcher{
																										pos:        position{line: 1719, col: 14, offset: 55395},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1719, col: 62, offset: 55443},
																							val:        ">",
																							ignoreCase: false,
																							want:       "\">\"",
																						},
																						&actionExpr{
																							pos: position{line: 2901, col: 11, offset: 91793},
																							run: (*parser).callonExtraListElement148,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2901, col: 11, offset: 91793},
																								expr: &charClassMatcher{
																									pos:        position{line: 2901, col: 11, offset: 91793},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1714, col: 5, offset: 55225},
																			label: "description",
																			expr: &actionExpr{
																				pos: position{line: 1521, col: 5, offset: 49185},
																				run: (*parser).callonExtraListElement152,
																				expr: &seqExpr{
																					pos: position{line: 1521, col: 5, offset: 49185},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1521, col: 5, offset: 49185},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1521, col: 14, offset: 49194},
																								expr: &actionExpr{
																									pos: position{line: 1521, col: 15, offset: 49195},
																									run: (*parser).callonExtraListElement156,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1521, col: 15, offset: 49195},
																										expr: &charClassMatcher{
																											pos:        position{line: 1521, col: 15, offset: 49195},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement160,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1657, col: 5, offset: 53542},
																run: (*parser).callonExtraListElement167,
																expr: &seqExpr{
																	pos: position{line: 1657, col: 5, offset: 53542},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1657, col: 5, offset: 53542},
																			label: "term",
																			expr: &actionExpr{
																				pos: position{line: 1665, col: 5, offset: 53868},
																				run: (*parser).callonExtraListElement170,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1665, col: 5, offset: 53868},
																					expr: &seqExpr{
																						pos: position{line: 1665, col: 6, offset: 53869},
																						exprs: []any{
																							&notExpr{
																								pos: position{line: 1665, col: 6, offset: 53869},
																								expr: &actionExpr{
																									pos: position{line: 1670, col: 5, offset: 54019},
																									run: (*parser).callonExtraListElement174,
																									expr: &seqExpr{
																										pos: position{line: 1670, col: 5, offset: 54019},
																										exprs: []any{
																											&labeledExpr{
																												pos:   position{line: 1670, col: 5, offset: 54019},
																												label: "separator",
																												expr: &actionExpr{
																													pos: position{line: 1670, col: 16, offset: 54030},
																													run: (*parser).callonExtraListElement177,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1670, col: 16, offset: 54030},
																														expr: &litMatcher{
																															pos:        position{line: 1670, col: 17, offset: 54031},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1673, col: 5, offset: 54088},
																												run: (*parser).callonExtraListElement180,
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1665, col: 35, offset: 53898},
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 8, offset: 92130},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2906, col: 12, offset: 91903},
																											run: (*parser).callonExtraListElement183,
																											expr: &choiceExpr{
																												pos: position{line: 2906, col: 13, offset: 91904},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2906, col: 13, offset: 91904},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 20, offset: 91911},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 29, offset: 91920},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2916, col: 8, offset: 92080},
																											expr: &anyMatcher{
																												line: 2916, col: 9, offset: 92081,
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1665, col: 40, offset: 53903,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1658, col: 5, offset: 53577},
																			label: "separator",
																			expr: &actionExpr{
																				pos: position{line: 1670, col: 5, offset: 54019},
																				run: (*parser).callonExtraListElement192,
																				expr: &seqExpr{
																					pos: position{line: 1670, col: 5, offset: 54019},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1670, col: 5, offset: 54019},
																							label: "separator",
																							expr: &actionExpr{
																								pos: position{line: 1670, col: 16, offset: 54030},
																								run: (*parser).callonExtraListElement195,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1670, col: 16, offset: 54030},
																									expr: &litMatcher{
																										pos:        position{line: 1670, col: 17, offset: 54031},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1673, col: 5, offset: 54088},
																							run: (*parser).callonExtraListElement198,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1659, col: 5, offset: 53622},
																			label: "description",
																			expr: &choiceExpr{
																				pos: position{line: 1681, col: 5, offset: 54337},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 1683, col: 9, offset: 54403},
																						run: (*parser).callonExtraListElement201,
																						expr: &seqExpr{
																							pos: position{line: 1683, col: 9, offset: 54403},
																							exprs: []any{
																								&zeroOrMoreExpr{
																									pos: position{line: 1683, col: 9, offset: 54403},
																									expr: &actionExpr{
																										pos: position{line: 2897, col: 10, offset: 91732},
																										run: (*parser).callonExtraListElement204,
																										expr: &charClassMatcher{
																											pos:        position{line: 2897, col: 10, offset: 91732},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2919, col: 8, offset: 92130},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2906, col: 12, offset: 91903},
																											run: (*parser).callonExtraListElement207,
																											expr: &choiceExpr{
																												pos: position{line: 2906, col: 13, offset: 91904},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2906, col: 13, offset: 91904},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 20, offset: 91911},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 29, offset: 91920},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2916, col: 8, offset: 92080},
																											expr: &anyMatcher{
																												line: 2916, col: 9, offset: 92081,
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1684, col: 9, offset: 54422},
																									expr: &actionExpr{
																										pos: position{line: 680, col: 14, offset: 21521},
																										run: (*parser).callonExtraListElement215,
																										expr: &seqExpr{
																											pos: position{line: 680, col: 14, offset: 21521},
																											exprs: []any{
																												&andExpr{
																													pos: position{line: 2914, col: 11, offset: 92066},
																													expr: &anyMatcher{
																														line: 2914, col: 13, offset: 92068,
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 680, col: 21, offset: 21528},
																													expr: &actionExpr{
																														pos: position{line: 2897, col: 10, offset: 91732},
																														run: (*parser).callonExtraListElement220,
																														expr: &charClassMatcher{
																															pos:        position{line: 2897, col: 10, offset: 91732},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2919, col: 8, offset: 92130},
																													alternatives: []any{
																														&actionExpr{
																															pos: position{line: 2906, col: 12, offset: 91903},
																															run: (*parser).callonExtraListElement223,
																															expr: &choiceExpr{
																																pos: position{line: 2906, col: 13, offset: 91904},
																																alternatives: []any{
																																	&litMatcher{
																																		pos:        position{line: 2906, col: 13, offset: 91904},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2906, col: 20, offset: 91911},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2906, col: 29, offset: 91920},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2916, col: 8, offset: 92080},
																															expr: &anyMatcher{
																																line: 2916, col: 9, offset: 92081,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1690, col: 9, offset: 54551},
																						run: (*parser).callonExtraListElement230,
																						expr: &seqExpr{
																							pos: position{line: 1690, col: 9, offset: 54551},
																							exprs: []any{
																								&actionExpr{
																									pos: position{line: 2901, col: 11, offset: 91793},
																									run: (*parser).callonExtraListElement232,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2901, col: 11, offset: 91793},
																										expr: &charClassMatcher{
																											pos:        position{line: 2901, col: 11, offset: 91793},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 1691, col: 9, offset: 54624},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 1691, col: 18, offset: 54633},
																										run: (*parser).callonExtraListElement236,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1691, col: 18, offset: 54633},
																											expr: &charClassMatcher{
																												pos:        position{line: 1691, col: 18, offset: 54633},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2919, col: 8, offset: 92130},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2906, col: 12, offset: 91903},
																											run: (*parser).callonExtraListElement240,
																											expr: &choiceExpr{
																												pos: position{line: 2906, col: 13, offset: 91904},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2906, col: 13, offset: 91904},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 20, offset: 91911},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 29, offset: 91920},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2916, col: 8, offset: 92080},
																											expr: &anyMatcher{
																												line: 2916, col: 9, offset: 92081,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1496, col: 13, offset: 48312},
										run: (*parser).callonExtraListElement247,
										expr: &seqExpr{
											pos: position{line: 1496, col: 13, offset: 48312},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1496, col: 13, offset: 48312},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1496, col: 24, offset: 48323},
														expr: &ruleRefExpr{
															pos:  position{line: 1496, col: 25, offset: 48324},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1497, col: 13, offset: 48355},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 1497, col: 22, offset: 48364},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 1573, col: 5, offset: 50679},
																run: (*parser).callonExtraListElement254,
																expr: &seqExpr{
																	pos: position{line: 1573, col: 5, offset: 50679},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1573, col: 5, offset: 50679},
																			label: "prefix",
																			expr: &actionExpr{
																				pos: position{line: 1580, col: 5, offset: 50887},
																				run: (*parser).callonExtraListElement257,
																				expr: &seqExpr{
																					pos: position{line: 1580, col: 5, offset: 50887},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 1580, col: 5, offset: 50887},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement260,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1580, col: 12, offset: 50894},
																							label: "prefix",
																							expr: &choiceExpr{
																								pos: position{line: 1582, col: 9, offset: 50957},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 1582, col: 9, offset: 50957},
																										run: (*parser).callonExtraListElement264,
																										expr: &seqExpr{
																											pos: position{line: 1582, col: 9, offset: 50957},
																											exprs: []any{
																												&labeledExpr{
																													pos:   position{line: 1582, col: 9, offset: 50957},
																													label: "depth",
																													expr: &actionExpr{
																														pos: position{line: 1582, col: 16, offset: 50964},
																														run: (*parser).callonExtraListElement267,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 1582, col: 16, offset: 50964},
																															expr: &litMatcher{
																																pos:        position{line: 1582, col: 17, offset: 50965},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																												&andCodeExpr{
																													pos: position{line: 1586, col: 9, offset: 51065},
																													run: (*parser).callonExtraListElement270,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1605, col: 11, offset: 51782},
																										run: (*parser).callonExtraListElement271,
																										expr: &seqExpr{
																											pos: position{line: 1605, col: 11, offset: 51782},
																											exprs: []any{
																												&oneOrMoreExpr{
																													pos: position{line: 1605, col: 11, offset: 51782},
																													expr: &charClassMatcher{
																														pos:        position{line: 1605, col: 12, offset: 51783},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1605, col: 20, offset: 51791},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1607, col: 13, offset: 51908},
																										run: (*parser).callonExtraListElement276,
																										expr: &seqExpr{
																											pos: position{line: 1607, col: 13, offset: 51908},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 1607, col: 14, offset: 51909},
																													val:        "[a-z]",
																													ranges:     []rune{'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&litMatcher{
																													pos:        position{line: 1607, col: 21, offset: 51916},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1609, col: 13, offset: 52036},
																										run: (*parser).callonExtraListElement280,
																										expr: &seqExpr{
																											pos: position{line: 1609, col: 13, offset: 52036},
																											exprs: []any{
																												&charClassMatcher{
																													pos:        position{line: 1609, col: 14, offset: 52037},
																													val:        "[A-Z]",
																													ranges:     []rune{'A', 'Z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&litMatcher{
																													pos:        position{line: 1609, col: 21, offset: 52044},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1611, col: 13, offset: 52164},
																										run: (*parser).callonExtraListElement284,
																										expr: &seqExpr{
																											pos: position{line: 1611, col: 13, offset: 52164},
																											exprs: []any{
																												&oneOrMoreExpr{
																													pos: position{line: 1611, col: 13, offset: 52164},
																													expr: &charClassMatcher{
																														pos:        position{line: 1611, col: 14, offset: 52165},
																														val:        "[ivxdlcm]",
																														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1611, col: 26, offset: 52177},
																													val:        ")",
																													ignoreCase: false,
																													want:       "\")\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1613, col: 13, offset: 52297},
																										run: (*parser).callonExtraListElement289,
																										expr: &seqExpr{
																											pos: position{line: 1613, col: 13, offset: 52297},
																											exprs: []any{
																												&oneOrMoreExpr{
																													pos: position{line: 1613, col: 13, offset: 52297},
																													expr: &charClassMatcher{
																														pos:        position{line: 1613, col: 14, offset: 52298},
																														val:        "[IVXDLCM]",
																														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1613, col: 26, offset: 52310},
																													val:        ")",
																													ignoreCase: false,
																													want:       "\")\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2901, col: 11, offset: 91793},
																							run: (*parser).callonExtraListElement294,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2901, col: 11, offset: 91793},
																								expr: &charClassMatcher{
																									pos:        position{line: 2901, col: 11, offset: 91793},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1574, col: 5, offset: 50718},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1521, col: 5, offset: 49185},
																				run: (*parser).callonExtraListElement298,
																				expr: &seqExpr{
																					pos: position{line: 1521, col: 5, offset: 49185},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1521, col: 5, offset: 49185},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1521, col: 14, offset: 49194},
																								expr: &actionExpr{
																									pos: position{line: 1521, col: 15, offset: 49195},
																									run: (*parser).callonExtraListElement302,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1521, col: 15, offset: 49195},
																										expr: &charClassMatcher{
																											pos:        position{line: 1521, col: 15, offset: 49195},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement306,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1623, col: 5, offset: 52576},
																run: (*parser).callonExtraListElement313,
																expr: &seqExpr{
																	pos: position{line: 1623, col: 5, offset: 52576},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1623, col: 5, offset: 52576},
																			label: "prefix",
																			expr: &actionExpr{
																				pos: position{line: 1630, col: 5, offset: 52849},
																				run: (*parser).callonExtraListElement316,
																				expr: &seqExpr{
																					pos: position{line: 1630, col: 5, offset: 52849},
																					exprs: []any{
																						&zeroOrMoreExpr{
																							pos: position{line: 1630, col: 5, offset: 52849},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement319,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1631, col: 5, offset: 52861},
																							label: "style",
																							expr: &actionExpr{
																								pos: position{line: 1632, col: 9, offset: 52877},
																								run: (*parser).callonExtraListElement322,
																								expr: &choiceExpr{
																									pos: position{line: 1632, col: 10, offset: 52878},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 1632, col: 11, offset: 52879},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 1632, col: 18, offset: 52886},
																											expr: &litMatcher{
																												pos:        position{line: 1632, col: 19, offset: 52887},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1635, col: 7, offset: 52977},
																							run: (*parser).callonExtraListElement327,
																						},
																						&actionExpr{
																							pos: position{line: 2901, col: 11, offset: 91793},
																							run: (*parser).callonExtraListElement328,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2901, col: 11, offset: 91793},
																								expr: &charClassMatcher{
																									pos:        position{line: 2901, col: 11, offset: 91793},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1624, col: 5, offset: 52617},
																			label: "checkstyle",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1624, col: 16, offset: 52628},
																				expr: &actionExpr{
																					pos: position{line: 1645, col: 5, offset: 53242},
																					run: (*parser).callonExtraListElement333,
																					expr: &seqExpr{
																						pos: position{line: 1645, col: 5, offset: 53242},
																						exprs: []any{
																							&andExpr{
																								pos: position{line: 1645, col: 5, offset: 53242},
																								expr: &litMatcher{
																									pos:        position{line: 1645, col: 6, offset: 53243},
																									val:        "[",
																									ignoreCase: false,
																									want:       "\"[\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1645, col: 10, offset: 53247},
																								label: "style",
																								expr: &choiceExpr{
																									pos: position{line: 1646, col: 7, offset: 53261},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 1646, col: 7, offset: 53261},
																											run: (*parser).callonExtraListElement339,
																											expr: &litMatcher{
																												pos:        position{line: 1646, col: 7, offset: 53261},
																												val:        "[ ]",
																												ignoreCase: false,
																												want:       "\"[ ]\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1647, col: 7, offset: 53306},
																											run: (*parser).callonExtraListElement341,
																											expr: &litMatcher{
																												pos:        position{line: 1647, col: 7, offset: 53306},
																												val:        "[*]",
																												ignoreCase: false,
																												want:       "\"[*]\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1648, col: 7, offset: 53349},
																											run: (*parser).callonExtraListElement343,
																											expr: &litMatcher{
																												pos:        position{line: 1648, col: 7, offset: 53349},
																												val:        "[x]",
																												ignoreCase: false,
																												want:       "\"[x]\"",
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2901, col: 11, offset: 91793},
																								run: (*parser).callonExtraListElement345,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2901, col: 11, offset: 91793},
																									expr: &charClassMatcher{
																										pos:        position{line: 2901, col: 11, offset: 91793},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1625, col: 5, offset: 52667},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1521, col: 5, offset: 49185},
																				run: (*parser).callonExtraListElement349,
																				expr: &seqExpr{
																					pos: position{line: 1521, col: 5, offset: 49185},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1521, col: 5, offset: 49185},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1521, col: 14, offset: 49194},
																								expr: &actionExpr{
																									pos: position{line: 1521, col: 15, offset: 49195},
																									run: (*parser).callonExtraListElement353,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1521, col: 15, offset: 49195},
																										expr: &charClassMatcher{
																											pos:        position{line: 1521, col: 15, offset: 49195},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement357,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1713, col: 5, offset: 55189},
																run: (*parser).callonExtraListElement364,
																expr: &seqExpr{
																	pos: position{line: 1713, col: 5, offset: 55189},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1713, col: 5, offset: 55189},
																			label: "ref",
																			expr: &actionExpr{
																				pos: position{line: 1719, col: 5, offset: 55386},
																				run: (*parser).callonExtraListElement367,
																				expr: &seqExpr{
																					pos: position{line: 1719, col: 5, offset: 55386},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 1719, col: 5, offset: 55386},
																							val:        "<",
																							ignoreCase: false,
																							want:       "\"<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 1719, col: 9, offset: 55390},
																							label: "ref",
																							expr: &actionExpr{
																								pos: position{line: 1719, col: 14, offset: 55395},
																								run: (*parser).callonExtraListElement371,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1719, col: 14, offset: 55395},
																									expr: &charClassMatcher{
																										pos:        position{line: 1719, col: 14, offset: 55395},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1719, col: 62, offset: 55443},
																							val:        ">",
																							ignoreCase: false,
																							want:       "\">\"",
																						},
																						&actionExpr{
																							pos: position{line: 2901, col: 11, offset: 91793},
																							run: (*parser).callonExtraListElement375,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2901, col: 11, offset: 91793},
																								expr: &charClassMatcher{
																									pos:        position{line: 2901, col: 11, offset: 91793},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1714, col: 5, offset: 55225},
																			label: "description",
																			expr: &actionExpr{
																				pos: position{line: 1521, col: 5, offset: 49185},
																				run: (*parser).callonExtraListElement379,
																				expr: &seqExpr{
																					pos: position{line: 1521, col: 5, offset: 49185},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1521, col: 5, offset: 49185},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1521, col: 14, offset: 49194},
																								expr: &actionExpr{
																									pos: position{line: 1521, col: 15, offset: 49195},
																									run: (*parser).callonExtraListElement383,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1521, col: 15, offset: 49195},
																										expr: &charClassMatcher{
																											pos:        position{line: 1521, col: 15, offset: 49195},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement387,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1657, col: 5, offset: 53542},
																run: (*parser).callonExtraListElement394,
																expr: &seqExpr{
																	pos: position{line: 1657, col: 5, offset: 53542},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1657, col: 5, offset: 53542},
																			label: "term",
																			expr: &actionExpr{
																				pos: position{line: 1665, col: 5, offset: 53868},
																				run: (*parser).callonExtraListElement397,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1665, col: 5, offset: 53868},
																					expr: &seqExpr{
																						pos: position{line: 1665, col: 6, offset: 53869},
																						exprs: []any{
																							&notExpr{
																								pos: position{line: 1665, col: 6, offset: 53869},
																								expr: &actionExpr{
																									pos: position{line: 1670, col: 5, offset: 54019},
																									run: (*parser).callonExtraListElement401,
																									expr: &seqExpr{
																										pos: position{line: 1670, col: 5, offset: 54019},
																										exprs: []any{
																											&labeledExpr{
																												pos:   position{line: 1670, col: 5, offset: 54019},
																												label: "separator",
																												expr: &actionExpr{
																													pos: position{line: 1670, col: 16, offset: 54030},
																													run: (*parser).callonExtraListElement404,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1670, col: 16, offset: 54030},
																														expr: &litMatcher{
																															pos:        position{line: 1670, col: 17, offset: 54031},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1673, col: 5, offset: 54088},
																												run: (*parser).callonExtraListElement407,
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1665, col: 35, offset: 53898},
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 8, offset: 92130},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2906, col: 12, offset: 91903},
																											run: (*parser).callonExtraListElement410,
																											expr: &choiceExpr{
																												pos: position{line: 2906, col: 13, offset: 91904},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2906, col: 13, offset: 91904},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 20, offset: 91911},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 29, offset: 91920},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2916, col: 8, offset: 92080},
																											expr: &anyMatcher{
																												line: 2916, col: 9, offset: 92081,
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1665, col: 40, offset: 53903,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1658, col: 5, offset: 53577},
																			label: "separator",
																			expr: &actionExpr{
																				pos: position{line: 1670, col: 5, offset: 54019},
																				run: (*parser).callonExtraListElement419,
																				expr: &seqExpr{
																					pos: position{line: 1670, col: 5, offset: 54019},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1670, col: 5, offset: 54019},
																							label: "separator",
																							expr: &actionExpr{
																								pos: position{line: 1670, col: 16, offset: 54030},
																								run: (*parser).callonExtraListElement422,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1670, col: 16, offset: 54030},
																									expr: &litMatcher{
																										pos:        position{line: 1670, col: 17, offset: 54031},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1673, col: 5, offset: 54088},
																							run: (*parser).callonExtraListElement425,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1659, col: 5, offset: 53622},
																			label: "description",
																			expr: &choiceExpr{
																				pos: position{line: 1681, col: 5, offset: 54337},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 1683, col: 9, offset: 54403},
																						run: (*parser).callonExtraListElement428,
																						expr: &seqExpr{
																							pos: position{line: 1683, col: 9, offset: 54403},
																							exprs: []any{
																								&zeroOrMoreExpr{
																									pos: position{line: 1683, col: 9, offset: 54403},
																									expr: &actionExpr{
																										pos: position{line: 2897, col: 10, offset: 91732},
																										run: (*parser).callonExtraListElement431,
																										expr: &charClassMatcher{
																											pos:        position{line: 2897, col: 10, offset: 91732},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2919, col: 8, offset: 92130},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2906, col: 12, offset: 91903},
																											run: (*parser).callonExtraListElement434,
																											expr: &choiceExpr{
																												pos: position{line: 2906, col: 13, offset: 91904},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2906, col: 13, offset: 91904},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 20, offset: 91911},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 29, offset: 91920},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2916, col: 8, offset: 92080},
																											expr: &anyMatcher{
																												line: 2916, col: 9, offset: 92081,
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1684, col: 9, offset: 54422},
																									expr: &actionExpr{
																										pos: position{line: 680, col: 14, offset: 21521},
																										run: (*parser).callonExtraListElement442,
																										expr: &seqExpr{
																											pos: position{line: 680, col: 14, offset: 21521},
																											exprs: []any{
																												&andExpr{
																													pos: position{line: 2914, col: 11, offset: 92066},
																													expr: &anyMatcher{
																														line: 2914, col: 13, offset: 92068,
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 680, col: 21, offset: 21528},
																													expr: &actionExpr{
																														pos: position{line: 2897, col: 10, offset: 91732},
																														run: (*parser).callonExtraListElement447,
																														expr: &charClassMatcher{
																															pos:        position{line: 2897, col: 10, offset: 91732},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2919, col: 8, offset: 92130},
																													alternatives: []any{
																														&actionExpr{
																															pos: position{line: 2906, col: 12, offset: 91903},
																															run: (*parser).callonExtraListElement450,
																															expr: &choiceExpr{
																																pos: position{line: 2906, col: 13, offset: 91904},
																																alternatives: []any{
																																	&litMatcher{
																																		pos:        position{line: 2906, col: 13, offset: 91904},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2906, col: 20, offset: 91911},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2906, col: 29, offset: 91920},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2916, col: 8, offset: 92080},
																															expr: &anyMatcher{
																																line: 2916, col: 9, offset: 92081,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1690, col: 9, offset: 54551},
																						run: (*parser).callonExtraListElement457,
																						expr: &seqExpr{
																							pos: position{line: 1690, col: 9, offset: 54551},
																							exprs: []any{
																								&actionExpr{
																									pos: position{line: 2901, col: 11, offset: 91793},
																									run: (*parser).callonExtraListElement459,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2901, col: 11, offset: 91793},
																										expr: &charClassMatcher{
																											pos:        position{line: 2901, col: 11, offset: 91793},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 1691, col: 9, offset: 54624},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 1691, col: 18, offset: 54633},
																										run: (*parser).callonExtraListElement463,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1691, col: 18, offset: 54633},
																											expr: &charClassMatcher{
																												pos:        position{line: 1691, col: 18, offset: 54633},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2919, col: 8, offset: 92130},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2906, col: 12, offset: 91903},
																											run: (*parser).callonExtraListElement467,
																											expr: &choiceExpr{
																												pos: position{line: 2906, col: 13, offset: 91904},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2906, col: 13, offset: 91904},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 20, offset: 91911},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 29, offset: 91920},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2916, col: 8, offset: 92080},
																											expr: &anyMatcher{
																												line: 2916, col: 9, offset: 92081,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1500, col: 11, offset: 48549},
										name: "ListContinuation",
									},
									&actionExpr{
										pos: position{line: 2465, col: 22, offset: 79256},
										run: (*parser).callonExtraListElement475,
										expr: &seqExpr{
											pos: position{line: 2465, col: 22, offset: 79256},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2470, col: 31, offset: 79477},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2470, col: 36, offset: 79482},
													expr: &litMatcher{
														pos:        position{line: 2470, col: 37, offset: 79483},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2465, col: 49, offset: 79283},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2843, col: 13, offset: 90258},
														run: (*parser).callonExtraListElement481,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2843, col: 13, offset: 90258},
															expr: &charClassMatcher{
																pos:        position{line: 2843, col: 13, offset: 90258},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonExtraListElement485,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1508, col: 5, offset: 48827},
										run: (*parser).callonExtraListElement492,
										expr: &seqExpr{
											pos: position{line: 1508, col: 5, offset: 48827},
											exprs: []any{
												&notExpr{
													pos: position{line: 1508, col: 5, offset: 48827},
													expr: &actionExpr{
														pos: position{line: 680, col: 14, offset: 21521},
														run: (*parser).callonExtraListElement495,
														expr: &seqExpr{
															pos: position{line: 680, col: 14, offset: 21521},
															exprs: []any{
																&andExpr{
																	pos: position{line: 2914, col: 11, offset: 92066},
																	expr: &anyMatcher{
																		line: 2914, col: 13, offset: 92068,
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 680, col: 21, offset: 21528},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonExtraListElement500,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonExtraListElement503,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1509, col: 5, offset: 48842},
													expr: &seqExpr{
														pos: position{line: 1539, col: 27, offset: 49668},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 1539, col: 27, offset: 49668},
																val:        "+",
																ignoreCase: false,
																want:       "\"+\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1539, col: 31, offset: 49672},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonExtraListElement514,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonExtraListElement516,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1510, col: 5, offset: 48870},
													expr: &actionExpr{
														pos: position{line: 1580, col: 5, offset: 50887},
														run: (*parser).callonExtraListElement522,
														expr: &seqExpr{
															pos: position{line: 1580, col: 5, offset: 50887},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 1580, col: 5, offset: 50887},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonExtraListElement525,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1580, col: 12, offset: 50894},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1582, col: 9, offset: 50957},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 1582, col: 9, offset: 50957},
																				run: (*parser).callonExtraListElement529,
																				expr: &seqExpr{
																					pos: position{line: 1582, col: 9, offset: 50957},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1582, col: 9, offset: 50957},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1582, col: 16, offset: 50964},
																								run: (*parser).callonExtraListElement532,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1582, col: 16, offset: 50964},
																									expr: &litMatcher{
																										pos:        position{line: 1582, col: 17, offset: 50965},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1586, col: 9, offset: 51065},
																							run: (*parser).callonExtraListElement535,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1605, col: 11, offset: 51782},
																				run: (*parser).callonExtraListElement536,
																				expr: &seqExpr{
																					pos: position{line: 1605, col: 11, offset: 51782},
																					exprs: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 1605, col: 11, offset: 51782},
																							expr: &charClassMatcher{
																								pos:        position{line: 1605, col: 12, offset: 51783},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1605, col: 20, offset: 51791},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1607, col: 13, offset: 51908},
																				run: (*parser).callonExtraListElement541,
																				expr: &seqExpr{
																					pos: position{line: 1607, col: 13, offset: 51908},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 1607, col: 14, offset: 51909},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1607, col: 21, offset: 51916},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1609, col: 13, offset: 52036},
																				run: (*parser).callonExtraListElement545,
																				expr: &seqExpr{
																					pos: position{line: 1609, col: 13, offset: 52036},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 1609, col: 14, offset: 52037},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1609, col: 21, offset: 52044},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1611, col: 13, offset: 52164},
																				run: (*parser).callonExtraListElement549,
																				expr: &seqExpr{
																					pos: position{line: 1611, col: 13, offset: 52164},
																					exprs: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 1611, col: 13, offset: 52164},
																							expr: &charClassMatcher{
																								pos:        position{line: 1611, col: 14, offset: 52165},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1611, col: 26, offset: 52177},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1613, col: 13, offset: 52297},
																				run: (*parser).callonExtraListElement554,
																				expr: &seqExpr{
																					pos: position{line: 1613, col: 13, offset: 52297},
																					exprs: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 1613, col: 13, offset: 52297},
																							expr: &charClassMatcher{
																								pos:        position{line: 1613, col: 14, offset: 52298},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1613, col: 26, offset: 52310},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2901, col: 11, offset: 91793},
																	run: (*parser).callonExtraListElement559,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		expr: &charClassMatcher{
																			pos:        position{line: 2901, col: 11, offset: 91793},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1511, col: 5, offset: 48900},
													expr: &actionExpr{
														pos: position{line: 1630, col: 5, offset: 52849},
														run: (*parser).callonExtraListElement563,
														expr: &seqExpr{
															pos: position{line: 1630, col: 5, offset: 52849},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 1630, col: 5, offset: 52849},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonExtraListElement566,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1631, col: 5, offset: 52861},
																	label: "style",
																	expr: &actionExpr{
																		pos: position{line: 1632, col: 9, offset: 52877},
																		run: (*parser).callonExtraListElement569,
																		expr: &choiceExpr{
																			pos: position{line: 1632, col: 10, offset: 52878},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 1632, col: 11, offset: 52879},
																					val:        "-",
																					ignoreCase: false,
																					want:       "\"-\"",
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1632, col: 18, offset: 52886},
																					expr: &litMatcher{
																						pos:        position{line: 1632, col: 19, offset: 52887},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1635, col: 7, offset: 52977},
																	run: (*parser).callonExtraListElement574,
																},
																&actionExpr{
																	pos: position{line: 2901, col: 11, offset: 91793},
																	run: (*parser).callonExtraListElement575,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		expr: &charClassMatcher{
																			pos:        position{line: 2901, col: 11, offset: 91793},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1512, col: 5, offset: 48932},
													expr: &actionExpr{
														pos: position{line: 1719, col: 5, offset: 55386},
														run: (*parser).callonExtraListElement579,
														expr: &seqExpr{
															pos: position{line: 1719, col: 5, offset: 55386},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1719, col: 5, offset: 55386},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1719, col: 9, offset: 55390},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1719, col: 14, offset: 55395},
																		run: (*parser).callonExtraListElement583,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1719, col: 14, offset: 55395},
																			expr: &charClassMatcher{
																				pos:        position{line: 1719, col: 14, offset: 55395},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1719, col: 62, offset: 55443},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2901, col: 11, offset: 91793},
																	run: (*parser).callonExtraListElement587,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		expr: &charClassMatcher{
																			pos:        position{line: 2901, col: 11, offset: 91793},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1513, col: 5, offset: 48962},
													expr: &seqExpr{
														pos: position{line: 1513, col: 7, offset: 48964},
														exprs: []any{
															&actionExpr{
																pos: position{line: 1665, col: 5, offset: 53868},
																run: (*parser).callonExtraListElement592,
																expr: &oneOrMoreExpr{
																	pos: position{line: 1665, col: 5, offset: 53868},
																	expr: &seqExpr{
																		pos: position{line: 1665, col: 6, offset: 53869},
																		exprs: []any{
																			&notExpr{
																				pos: position{line: 1665, col: 6, offset: 53869},
																				expr: &actionExpr{
																					pos: position{line: 1670, col: 5, offset: 54019},
																					run: (*parser).callonExtraListElement596,
																					expr: &seqExpr{
																						pos: position{line: 1670, col: 5, offset: 54019},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 1670, col: 5, offset: 54019},
																								label: "separator",
																								expr: &actionExpr{
																									pos: position{line: 1670, col: 16, offset: 54030},
																									run: (*parser).callonExtraListElement599,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1670, col: 16, offset: 54030},
																										expr: &litMatcher{
																											pos:        position{line: 1670, col: 17, offset: 54031},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1673, col: 5, offset: 54088},
																								run: (*parser).callonExtraListElement602,
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1665, col: 35, offset: 53898},
																				expr: &choiceExpr{
																					pos: position{line: 2919, col: 8, offset: 92130},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2906, col: 12, offset: 91903},
																							run: (*parser).callonExtraListElement605,
																							expr: &choiceExpr{
																								pos: position{line: 2906, col: 13, offset: 91904},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2906, col: 13, offset: 91904},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 20, offset: 91911},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 29, offset: 91920},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2916, col: 8, offset: 92080},
																							expr: &anyMatcher{
																								line: 2916, col: 9, offset: 92081,
																							},
																						},
																					},
																				},
																			},
																			&anyMatcher{
																				line: 1665, col: 40, offset: 53903,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1670, col: 5, offset: 54019},
																run: (*parser).callonExtraListElement613,
																expr: &seqExpr{
																	pos: position{line: 1670, col: 5, offset: 54019},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1670, col: 5, offset: 54019},
																			label: "separator",
																			expr: &actionExpr{
																				pos: position{line: 1670, col: 16, offset: 54030},
																				run: (*parser).callonExtraListElement616,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1670, col: 16, offset: 54030},
																					expr: &litMatcher{
																						pos:        position{line: 1670, col: 17, offset: 54031},
																						val:        ":",
																						ignoreCase: false,
																						want:       "\":\"",
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1673, col: 5, offset: 54088},
																			run: (*parser).callonExtraListElement619,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1514, col: 5, offset: 49020},
													expr: &actionExpr{
														pos: position{line: 727, col: 5, offset: 23074},
														run: (*parser).callonExtraListElement621,
														expr: &seqExpr{
															pos: position{line: 727, col: 5, offset: 23074},
															exprs: []any{
																&notExpr{
																	pos: position{line: 727, col: 5, offset: 23074},
																	expr: &charClassMatcher{
																		pos:        position{line: 2787, col: 13, offset: 88827},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 728, col: 5, offset: 23104},
																	label: "delimiter",
																	expr: &choiceExpr{
																		pos: position{line: 729, col: 9, offset: 23124},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 743, col: 5, offset: 23616},
																				run: (*parser).callonExtraListElement627,
																				expr: &seqExpr{
																					pos: position{line: 743, col: 5, offset: 23616},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 743, col: 5, offset: 23616},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 743, col: 16, offset: 23627},
																								run: (*parser).callonExtraListElement630,
																								expr: &seqExpr{
																									pos: position{line: 743, col: 16, offset: 23627},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 743, col: 16, offset: 23627},
																											val:        "////",
																											ignoreCase: false,
																											want:       "\"////\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 743, col: 23, offset: 23634},
																											expr: &litMatcher{
																												pos:        position{line: 743, col: 23, offset: 23634},
																												val:        "/",
																												ignoreCase: false,
																												want:       "\"/\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 745, col: 8, offset: 23718},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement636,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement639,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 750, col: 5, offset: 23864},
																				run: (*parser).callonExtraListElement646,
																				expr: &seqExpr{
																					pos: position{line: 750, col: 5, offset: 23864},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 750, col: 5, offset: 23864},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 750, col: 16, offset: 23875},
																								run: (*parser).callonExtraListElement649,
																								expr: &seqExpr{
																									pos: position{line: 750, col: 16, offset: 23875},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 750, col: 16, offset: 23875},
																											val:        "====",
																											ignoreCase: false,
																											want:       "\"====\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 750, col: 23, offset: 23882},
																											expr: &litMatcher{
																												pos:        position{line: 750, col: 23, offset: 23882},
																												val:        "=",
																												ignoreCase: false,
																												want:       "\"=\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 752, col: 8, offset: 23966},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement655,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement658,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 763, col: 26, offset: 24352},
																				run: (*parser).callonExtraListElement665,
																				expr: &seqExpr{
																					pos: position{line: 763, col: 26, offset: 24352},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 763, col: 26, offset: 24352},
																							val:        "```",
																							ignoreCase: false,
																							want:       "\"```\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 763, col: 32, offset: 24358},
																							label: "language",
																							expr: &actionExpr{
																								pos: position{line: 767, col: 13, offset: 24488},
																								run: (*parser).callonExtraListElement669,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 767, col: 14, offset: 24489},
																									expr: &charClassMatcher{
																										pos:        position{line: 767, col: 14, offset: 24489},
																										val:        "[^\\r\\n` ]",
																										chars:      []rune{'\r', '\n', '`', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 763, col: 52, offset: 24378},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement673,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement676,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 757, col: 5, offset: 24111},
																				run: (*parser).callonExtraListElement683,
																				expr: &seqExpr{
																					pos: position{line: 757, col: 5, offset: 24111},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 757, col: 5, offset: 24111},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 757, col: 16, offset: 24122},
																								run: (*parser).callonExtraListElement686,
																								expr: &seqExpr{
																									pos: position{line: 757, col: 16, offset: 24122},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 757, col: 16, offset: 24122},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 757, col: 22, offset: 24128},
																											expr: &litMatcher{
																												pos:        position{line: 757, col: 22, offset: 24128},
																												val:        "`",
																												ignoreCase: false,
																												want:       "\"`\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 759, col: 8, offset: 24212},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement692,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement695,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 772, col: 5, offset: 24648},
																				run: (*parser).callonExtraListElement702,
																				expr: &seqExpr{
																					pos: position{line: 772, col: 5, offset: 24648},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 772, col: 5, offset: 24648},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 772, col: 16, offset: 24659},
																								run: (*parser).callonExtraListElement705,
																								expr: &seqExpr{
																									pos: position{line: 772, col: 16, offset: 24659},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 772, col: 16, offset: 24659},
																											val:        "----",
																											ignoreCase: false,
																											want:       "\"----\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 772, col: 23, offset: 24666},
																											expr: &litMatcher{
																												pos:        position{line: 772, col: 23, offset: 24666},
																												val:        "-",
																												ignoreCase: false,
																												want:       "\"-\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 774, col: 8, offset: 24750},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement711,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement714,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 786, col: 5, offset: 25124},
																				run: (*parser).callonExtraListElement721,
																				expr: &seqExpr{
																					pos: position{line: 786, col: 5, offset: 25124},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 786, col: 5, offset: 25124},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 786, col: 16, offset: 25135},
																								run: (*parser).callonExtraListElement724,
																								expr: &seqExpr{
																									pos: position{line: 786, col: 16, offset: 25135},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 786, col: 16, offset: 25135},
																											val:        "....",
																											ignoreCase: false,
																											want:       "\"....\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 786, col: 23, offset: 25142},
																											expr: &litMatcher{
																												pos:        position{line: 786, col: 23, offset: 25142},
																												val:        ".",
																												ignoreCase: false,
																												want:       "\".\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 788, col: 8, offset: 25226},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement730,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement733,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 793, col: 5, offset: 25376},
																				run: (*parser).callonExtraListElement740,
																				expr: &seqExpr{
																					pos: position{line: 793, col: 5, offset: 25376},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 793, col: 5, offset: 25376},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 793, col: 16, offset: 25387},
																								run: (*parser).callonExtraListElement743,
																								expr: &seqExpr{
																									pos: position{line: 793, col: 16, offset: 25387},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 793, col: 16, offset: 25387},
																											val:        "++++",
																											ignoreCase: false,
																											want:       "\"++++\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 793, col: 23, offset: 25394},
																											expr: &litMatcher{
																												pos:        position{line: 793, col: 23, offset: 25394},
																												val:        "+",
																												ignoreCase: false,
																												want:       "\"+\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 795, col: 8, offset: 25478},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement749,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement752,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 800, col: 5, offset: 25626},
																				run: (*parser).callonExtraListElement759,
																				expr: &seqExpr{
																					pos: position{line: 800, col: 5, offset: 25626},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 800, col: 5, offset: 25626},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 800, col: 16, offset: 25637},
																								run: (*parser).callonExtraListElement762,
																								expr: &seqExpr{
																									pos: position{line: 800, col: 16, offset: 25637},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 800, col: 16, offset: 25637},
																											val:        "____",
																											ignoreCase: false,
																											want:       "\"____\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 800, col: 23, offset: 25644},
																											expr: &litMatcher{
																												pos:        position{line: 800, col: 23, offset: 25644},
																												val:        "_",
																												ignoreCase: false,
																												want:       "\"_\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 802, col: 8, offset: 25728},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement768,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement771,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 807, col: 5, offset: 25872},
																				run: (*parser).callonExtraListElement778,
																				expr: &seqExpr{
																					pos: position{line: 807, col: 5, offset: 25872},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 807, col: 5, offset: 25872},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 807, col: 16, offset: 25883},
																								run: (*parser).callonExtraListElement781,
																								expr: &seqExpr{
																									pos: position{line: 807, col: 16, offset: 25883},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 807, col: 16, offset: 25883},
																											val:        "****",
																											ignoreCase: false,
																											want:       "\"****\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 807, col: 23, offset: 25890},
																											expr: &litMatcher{
																												pos:        position{line: 807, col: 23, offset: 25890},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 809, col: 8, offset: 25974},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonExtraListElement787,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonExtraListElement790,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1515, col: 5, offset: 49040},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2847, col: 14, offset: 90325},
														run: (*parser).callonExtraListElement798,
														expr: &oneOrMoreExpr{
															pos: position{line: 2847, col: 14, offset: 90325},
															expr: &charClassMatcher{
																pos:        position{line: 2847, col: 14, offset: 90325},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonExtraListElement802,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuation",
			pos:  position{line: 1531, col: 1, offset: 49431},
			expr: &actionExpr{
				pos: position{line: 1532, col: 5, offset: 49456},
				run: (*parser).callonListContinuation1,
				expr: &seqExpr{
					pos: position{line: 1532, col: 5, offset: 49456},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1532, col: 5, offset: 49456},
							label: "offset",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1532, col: 12, offset: 49463},
								expr: &seqExpr{
									pos: position{line: 1532, col: 13, offset: 49464},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 1532, col: 13, offset: 49464},
											expr: &actionExpr{
												pos: position{line: 2897, col: 10, offset: 91732},
												run: (*parser).callonListContinuation7,
												expr: &charClassMatcher{
													pos:        position{line: 2897, col: 10, offset: 91732},
													val:        "[\\t ]",
													chars:      []rune{'\t', ' '},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&actionExpr{
											pos: position{line: 2906, col: 12, offset: 91903},
											run: (*parser).callonListContinuation9,
											expr: &choiceExpr{
												pos: position{line: 2906, col: 13, offset: 91904},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 2906, col: 13, offset: 91904},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2906, col: 20, offset: 91911},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2906, col: 29, offset: 91920},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1539, col: 27, offset: 49668},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1539, col: 31, offset: 49672},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonListContinuation16,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&actionExpr{
							pos: position{line: 2906, col: 12, offset: 91903},
							run: (*parser).callonListContinuation18,
							expr: &choiceExpr{
								pos: position{line: 2906, col: 13, offset: 91904},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 2906, col: 13, offset: 91904},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2906, col: 20, offset: 91911},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2906, col: 29, offset: 91920},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1534, col: 5, offset: 49513},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 1534, col: 13, offset: 49521},
								expr: &ruleRefExpr{
									pos:  position{line: 1534, col: 13, offset: 49521},
									name: "ListContinuationElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuationElement",
			pos:  position{line: 1541, col: 1, offset: 49688},
			expr: &actionExpr{
				pos: position{line: 1542, col: 5, offset: 49759},
				run: (*parser).callonListContinuationElement1,
				expr: &seqExpr{
					pos: position{line: 1542, col: 5, offset: 49759},
					exprs: []any{
						&andExpr{
							pos: position{line: 2914, col: 11, offset: 92066},
							expr: &anyMatcher{
								line: 2914, col: 13, offset: 92068,
							},
						},
						&notExpr{
							pos: position{line: 1543, col: 5, offset: 49787},
							expr: &choiceExpr{
								pos: position{line: 1480, col: 5, offset: 47745},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1573, col: 5, offset: 50679},
										run: (*parser).callonListContinuationElement7,
										expr: &seqExpr{
											pos: position{line: 1573, col: 5, offset: 50679},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1573, col: 5, offset: 50679},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1580, col: 5, offset: 50887},
														run: (*parser).callonListContinuationElement10,
														expr: &seqExpr{
															pos: position{line: 1580, col: 5, offset: 50887},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 1580, col: 5, offset: 50887},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListContinuationElement13,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1580, col: 12, offset: 50894},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1582, col: 9, offset: 50957},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 1582, col: 9, offset: 50957},
																				run: (*parser).callonListContinuationElement17,
																				expr: &seqExpr{
																					pos: position{line: 1582, col: 9, offset: 50957},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1582, col: 9, offset: 50957},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1582, col: 16, offset: 50964},
																								run: (*parser).callonListContinuationElement20,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1582, col: 16, offset: 50964},
																									expr: &litMatcher{
																										pos:        position{line: 1582, col: 17, offset: 50965},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1586, col: 9, offset: 51065},
																							run: (*parser).callonListContinuationElement23,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1605, col: 11, offset: 51782},
																				run: (*parser).callonListContinuationElement24,
																				expr: &seqExpr{
																					pos: position{line: 1605, col: 11, offset: 51782},
																					exprs: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 1605, col: 11, offset: 51782},
																							expr: &charClassMatcher{
																								pos:        position{line: 1605, col: 12, offset: 51783},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1605, col: 20, offset: 51791},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1607, col: 13, offset: 51908},
																				run: (*parser).callonListContinuationElement29,
																				expr: &seqExpr{
																					pos: position{line: 1607, col: 13, offset: 51908},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 1607, col: 14, offset: 51909},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1607, col: 21, offset: 51916},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1609, col: 13, offset: 52036},
																				run: (*parser).callonListContinuationElement33,
																				expr: &seqExpr{
																					pos: position{line: 1609, col: 13, offset: 52036},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 1609, col: 14, offset: 52037},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1609, col: 21, offset: 52044},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1611, col: 13, offset: 52164},
																				run: (*parser).callonListContinuationElement37,
																				expr: &seqExpr{
																					pos: position{line: 1611, col: 13, offset: 52164},
																					exprs: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 1611, col: 13, offset: 52164},
																							expr: &charClassMatcher{
																								pos:        position{line: 1611, col: 14, offset: 52165},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1611, col: 26, offset: 52177},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1613, col: 13, offset: 52297},
																				run: (*parser).callonListContinuationElement42,
																				expr: &seqExpr{
																					pos: position{line: 1613, col: 13, offset: 52297},
																					exprs: []any{
																						&oneOrMoreExpr{
																							pos: position{line: 1613, col: 13, offset: 52297},
																							expr: &charClassMatcher{
																								pos:        position{line: 1613, col: 14, offset: 52298},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1613, col: 26, offset: 52310},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2901, col: 11, offset: 91793},
																	run: (*parser).callonListContinuationElement47,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		expr: &charClassMatcher{
																			pos:        position{line: 2901, col: 11, offset: 91793},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1574, col: 5, offset: 50718},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1521, col: 5, offset: 49185},
														run: (*parser).callonListContinuationElement51,
														expr: &seqExpr{
															pos: position{line: 1521, col: 5, offset: 49185},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 1521, col: 5, offset: 49185},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1521, col: 14, offset: 49194},
																		expr: &actionExpr{
																			pos: position{line: 1521, col: 15, offset: 49195},
																			run: (*parser).callonListContinuationElement55,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1521, col: 15, offset: 49195},
																				expr: &charClassMatcher{
																					pos:        position{line: 1521, col: 15, offset: 49195},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement59,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1623, col: 5, offset: 52576},
										run: (*parser).callonListContinuationElement66,
										expr: &seqExpr{
											pos: position{line: 1623, col: 5, offset: 52576},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1623, col: 5, offset: 52576},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1630, col: 5, offset: 52849},
														run: (*parser).callonListContinuationElement69,
														expr: &seqExpr{
															pos: position{line: 1630, col: 5, offset: 52849},
															exprs: []any{
																&zeroOrMoreExpr{
																	pos: position{line: 1630, col: 5, offset: 52849},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListContinuationElement72,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1631, col: 5, offset: 52861},
																	label: "style",
																	expr: &actionExpr{
																		pos: position{line: 1632, col: 9, offset: 52877},
																		run: (*parser).callonListContinuationElement75,
																		expr: &choiceExpr{
																			pos: position{line: 1632, col: 10, offset: 52878},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 1632, col: 11, offset: 52879},
																					val:        "-",
																					ignoreCase: false,
																					want:       "\"-\"",
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1632, col: 18, offset: 52886},
																					expr: &litMatcher{
																						pos:        position{line: 1632, col: 19, offset: 52887},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1635, col: 7, offset: 52977},
																	run: (*parser).callonListContinuationElement80,
																},
																&actionExpr{
																	pos: position{line: 2901, col: 11, offset: 91793},
																	run: (*parser).callonListContinuationElement81,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		expr: &charClassMatcher{
																			pos:        position{line: 2901, col: 11, offset: 91793},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1624, col: 5, offset: 52617},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1624, col: 16, offset: 52628},
														expr: &actionExpr{
															pos: position{line: 1645, col: 5, offset: 53242},
															run: (*parser).callonListContinuationElement86,
															expr: &seqExpr{
																pos: position{line: 1645, col: 5, offset: 53242},
																exprs: []any{
																	&andExpr{
																		pos: position{line: 1645, col: 5, offset: 53242},
																		expr: &litMatcher{
																			pos:        position{line: 1645, col: 6, offset: 53243},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1645, col: 10, offset: 53247},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1646, col: 7, offset: 53261},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 1646, col: 7, offset: 53261},
																					run: (*parser).callonListContinuationElement92,
																					expr: &litMatcher{
																						pos:        position{line: 1646, col: 7, offset: 53261},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1647, col: 7, offset: 53306},
																					run: (*parser).callonListContinuationElement94,
																					expr: &litMatcher{
																						pos:        position{line: 1647, col: 7, offset: 53306},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1648, col: 7, offset: 53349},
																					run: (*parser).callonListContinuationElement96,
																					expr: &litMatcher{
																						pos:        position{line: 1648, col: 7, offset: 53349},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		run: (*parser).callonListContinuationElement98,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2901, col: 11, offset: 91793},
																			expr: &charClassMatcher{
																				pos:        position{line: 2901, col: 11, offset: 91793},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1625, col: 5, offset: 52667},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1521, col: 5, offset: 49185},
														run: (*parser).callonListContinuationElement102,
														expr: &seqExpr{
															pos: position{line: 1521, col: 5, offset: 49185},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 1521, col: 5, offset: 49185},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1521, col: 14, offset: 49194},
																		expr: &actionExpr{
																			pos: position{line: 1521, col: 15, offset: 49195},
																			run: (*parser).callonListContinuationElement106,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1521, col: 15, offset: 49195},
																				expr: &charClassMatcher{
																					pos:        position{line: 1521, col: 15, offset: 49195},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement110,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1713, col: 5, offset: 55189},
										run: (*parser).callonListContinuationElement117,
										expr: &seqExpr{
											pos: position{line: 1713, col: 5, offset: 55189},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1713, col: 5, offset: 55189},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1719, col: 5, offset: 55386},
														run: (*parser).callonListContinuationElement120,
														expr: &seqExpr{
															pos: position{line: 1719, col: 5, offset: 55386},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 1719, col: 5, offset: 55386},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1719, col: 9, offset: 55390},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1719, col: 14, offset: 55395},
																		run: (*parser).callonListContinuationElement124,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1719, col: 14, offset: 55395},
																			expr: &charClassMatcher{
																				pos:        position{line: 1719, col: 14, offset: 55395},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1719, col: 62, offset: 55443},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2901, col: 11, offset: 91793},
																	run: (*parser).callonListContinuationElement128,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		expr: &charClassMatcher{
																			pos:        position{line: 2901, col: 11, offset: 91793},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1714, col: 5, offset: 55225},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1521, col: 5, offset: 49185},
														run: (*parser).callonListContinuationElement132,
														expr: &seqExpr{
															pos: position{line: 1521, col: 5, offset: 49185},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 1521, col: 5, offset: 49185},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1521, col: 14, offset: 49194},
																		expr: &actionExpr{
																			pos: position{line: 1521, col: 15, offset: 49195},
																			run: (*parser).callonListContinuationElement136,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1521, col: 15, offset: 49195},
																				expr: &charClassMatcher{
																					pos:        position{line: 1521, col: 15, offset: 49195},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement140,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1657, col: 5, offset: 53542},
										run: (*parser).callonListContinuationElement147,
										expr: &seqExpr{
											pos: position{line: 1657, col: 5, offset: 53542},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1657, col: 5, offset: 53542},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1665, col: 5, offset: 53868},
														run: (*parser).callonListContinuationElement150,
														expr: &oneOrMoreExpr{
															pos: position{line: 1665, col: 5, offset: 53868},
															expr: &seqExpr{
																pos: position{line: 1665, col: 6, offset: 53869},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 1665, col: 6, offset: 53869},
																		expr: &actionExpr{
																			pos: position{line: 1670, col: 5, offset: 54019},
																			run: (*parser).callonListContinuationElement154,
																			expr: &seqExpr{
																				pos: position{line: 1670, col: 5, offset: 54019},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 1670, col: 5, offset: 54019},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1670, col: 16, offset: 54030},
																							run: (*parser).callonListContinuationElement157,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1670, col: 16, offset: 54030},
																								expr: &litMatcher{
																									pos:        position{line: 1670, col: 17, offset: 54031},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1673, col: 5, offset: 54088},
																						run: (*parser).callonListContinuationElement160,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1665, col: 35, offset: 53898},
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonListContinuationElement163,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1665, col: 40, offset: 53903,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1658, col: 5, offset: 53577},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1670, col: 5, offset: 54019},
														run: (*parser).callonListContinuationElement172,
														expr: &seqExpr{
															pos: position{line: 1670, col: 5, offset: 54019},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 1670, col: 5, offset: 54019},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1670, col: 16, offset: 54030},
																		run: (*parser).callonListContinuationElement175,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1670, col: 16, offset: 54030},
																			expr: &litMatcher{
																				pos:        position{line: 1670, col: 17, offset: 54031},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1673, col: 5, offset: 54088},
																	run: (*parser).callonListContinuationElement178,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1659, col: 5, offset: 53622},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1681, col: 5, offset: 54337},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 1683, col: 9, offset: 54403},
																run: (*parser).callonListContinuationElement181,
																expr: &seqExpr{
																	pos: position{line: 1683, col: 9, offset: 54403},
																	exprs: []any{
																		&zeroOrMoreExpr{
																			pos: position{line: 1683, col: 9, offset: 54403},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonListContinuationElement184,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonListContinuationElement187,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1684, col: 9, offset: 54422},
																			expr: &actionExpr{
																				pos: position{line: 680, col: 14, offset: 21521},
																				run: (*parser).callonListContinuationElement195,
																				expr: &seqExpr{
																					pos: position{line: 680, col: 14, offset: 21521},
																					exprs: []any{
																						&andExpr{
																							pos: position{line: 2914, col: 11, offset: 92066},
																							expr: &anyMatcher{
																								line: 2914, col: 13, offset: 92068,
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 680, col: 21, offset: 21528},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonListContinuationElement200,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonListContinuationElement203,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1690, col: 9, offset: 54551},
																run: (*parser).callonListContinuationElement210,
																expr: &seqExpr{
																	pos: position{line: 1690, col: 9, offset: 54551},
																	exprs: []any{
																		&actionExpr{
																			pos: position{line: 2901, col: 11, offset: 91793},
																			run: (*parser).callonListContinuationElement212,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2901, col: 11, offset: 91793},
																				expr: &charClassMatcher{
																					pos:        position{line: 2901, col: 11, offset: 91793},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1691, col: 9, offset: 54624},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1691, col: 18, offset: 54633},
																				run: (*parser).callonListContinuationElement216,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1691, col: 18, offset: 54633},
																					expr: &charClassMatcher{
																						pos:        position{line: 1691, col: 18, offset: 54633},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonListContinuationElement220,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 5, offset: 49804},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1544, col: 16, offset: 49815},
								expr: &ruleRefExpr{
									pos:  position{line: 1544, col: 17, offset: 49816},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1545, col: 5, offset: 49838},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1546, col: 9, offset: 49856},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 680, col: 14, offset: 21521},
										run: (*parser).callonListContinuationElement232,
										expr: &seqExpr{
											pos: position{line: 680, col: 14, offset: 21521},
											exprs: []any{
												&andExpr{
													pos: position{line: 2914, col: 11, offset: 92066},
													expr: &anyMatcher{
														line: 2914, col: 13, offset: 92068,
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 680, col: 21, offset: 21528},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonListContinuationElement237,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonListContinuationElement240,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1547, col: 11, offset: 49876},
										name: "AttributeDeclaration",
									},
									&actionExpr{
										pos: position{line: 363, col: 19, offset: 10942},
										run: (*parser).callonListContinuationElement248,
										expr: &seqExpr{
											pos: position{line: 363, col: 19, offset: 10942},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 363, col: 19, offset: 10942},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 363, col: 24, offset: 10947},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 321, col: 18, offset: 9768},
														run: (*parser).callonListContinuationElement252,
														expr: &seqExpr{
															pos: position{line: 321, col: 18, offset: 9768},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 321, col: 18, offset: 9768},
																	val:        "[_\\pL\\pN]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 321, col: 28, offset: 9778},
																	expr: &charClassMatcher{
																		pos:        position{line: 321, col: 29, offset: 9779},
																		val:        "[-\\pL\\pN]",
																		chars:      []rune{'-'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 363, col: 45, offset: 10968},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 363, col: 49, offset: 10972},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonListContinuationElement259,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonListContinuationElement262,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 365, col: 9, offset: 11063},
										run: (*parser).callonListContinuationElement269,
										expr: &seqExpr{
											pos: position{line: 365, col: 9, offset: 11063},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 365, col: 9, offset: 11063},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 365, col: 13, offset: 11067},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 321, col: 18, offset: 9768},
														run: (*parser).callonListContinuationElement273,
														expr: &seqExpr{
															pos: position{line: 321, col: 18, offset: 9768},
															exprs: []any{
																&charClassMatcher{
																	pos:        position{line: 321, col: 18, offset: 9768},
																	val:        "[_\\pL\\pN]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 321, col: 28, offset: 9778},
																	expr: &charClassMatcher{
																		pos:        position{line: 321, col: 29, offset: 9779},
																		val:        "[-\\pL\\pN]",
																		chars:      []rune{'-'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 365, col: 34, offset: 11088},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 365, col: 39, offset: 11093},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonListContinuationElement280,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonListContinuationElement283,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 823, col: 5, offset: 26356},
										run: (*parser).callonListContinuationElement290,
										expr: &seqExpr{
											pos: position{line: 823, col: 5, offset: 26356},
											exprs: []any{
												&actionExpr{
													pos: position{line: 743, col: 5, offset: 23616},
													run: (*parser).callonListContinuationElement292,
													expr: &seqExpr{
														pos: position{line: 743, col: 5, offset: 23616},
														exprs: []any{
															&labeledExpr{
																pos:   position{line: 743, col: 5, offset: 23616},
																label: "delimiter",
																expr: &actionExpr{
																	pos: position{line: 743, col: 16, offset: 23627},
																	run: (*parser).callonListContinuationElement295,
																	expr: &seqExpr{
																		pos: position{line: 743, col: 16, offset: 23627},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 743, col: 16, offset: 23627},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 743, col: 23, offset: 23634},
																				expr: &litMatcher{
																					pos:        position{line: 743, col: 23, offset: 23634},
																					val:        "/",
																					ignoreCase: false,
																					want:       "\"/\"",
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 745, col: 8, offset: 23718},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonListContinuationElement301,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2919, col: 8, offset: 92130},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 2906, col: 12, offset: 91903},
																		run: (*parser).callonListContinuationElement304,
																		expr: &choiceExpr{
																			pos: position{line: 2906, col: 13, offset: 91904},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2906, col: 13, offset: 91904},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 20, offset: 91911},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 29, offset: 91920},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 824, col: 5, offset: 26387},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 834, col: 5, offset: 26673},
														expr: &actionExpr{
															pos: position{line: 834, col: 6, offset: 26674},
															run: (*parser).callonListContinuationElement313,
															expr: &seqExpr{
																pos: position{line: 834, col: 6, offset: 26674},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 834, col: 6, offset: 26674},
																		expr: &choiceExpr{
																			pos: position{line: 831, col: 29, offset: 26616},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 743, col: 5, offset: 23616},
																					run: (*parser).callonListContinuationElement317,
																					expr: &seqExpr{
																						pos: position{line: 743, col: 5, offset: 23616},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 743, col: 5, offset: 23616},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 743, col: 16, offset: 23627},
																									run: (*parser).callonListContinuationElement320,
																									expr: &seqExpr{
																										pos: position{line: 743, col: 16, offset: 23627},
																										exprs: []any{
																											&litMatcher{
																												pos:        position{line: 743, col: 16, offset: 23627},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 743, col: 23, offset: 23634},
																												expr: &litMatcher{
																													pos:        position{line: 743, col: 23, offset: 23634},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 745, col: 8, offset: 23718},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonListContinuationElement326,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonListContinuationElement329,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 835, col: 5, offset: 26704},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 814, col: 5, offset: 26120},
																			run: (*parser).callonListContinuationElement339,
																			expr: &seqExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 815, col: 5, offset: 26195},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2843, col: 13, offset: 90258},
																							run: (*parser).callonListContinuationElement344,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								expr: &charClassMatcher{
																									pos:        position{line: 2843, col: 13, offset: 90258},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonListContinuationElement348,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 825, col: 5, offset: 26421},
													expr: &choiceExpr{
														pos: position{line: 831, col: 29, offset: 26616},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 743, col: 5, offset: 23616},
																run: (*parser).callonListContinuationElement357,
																expr: &seqExpr{
																	pos: position{line: 743, col: 5, offset: 23616},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 743, col: 5, offset: 23616},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 743, col: 16, offset: 23627},
																				run: (*parser).callonListContinuationElement360,
																				expr: &seqExpr{
																					pos: position{line: 743, col: 16, offset: 23627},
																					exprs: []any{
																						&litMatcher{
																							pos:        position{line: 743, col: 16, offset: 23627},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 743, col: 23, offset: 23634},
																							expr: &litMatcher{
																								pos:        position{line: 743, col: 23, offset: 23634},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 745, col: 8, offset: 23718},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonListContinuationElement366,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonListContinuationElement369,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 843, col: 5, offset: 26857},
										run: (*parser).callonListContinuationElement378,
										expr: &seqExpr{
											pos: position{line: 843, col: 5, offset: 26857},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 843, col: 5, offset: 26857},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 750, col: 5, offset: 23864},
														run: (*parser).callonListContinuationElement381,
														expr: &seqExpr{
															pos: position{line: 750, col: 5, offset: 23864},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 750, col: 5, offset: 23864},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 750, col: 16, offset: 23875},
																		run: (*parser).callonListContinuationElement384,
																		expr: &seqExpr{
																			pos: position{line: 750, col: 16, offset: 23875},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 750, col: 16, offset: 23875},
																					val:        "====",
																					ignoreCase: false,
																					want:       "\"====\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 750, col: 23, offset: 23882},
																					expr: &litMatcher{
																						pos:        position{line: 750, col: 23, offset: 23882},
																						val:        "=",
																						ignoreCase: false,
																						want:       "\"=\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 752, col: 8, offset: 23966},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListContinuationElement390,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement393,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 844, col: 5, offset: 26896},
													run: (*parser).callonListContinuationElement400,
												},
												&labeledExpr{
													pos:   position{line: 847, col: 5, offset: 26988},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 862, col: 4, offset: 27385},
														expr: &actionExpr{
															pos: position{line: 862, col: 5, offset: 27386},
															run: (*parser).callonListContinuationElement403,
															expr: &seqExpr{
																pos: position{line: 862, col: 5, offset: 27386},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 862, col: 5, offset: 27386},
																		expr: &choiceExpr{
																			pos: position{line: 855, col: 5, offset: 27228},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 855, col: 5, offset: 27228},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 855, col: 5, offset: 27228},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 750, col: 5, offset: 23864},
																								run: (*parser).callonListContinuationElement409,
																								expr: &seqExpr{
																									pos: position{line: 750, col: 5, offset: 23864},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 750, col: 5, offset: 23864},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 750, col: 16, offset: 23875},
																												run: (*parser).callonListContinuationElement412,
																												expr: &seqExpr{
																													pos: position{line: 750, col: 16, offset: 23875},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 750, col: 16, offset: 23875},
																															val:        "====",
																															ignoreCase: false,
																															want:       "\"====\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 750, col: 23, offset: 23882},
																															expr: &litMatcher{
																																pos:        position{line: 750, col: 23, offset: 23882},
																																val:        "=",
																																ignoreCase: false,
																																want:       "\"=\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 752, col: 8, offset: 23966},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement418,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement421,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 856, col: 5, offset: 27259},
																							run: (*parser).callonListContinuationElement428,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 863, col: 5, offset: 27416},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 814, col: 5, offset: 26120},
																			run: (*parser).callonListContinuationElement432,
																			expr: &seqExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 815, col: 5, offset: 26195},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2843, col: 13, offset: 90258},
																							run: (*parser).callonListContinuationElement437,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								expr: &charClassMatcher{
																									pos:        position{line: 2843, col: 13, offset: 90258},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonListContinuationElement441,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 848, col: 5, offset: 27022},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 848, col: 9, offset: 27026},
														expr: &choiceExpr{
															pos: position{line: 855, col: 5, offset: 27228},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 855, col: 5, offset: 27228},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 855, col: 5, offset: 27228},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 750, col: 5, offset: 23864},
																				run: (*parser).callonListContinuationElement453,
																				expr: &seqExpr{
																					pos: position{line: 750, col: 5, offset: 23864},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 750, col: 5, offset: 23864},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 750, col: 16, offset: 23875},
																								run: (*parser).callonListContinuationElement456,
																								expr: &seqExpr{
																									pos: position{line: 750, col: 16, offset: 23875},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 750, col: 16, offset: 23875},
																											val:        "====",
																											ignoreCase: false,
																											want:       "\"====\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 750, col: 23, offset: 23882},
																											expr: &litMatcher{
																												pos:        position{line: 750, col: 23, offset: 23882},
																												val:        "=",
																												ignoreCase: false,
																												want:       "\"=\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 752, col: 8, offset: 23966},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonListContinuationElement462,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonListContinuationElement465,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 856, col: 5, offset: 27259},
																			run: (*parser).callonListContinuationElement472,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2916, col: 8, offset: 92080},
																	expr: &anyMatcher{
																		line: 2916, col: 9, offset: 92081,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 955, col: 5, offset: 29708},
										run: (*parser).callonListContinuationElement475,
										expr: &seqExpr{
											pos: position{line: 955, col: 5, offset: 29708},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 955, col: 5, offset: 29708},
													label: "delimiter",
													expr: &actionExpr{
														pos: position{line: 763, col: 26, offset: 24352},
														run: (*parser).callonListContinuationElement478,
														expr: &seqExpr{
															pos: position{line: 763, col: 26, offset: 24352},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 763, col: 26, offset: 24352},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&labeledExpr{
																	pos:   position{line: 763, col: 32, offset: 24358},
																	label: "language",
																	expr: &actionExpr{
																		pos: position{line: 767, col: 13, offset: 24488},
																		run: (*parser).callonListContinuationElement482,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 767, col: 14, offset: 24489},
																			expr: &charClassMatcher{
																				pos:        position{line: 767, col: 14, offset: 24489},
																				val:        "[^\\r\\n` ]",
																				chars:      []rune{'\r', '\n', '`', ' '},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 763, col: 52, offset: 24378},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListContinuationElement486,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement489,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 956, col: 5, offset: 29754},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 969, col: 5, offset: 30227},
														expr: &actionExpr{
															pos: position{line: 969, col: 6, offset: 30228},
															run: (*parser).callonListContinuationElement498,
															expr: &seqExpr{
																pos: position{line: 969, col: 6, offset: 30228},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 969, col: 6, offset: 30228},
																		expr: &seqExpr{
																			pos: position{line: 966, col: 34, offset: 30175},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 966, col: 34, offset: 30175},
																					val:        "```",
																					ignoreCase: false,
																					want:       "\"```\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 966, col: 40, offset: 30181},
																					expr: &actionExpr{
																						pos: position{line: 2897, col: 10, offset: 91732},
																						run: (*parser).callonListContinuationElement504,
																						expr: &charClassMatcher{
																							pos:        position{line: 2897, col: 10, offset: 91732},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2919, col: 8, offset: 92130},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2906, col: 12, offset: 91903},
																							run: (*parser).callonListContinuationElement507,
																							expr: &choiceExpr{
																								pos: position{line: 2906, col: 13, offset: 91904},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2906, col: 13, offset: 91904},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 20, offset: 91911},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 29, offset: 91920},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2916, col: 8, offset: 92080},
																							expr: &anyMatcher{
																								line: 2916, col: 9, offset: 92081,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 970, col: 5, offset: 30263},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 814, col: 5, offset: 26120},
																			run: (*parser).callonListContinuationElement515,
																			expr: &seqExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 815, col: 5, offset: 26195},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2843, col: 13, offset: 90258},
																							run: (*parser).callonListContinuationElement520,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								expr: &charClassMatcher{
																									pos:        position{line: 2843, col: 13, offset: 90258},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonListContinuationElement524,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 957, col: 5, offset: 29793},
													expr: &seqExpr{
														pos: position{line: 966, col: 34, offset: 30175},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 966, col: 34, offset: 30175},
																val:        "```",
																ignoreCase: false,
																want:       "\"```\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 966, col: 40, offset: 30181},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonListContinuationElement535,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2919, col: 8, offset: 92130},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 2906, col: 12, offset: 91903},
																		run: (*parser).callonListContinuationElement538,
																		expr: &choiceExpr{
																			pos: position{line: 2906, col: 13, offset: 91904},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2906, col: 13, offset: 91904},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 20, offset: 91911},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 29, offset: 91920},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 871, col: 5, offset: 27569},
										run: (*parser).callonListContinuationElement545,
										expr: &seqExpr{
											pos: position{line: 871, col: 5, offset: 27569},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 871, col: 5, offset: 27569},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 757, col: 5, offset: 24111},
														run: (*parser).callonListContinuationElement548,
														expr: &seqExpr{
															pos: position{line: 757, col: 5, offset: 24111},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 757, col: 5, offset: 24111},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 757, col: 16, offset: 24122},
																		run: (*parser).callonListContinuationElement551,
																		expr: &seqExpr{
																			pos: position{line: 757, col: 16, offset: 24122},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 757, col: 16, offset: 24122},
																					val:        "```",
																					ignoreCase: false,
																					want:       "\"```\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 757, col: 22, offset: 24128},
																					expr: &litMatcher{
																						pos:        position{line: 757, col: 22, offset: 24128},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 759, col: 8, offset: 24212},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListContinuationElement557,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement560,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 872, col: 5, offset: 27607},
													run: (*parser).callonListContinuationElement567,
												},
												&labeledExpr{
													pos:   position{line: 875, col: 5, offset: 27699},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 890, col: 5, offset: 28089},
														expr: &actionExpr{
															pos: position{line: 890, col: 6, offset: 28090},
															run: (*parser).callonListContinuationElement570,
															expr: &seqExpr{
																pos: position{line: 890, col: 6, offset: 28090},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 890, col: 6, offset: 28090},
																		expr: &choiceExpr{
																			pos: position{line: 883, col: 5, offset: 27933},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 883, col: 5, offset: 27933},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 883, col: 5, offset: 27933},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 757, col: 5, offset: 24111},
																								run: (*parser).callonListContinuationElement576,
																								expr: &seqExpr{
																									pos: position{line: 757, col: 5, offset: 24111},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 757, col: 5, offset: 24111},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 757, col: 16, offset: 24122},
																												run: (*parser).callonListContinuationElement579,
																												expr: &seqExpr{
																													pos: position{line: 757, col: 16, offset: 24122},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 757, col: 16, offset: 24122},
																															val:        "```",
																															ignoreCase: false,
																															want:       "\"```\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 757, col: 22, offset: 24128},
																															expr: &litMatcher{
																																pos:        position{line: 757, col: 22, offset: 24128},
																																val:        "`",
																																ignoreCase: false,
																																want:       "\"`\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 759, col: 8, offset: 24212},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement585,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement588,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 884, col: 5, offset: 27963},
																							run: (*parser).callonListContinuationElement595,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 891, col: 5, offset: 28119},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 814, col: 5, offset: 26120},
																			run: (*parser).callonListContinuationElement599,
																			expr: &seqExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 815, col: 5, offset: 26195},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2843, col: 13, offset: 90258},
																							run: (*parser).callonListContinuationElement604,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								expr: &charClassMatcher{
																									pos:        position{line: 2843, col: 13, offset: 90258},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonListContinuationElement608,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 876, col: 5, offset: 27732},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 876, col: 9, offset: 27736},
														expr: &choiceExpr{
															pos: position{line: 883, col: 5, offset: 27933},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 883, col: 5, offset: 27933},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 883, col: 5, offset: 27933},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 757, col: 5, offset: 24111},
																				run: (*parser).callonListContinuationElement620,
																				expr: &seqExpr{
																					pos: position{line: 757, col: 5, offset: 24111},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 757, col: 5, offset: 24111},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 757, col: 16, offset: 24122},
																								run: (*parser).callonListContinuationElement623,
																								expr: &seqExpr{
																									pos: position{line: 757, col: 16, offset: 24122},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 757, col: 16, offset: 24122},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 757, col: 22, offset: 24128},
																											expr: &litMatcher{
																												pos:        position{line: 757, col: 22, offset: 24128},
																												val:        "`",
																												ignoreCase: false,
																												want:       "\"`\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 759, col: 8, offset: 24212},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonListContinuationElement629,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonListContinuationElement632,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 884, col: 5, offset: 27963},
																			run: (*parser).callonListContinuationElement639,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2916, col: 8, offset: 92080},
																	expr: &anyMatcher{
																		line: 2916, col: 9, offset: 92081,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 899, col: 5, offset: 28274},
										run: (*parser).callonListContinuationElement642,
										expr: &seqExpr{
											pos: position{line: 899, col: 5, offset: 28274},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 899, col: 5, offset: 28274},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 772, col: 5, offset: 24648},
														run: (*parser).callonListContinuationElement645,
														expr: &seqExpr{
															pos: position{line: 772, col: 5, offset: 24648},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 772, col: 5, offset: 24648},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 772, col: 16, offset: 24659},
																		run: (*parser).callonListContinuationElement648,
																		expr: &seqExpr{
																			pos: position{line: 772, col: 16, offset: 24659},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 772, col: 16, offset: 24659},
																					val:        "----",
																					ignoreCase: false,
																					want:       "\"----\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 772, col: 23, offset: 24666},
																					expr: &litMatcher{
																						pos:        position{line: 772, col: 23, offset: 24666},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 774, col: 8, offset: 24750},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListContinuationElement654,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement657,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 900, col: 5, offset: 28313},
													run: (*parser).callonListContinuationElement664,
												},
												&labeledExpr{
													pos:   position{line: 903, col: 5, offset: 28405},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 918, col: 5, offset: 28803},
														expr: &actionExpr{
															pos: position{line: 918, col: 6, offset: 28804},
															run: (*parser).callonListContinuationElement667,
															expr: &seqExpr{
																pos: position{line: 918, col: 6, offset: 28804},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 918, col: 6, offset: 28804},
																		expr: &choiceExpr{
																			pos: position{line: 911, col: 5, offset: 28645},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 911, col: 5, offset: 28645},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 911, col: 5, offset: 28645},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 772, col: 5, offset: 24648},
																								run: (*parser).callonListContinuationElement673,
																								expr: &seqExpr{
																									pos: position{line: 772, col: 5, offset: 24648},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 772, col: 5, offset: 24648},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 772, col: 16, offset: 24659},
																												run: (*parser).callonListContinuationElement676,
																												expr: &seqExpr{
																													pos: position{line: 772, col: 16, offset: 24659},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 772, col: 16, offset: 24659},
																															val:        "----",
																															ignoreCase: false,
																															want:       "\"----\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 772, col: 23, offset: 24666},
																															expr: &litMatcher{
																																pos:        position{line: 772, col: 23, offset: 24666},
																																val:        "-",
																																ignoreCase: false,
																																want:       "\"-\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 774, col: 8, offset: 24750},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement682,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement685,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 912, col: 5, offset: 28676},
																							run: (*parser).callonListContinuationElement692,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 919, col: 5, offset: 28834},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 814, col: 5, offset: 26120},
																			run: (*parser).callonListContinuationElement696,
																			expr: &seqExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 815, col: 5, offset: 26195},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2843, col: 13, offset: 90258},
																							run: (*parser).callonListContinuationElement701,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								expr: &charClassMatcher{
																									pos:        position{line: 2843, col: 13, offset: 90258},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonListContinuationElement705,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 904, col: 5, offset: 28439},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 904, col: 9, offset: 28443},
														expr: &choiceExpr{
															pos: position{line: 911, col: 5, offset: 28645},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 911, col: 5, offset: 28645},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 911, col: 5, offset: 28645},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 772, col: 5, offset: 24648},
																				run: (*parser).callonListContinuationElement717,
																				expr: &seqExpr{
																					pos: position{line: 772, col: 5, offset: 24648},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 772, col: 5, offset: 24648},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 772, col: 16, offset: 24659},
																								run: (*parser).callonListContinuationElement720,
																								expr: &seqExpr{
																									pos: position{line: 772, col: 16, offset: 24659},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 772, col: 16, offset: 24659},
																											val:        "----",
																											ignoreCase: false,
																											want:       "\"----\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 772, col: 23, offset: 24666},
																											expr: &litMatcher{
																												pos:        position{line: 772, col: 23, offset: 24666},
																												val:        "-",
																												ignoreCase: false,
																												want:       "\"-\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 774, col: 8, offset: 24750},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonListContinuationElement726,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonListContinuationElement729,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 912, col: 5, offset: 28676},
																			run: (*parser).callonListContinuationElement736,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2916, col: 8, offset: 92080},
																	expr: &anyMatcher{
																		line: 2916, col: 9, offset: 92081,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 927, col: 5, offset: 28989},
										run: (*parser).callonListContinuationElement739,
										expr: &seqExpr{
											pos: position{line: 927, col: 5, offset: 28989},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 927, col: 5, offset: 28989},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 786, col: 5, offset: 25124},
														run: (*parser).callonListContinuationElement742,
														expr: &seqExpr{
															pos: position{line: 786, col: 5, offset: 25124},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 786, col: 5, offset: 25124},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 786, col: 16, offset: 25135},
																		run: (*parser).callonListContinuationElement745,
																		expr: &seqExpr{
																			pos: position{line: 786, col: 16, offset: 25135},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 786, col: 16, offset: 25135},
																					val:        "....",
																					ignoreCase: false,
																					want:       "\"....\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 786, col: 23, offset: 25142},
																					expr: &litMatcher{
																						pos:        position{line: 786, col: 23, offset: 25142},
																						val:        ".",
																						ignoreCase: false,
																						want:       "\".\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 788, col: 8, offset: 25226},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListContinuationElement751,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement754,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 928, col: 5, offset: 29028},
													run: (*parser).callonListContinuationElement761,
												},
												&labeledExpr{
													pos:   position{line: 931, col: 5, offset: 29120},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 946, col: 5, offset: 29518},
														expr: &actionExpr{
															pos: position{line: 946, col: 6, offset: 29519},
															run: (*parser).callonListContinuationElement764,
															expr: &seqExpr{
																pos: position{line: 946, col: 6, offset: 29519},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 946, col: 6, offset: 29519},
																		expr: &choiceExpr{
																			pos: position{line: 939, col: 5, offset: 29360},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 939, col: 5, offset: 29360},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 939, col: 5, offset: 29360},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 786, col: 5, offset: 25124},
																								run: (*parser).callonListContinuationElement770,
																								expr: &seqExpr{
																									pos: position{line: 786, col: 5, offset: 25124},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 786, col: 5, offset: 25124},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 786, col: 16, offset: 25135},
																												run: (*parser).callonListContinuationElement773,
																												expr: &seqExpr{
																													pos: position{line: 786, col: 16, offset: 25135},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 786, col: 16, offset: 25135},
																															val:        "....",
																															ignoreCase: false,
																															want:       "\"....\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 786, col: 23, offset: 25142},
																															expr: &litMatcher{
																																pos:        position{line: 786, col: 23, offset: 25142},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 788, col: 8, offset: 25226},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement779,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement782,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 940, col: 5, offset: 29391},
																							run: (*parser).callonListContinuationElement789,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 947, col: 5, offset: 29549},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 814, col: 5, offset: 26120},
																			run: (*parser).callonListContinuationElement793,
																			expr: &seqExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 815, col: 5, offset: 26195},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2843, col: 13, offset: 90258},
																							run: (*parser).callonListContinuationElement798,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								expr: &charClassMatcher{
																									pos:        position{line: 2843, col: 13, offset: 90258},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonListContinuationElement802,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 932, col: 5, offset: 29154},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 932, col: 9, offset: 29158},
														expr: &choiceExpr{
															pos: position{line: 939, col: 5, offset: 29360},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 939, col: 5, offset: 29360},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 939, col: 5, offset: 29360},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 786, col: 5, offset: 25124},
																				run: (*parser).callonListContinuationElement814,
																				expr: &seqExpr{
																					pos: position{line: 786, col: 5, offset: 25124},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 786, col: 5, offset: 25124},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 786, col: 16, offset: 25135},
																								run: (*parser).callonListContinuationElement817,
																								expr: &seqExpr{
																									pos: position{line: 786, col: 16, offset: 25135},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 786, col: 16, offset: 25135},
																											val:        "....",
																											ignoreCase: false,
																											want:       "\"....\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 786, col: 23, offset: 25142},
																											expr: &litMatcher{
																												pos:        position{line: 786, col: 23, offset: 25142},
																												val:        ".",
																												ignoreCase: false,
																												want:       "\".\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 788, col: 8, offset: 25226},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonListContinuationElement823,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonListContinuationElement826,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 940, col: 5, offset: 29391},
																			run: (*parser).callonListContinuationElement833,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2916, col: 8, offset: 92080},
																	expr: &anyMatcher{
																		line: 2916, col: 9, offset: 92081,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 978, col: 5, offset: 30432},
										run: (*parser).callonListContinuationElement836,
										expr: &seqExpr{
											pos: position{line: 978, col: 5, offset: 30432},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 978, col: 5, offset: 30432},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 985, col: 5, offset: 30691},
														run: (*parser).callonListContinuationElement839,
														expr: &seqExpr{
															pos: position{line: 985, col: 5, offset: 30691},
															exprs: []any{
																&notExpr{
																	pos: position{line: 985, col: 5, offset: 30691},
																	expr: &actionExpr{
																		pos: position{line: 680, col: 14, offset: 21521},
																		run: (*parser).callonListContinuationElement842,
																		expr: &seqExpr{
																			pos: position{line: 680, col: 14, offset: 21521},
																			exprs: []any{
																				&andExpr{
																					pos: position{line: 2914, col: 11, offset: 92066},
																					expr: &anyMatcher{
																						line: 2914, col: 13, offset: 92068,
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 680, col: 21, offset: 21528},
																					expr: &actionExpr{
																						pos: position{line: 2897, col: 10, offset: 91732},
																						run: (*parser).callonListContinuationElement847,
																						expr: &charClassMatcher{
																							pos:        position{line: 2897, col: 10, offset: 91732},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2919, col: 8, offset: 92130},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2906, col: 12, offset: 91903},
																							run: (*parser).callonListContinuationElement850,
																							expr: &choiceExpr{
																								pos: position{line: 2906, col: 13, offset: 91904},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2906, col: 13, offset: 91904},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 20, offset: 91911},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 29, offset: 91920},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2916, col: 8, offset: 92080},
																							expr: &anyMatcher{
																								line: 2916, col: 9, offset: 92081,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 986, col: 5, offset: 30706},
																	val:        "> ",
																	ignoreCase: false,
																	want:       "\"> \"",
																},
																&labeledExpr{
																	pos:   position{line: 987, col: 5, offset: 30716},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 2847, col: 14, offset: 90325},
																		run: (*parser).callonListContinuationElement859,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2847, col: 14, offset: 90325},
																			expr: &charClassMatcher{
																				pos:        position{line: 2847, col: 14, offset: 90325},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement863,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 979, col: 5, offset: 30469},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 979, col: 16, offset: 30480},
														expr: &choiceExpr{
															pos: position{line: 979, col: 17, offset: 30481},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 985, col: 5, offset: 30691},
																	run: (*parser).callonListContinuationElement873,
																	expr: &seqExpr{
																		pos: position{line: 985, col: 5, offset: 30691},
																		exprs: []any{
																			&notExpr{
																				pos: position{line: 985, col: 5, offset: 30691},
																				expr: &actionExpr{
																					pos: position{line: 680, col: 14, offset: 21521},
																					run: (*parser).callonListContinuationElement876,
																					expr: &seqExpr{
																						pos: position{line: 680, col: 14, offset: 21521},
																						exprs: []any{
																							&andExpr{
																								pos: position{line: 2914, col: 11, offset: 92066},
																								expr: &anyMatcher{
																									line: 2914, col: 13, offset: 92068,
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 680, col: 21, offset: 21528},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonListContinuationElement881,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonListContinuationElement884,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 986, col: 5, offset: 30706},
																				val:        "> ",
																				ignoreCase: false,
																				want:       "\"> \"",
																			},
																			&labeledExpr{
																				pos:   position{line: 987, col: 5, offset: 30716},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2847, col: 14, offset: 90325},
																					run: (*parser).callonListContinuationElement893,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2847, col: 14, offset: 90325},
																						expr: &charClassMatcher{
																							pos:        position{line: 2847, col: 14, offset: 90325},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2919, col: 8, offset: 92130},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 2906, col: 12, offset: 91903},
																						run: (*parser).callonListContinuationElement897,
																						expr: &choiceExpr{
																							pos: position{line: 2906, col: 13, offset: 91904},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2906, col: 13, offset: 91904},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2906, col: 20, offset: 91911},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2906, col: 29, offset: 91920},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1787, col: 5, offset: 57637},
																	run: (*parser).callonListContinuationElement904,
																	expr: &seqExpr{
																		pos: position{line: 1787, col: 5, offset: 57637},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 1787, col: 5, offset: 57637},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2847, col: 14, offset: 90325},
																					run: (*parser).callonListContinuationElement907,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2847, col: 14, offset: 90325},
																						expr: &charClassMatcher{
																							pos:        position{line: 2847, col: 14, offset: 90325},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1788, col: 5, offset: 57661},
																				run: (*parser).callonListContinuationElement910,
																			},
																			&choiceExpr{
																				pos: position{line: 2919, col: 8, offset: 92130},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 2906, col: 12, offset: 91903},
																						run: (*parser).callonListContinuationElement912,
																						expr: &choiceExpr{
																							pos: position{line: 2906, col: 13, offset: 91904},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2906, col: 13, offset: 91904},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2906, col: 20, offset: 91911},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2906, col: 29, offset: 91920},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1000, col: 5, offset: 30981},
										run: (*parser).callonListContinuationElement919,
										expr: &seqExpr{
											pos: position{line: 1000, col: 5, offset: 30981},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1000, col: 5, offset: 30981},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 779, col: 5, offset: 24893},
														run: (*parser).callonListContinuationElement922,
														expr: &seqExpr{
															pos: position{line: 779, col: 5, offset: 24893},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 779, col: 5, offset: 24893},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 779, col: 16, offset: 24904},
																		run: (*parser).callonListContinuationElement925,
																		expr: &litMatcher{
																			pos:        position{line: 779, col: 16, offset: 24904},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 781, col: 8, offset: 24981},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListContinuationElement928,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement931,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1001, col: 5, offset: 31017},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1011, col: 5, offset: 31285},
														expr: &actionExpr{
															pos: position{line: 1011, col: 6, offset: 31286},
															run: (*parser).callonListContinuationElement940,
															expr: &seqExpr{
																pos: position{line: 1011, col: 6, offset: 31286},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 1011, col: 6, offset: 31286},
																		expr: &choiceExpr{
																			pos: position{line: 1008, col: 26, offset: 31234},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 779, col: 5, offset: 24893},
																					run: (*parser).callonListContinuationElement944,
																					expr: &seqExpr{
																						pos: position{line: 779, col: 5, offset: 24893},
																						exprs: []any{
																							&labeledExpr{
																								pos:   position{line: 779, col: 5, offset: 24893},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 779, col: 16, offset: 24904},
																									run: (*parser).callonListContinuationElement947,
																									expr: &litMatcher{
																										pos:        position{line: 779, col: 16, offset: 24904},
																										val:        "--",
																										ignoreCase: false,
																										want:       "\"--\"",
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 781, col: 8, offset: 24981},
																								expr: &actionExpr{
																									pos: position{line: 2897, col: 10, offset: 91732},
																									run: (*parser).callonListContinuationElement950,
																									expr: &charClassMatcher{
																										pos:        position{line: 2897, col: 10, offset: 91732},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2919, col: 8, offset: 92130},
																								alternatives: []any{
																									&actionExpr{
																										pos: position{line: 2906, col: 12, offset: 91903},
																										run: (*parser).callonListContinuationElement953,
																										expr: &choiceExpr{
																											pos: position{line: 2906, col: 13, offset: 91904},
																											alternatives: []any{
																												&litMatcher{
																													pos:        position{line: 2906, col: 13, offset: 91904},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 20, offset: 91911},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2906, col: 29, offset: 91920},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2916, col: 8, offset: 92080},
																										expr: &anyMatcher{
																											line: 2916, col: 9, offset: 92081,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1012, col: 5, offset: 31313},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 814, col: 5, offset: 26120},
																			run: (*parser).callonListContinuationElement963,
																			expr: &seqExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 815, col: 5, offset: 26195},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2843, col: 13, offset: 90258},
																							run: (*parser).callonListContinuationElement968,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								expr: &charClassMatcher{
																									pos:        position{line: 2843, col: 13, offset: 90258},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonListContinuationElement972,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1002, col: 5, offset: 31048},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1002, col: 9, offset: 31052},
														expr: &choiceExpr{
															pos: position{line: 1008, col: 26, offset: 31234},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 779, col: 5, offset: 24893},
																	run: (*parser).callonListContinuationElement982,
																	expr: &seqExpr{
																		pos: position{line: 779, col: 5, offset: 24893},
																		exprs: []any{
																			&labeledExpr{
																				pos:   position{line: 779, col: 5, offset: 24893},
																				label: "delimiter",
																				expr: &actionExpr{
																					pos: position{line: 779, col: 16, offset: 24904},
																					run: (*parser).callonListContinuationElement985,
																					expr: &litMatcher{
																						pos:        position{line: 779, col: 16, offset: 24904},
																						val:        "--",
																						ignoreCase: false,
																						want:       "\"--\"",
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 781, col: 8, offset: 24981},
																				expr: &actionExpr{
																					pos: position{line: 2897, col: 10, offset: 91732},
																					run: (*parser).callonListContinuationElement988,
																					expr: &charClassMatcher{
																						pos:        position{line: 2897, col: 10, offset: 91732},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2919, col: 8, offset: 92130},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 2906, col: 12, offset: 91903},
																						run: (*parser).callonListContinuationElement991,
																						expr: &choiceExpr{
																							pos: position{line: 2906, col: 13, offset: 91904},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2906, col: 13, offset: 91904},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2906, col: 20, offset: 91911},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2906, col: 29, offset: 91920},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2916, col: 8, offset: 92080},
																	expr: &anyMatcher{
																		line: 2916, col: 9, offset: 92081,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1020, col: 5, offset: 31476},
										run: (*parser).callonListContinuationElement1000,
										expr: &seqExpr{
											pos: position{line: 1020, col: 5, offset: 31476},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1020, col: 5, offset: 31476},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 793, col: 5, offset: 25376},
														run: (*parser).callonListContinuationElement1003,
														expr: &seqExpr{
															pos: position{line: 793, col: 5, offset: 25376},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 793, col: 5, offset: 25376},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 793, col: 16, offset: 25387},
																		run: (*parser).callonListContinuationElement1006,
																		expr: &seqExpr{
																			pos: position{line: 793, col: 16, offset: 25387},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 793, col: 16, offset: 25387},
																					val:        "++++",
																					ignoreCase: false,
																					want:       "\"++++\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 793, col: 23, offset: 25394},
																					expr: &litMatcher{
																						pos:        position{line: 793, col: 23, offset: 25394},
																						val:        "+",
																						ignoreCase: false,
																						want:       "\"+\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 795, col: 8, offset: 25478},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListContinuationElement1012,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement1015,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1021, col: 5, offset: 31519},
													run: (*parser).callonListContinuationElement1022,
												},
												&labeledExpr{
													pos:   position{line: 1024, col: 5, offset: 31611},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1039, col: 5, offset: 32041},
														expr: &actionExpr{
															pos: position{line: 1039, col: 6, offset: 32042},
															run: (*parser).callonListContinuationElement1025,
															expr: &seqExpr{
																pos: position{line: 1039, col: 6, offset: 32042},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 1039, col: 6, offset: 32042},
																		expr: &choiceExpr{
																			pos: position{line: 1032, col: 5, offset: 31875},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 1032, col: 5, offset: 31875},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1032, col: 5, offset: 31875},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 793, col: 5, offset: 25376},
																								run: (*parser).callonListContinuationElement1031,
																								expr: &seqExpr{
																									pos: position{line: 793, col: 5, offset: 25376},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 793, col: 5, offset: 25376},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 793, col: 16, offset: 25387},
																												run: (*parser).callonListContinuationElement1034,
																												expr: &seqExpr{
																													pos: position{line: 793, col: 16, offset: 25387},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 793, col: 16, offset: 25387},
																															val:        "++++",
																															ignoreCase: false,
																															want:       "\"++++\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 793, col: 23, offset: 25394},
																															expr: &litMatcher{
																																pos:        position{line: 793, col: 23, offset: 25394},
																																val:        "+",
																																ignoreCase: false,
																																want:       "\"+\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 795, col: 8, offset: 25478},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement1040,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement1043,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1033, col: 5, offset: 31910},
																							run: (*parser).callonListContinuationElement1050,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1040, col: 5, offset: 32076},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 814, col: 5, offset: 26120},
																			run: (*parser).callonListContinuationElement1054,
																			expr: &seqExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 815, col: 5, offset: 26195},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2843, col: 13, offset: 90258},
																							run: (*parser).callonListContinuationElement1059,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								expr: &charClassMatcher{
																									pos:        position{line: 2843, col: 13, offset: 90258},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonListContinuationElement1063,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1025, col: 5, offset: 31649},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1025, col: 9, offset: 31653},
														expr: &choiceExpr{
															pos: position{line: 1032, col: 5, offset: 31875},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 1032, col: 5, offset: 31875},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1032, col: 5, offset: 31875},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 793, col: 5, offset: 25376},
																				run: (*parser).callonListContinuationElement1075,
																				expr: &seqExpr{
																					pos: position{line: 793, col: 5, offset: 25376},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 793, col: 5, offset: 25376},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 793, col: 16, offset: 25387},
																								run: (*parser).callonListContinuationElement1078,
																								expr: &seqExpr{
																									pos: position{line: 793, col: 16, offset: 25387},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 793, col: 16, offset: 25387},
																											val:        "++++",
																											ignoreCase: false,
																											want:       "\"++++\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 793, col: 23, offset: 25394},
																											expr: &litMatcher{
																												pos:        position{line: 793, col: 23, offset: 25394},
																												val:        "+",
																												ignoreCase: false,
																												want:       "\"+\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 795, col: 8, offset: 25478},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonListContinuationElement1084,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonListContinuationElement1087,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1033, col: 5, offset: 31910},
																			run: (*parser).callonListContinuationElement1094,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2916, col: 8, offset: 92080},
																	expr: &anyMatcher{
																		line: 2916, col: 9, offset: 92081,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1048, col: 5, offset: 32227},
										run: (*parser).callonListContinuationElement1097,
										expr: &seqExpr{
											pos: position{line: 1048, col: 5, offset: 32227},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1048, col: 5, offset: 32227},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 800, col: 5, offset: 25626},
														run: (*parser).callonListContinuationElement1100,
														expr: &seqExpr{
															pos: position{line: 800, col: 5, offset: 25626},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 800, col: 5, offset: 25626},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 800, col: 16, offset: 25637},
																		run: (*parser).callonListContinuationElement1103,
																		expr: &seqExpr{
																			pos: position{line: 800, col: 16, offset: 25637},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 800, col: 16, offset: 25637},
																					val:        "____",
																					ignoreCase: false,
																					want:       "\"____\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 800, col: 23, offset: 25644},
																					expr: &litMatcher{
																						pos:        position{line: 800, col: 23, offset: 25644},
																						val:        "_",
																						ignoreCase: false,
																						want:       "\"_\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 802, col: 8, offset: 25728},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListContinuationElement1109,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement1112,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1049, col: 5, offset: 32264},
													run: (*parser).callonListContinuationElement1119,
												},
												&labeledExpr{
													pos:   position{line: 1052, col: 5, offset: 32356},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1067, col: 4, offset: 32737},
														expr: &actionExpr{
															pos: position{line: 1067, col: 5, offset: 32738},
															run: (*parser).callonListContinuationElement1122,
															expr: &seqExpr{
																pos: position{line: 1067, col: 5, offset: 32738},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 1067, col: 5, offset: 32738},
																		expr: &choiceExpr{
																			pos: position{line: 1060, col: 5, offset: 32584},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 1060, col: 5, offset: 32584},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1060, col: 5, offset: 32584},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 800, col: 5, offset: 25626},
																								run: (*parser).callonListContinuationElement1128,
																								expr: &seqExpr{
																									pos: position{line: 800, col: 5, offset: 25626},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 800, col: 5, offset: 25626},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 800, col: 16, offset: 25637},
																												run: (*parser).callonListContinuationElement1131,
																												expr: &seqExpr{
																													pos: position{line: 800, col: 16, offset: 25637},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 800, col: 16, offset: 25637},
																															val:        "____",
																															ignoreCase: false,
																															want:       "\"____\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 800, col: 23, offset: 25644},
																															expr: &litMatcher{
																																pos:        position{line: 800, col: 23, offset: 25644},
																																val:        "_",
																																ignoreCase: false,
																																want:       "\"_\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 802, col: 8, offset: 25728},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement1137,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement1140,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1061, col: 5, offset: 32613},
																							run: (*parser).callonListContinuationElement1147,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1068, col: 5, offset: 32766},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 814, col: 5, offset: 26120},
																			run: (*parser).callonListContinuationElement1151,
																			expr: &seqExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 815, col: 5, offset: 26195},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2843, col: 13, offset: 90258},
																							run: (*parser).callonListContinuationElement1156,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								expr: &charClassMatcher{
																									pos:        position{line: 2843, col: 13, offset: 90258},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonListContinuationElement1160,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1053, col: 5, offset: 32388},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1053, col: 9, offset: 32392},
														expr: &choiceExpr{
															pos: position{line: 1060, col: 5, offset: 32584},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 1060, col: 5, offset: 32584},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1060, col: 5, offset: 32584},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 800, col: 5, offset: 25626},
																				run: (*parser).callonListContinuationElement1172,
																				expr: &seqExpr{
																					pos: position{line: 800, col: 5, offset: 25626},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 800, col: 5, offset: 25626},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 800, col: 16, offset: 25637},
																								run: (*parser).callonListContinuationElement1175,
																								expr: &seqExpr{
																									pos: position{line: 800, col: 16, offset: 25637},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 800, col: 16, offset: 25637},
																											val:        "____",
																											ignoreCase: false,
																											want:       "\"____\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 800, col: 23, offset: 25644},
																											expr: &litMatcher{
																												pos:        position{line: 800, col: 23, offset: 25644},
																												val:        "_",
																												ignoreCase: false,
																												want:       "\"_\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 802, col: 8, offset: 25728},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonListContinuationElement1181,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonListContinuationElement1184,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1061, col: 5, offset: 32613},
																			run: (*parser).callonListContinuationElement1191,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2916, col: 8, offset: 92080},
																	expr: &anyMatcher{
																		line: 2916, col: 9, offset: 92081,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1076, col: 5, offset: 32921},
										run: (*parser).callonListContinuationElement1194,
										expr: &seqExpr{
											pos: position{line: 1076, col: 5, offset: 32921},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1076, col: 5, offset: 32921},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 807, col: 5, offset: 25872},
														run: (*parser).callonListContinuationElement1197,
														expr: &seqExpr{
															pos: position{line: 807, col: 5, offset: 25872},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 807, col: 5, offset: 25872},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 807, col: 16, offset: 25883},
																		run: (*parser).callonListContinuationElement1200,
																		expr: &seqExpr{
																			pos: position{line: 807, col: 16, offset: 25883},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 807, col: 16, offset: 25883},
																					val:        "****",
																					ignoreCase: false,
																					want:       "\"****\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 807, col: 23, offset: 25890},
																					expr: &litMatcher{
																						pos:        position{line: 807, col: 23, offset: 25890},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 809, col: 8, offset: 25974},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListContinuationElement1206,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement1209,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1077, col: 5, offset: 32960},
													run: (*parser).callonListContinuationElement1216,
												},
												&labeledExpr{
													pos:   position{line: 1080, col: 5, offset: 33052},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1095, col: 4, offset: 33449},
														expr: &actionExpr{
															pos: position{line: 1095, col: 5, offset: 33450},
															run: (*parser).callonListContinuationElement1219,
															expr: &seqExpr{
																pos: position{line: 1095, col: 5, offset: 33450},
																exprs: []any{
																	&notExpr{
																		pos: position{line: 1095, col: 5, offset: 33450},
																		expr: &choiceExpr{
																			pos: position{line: 1088, col: 5, offset: 33292},
																			alternatives: []any{
																				&seqExpr{
																					pos: position{line: 1088, col: 5, offset: 33292},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1088, col: 5, offset: 33292},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 807, col: 5, offset: 25872},
																								run: (*parser).callonListContinuationElement1225,
																								expr: &seqExpr{
																									pos: position{line: 807, col: 5, offset: 25872},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 807, col: 5, offset: 25872},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 807, col: 16, offset: 25883},
																												run: (*parser).callonListContinuationElement1228,
																												expr: &seqExpr{
																													pos: position{line: 807, col: 16, offset: 25883},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 807, col: 16, offset: 25883},
																															val:        "****",
																															ignoreCase: false,
																															want:       "\"****\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 807, col: 23, offset: 25890},
																															expr: &litMatcher{
																																pos:        position{line: 807, col: 23, offset: 25890},
																																val:        "*",
																																ignoreCase: false,
																																want:       "\"*\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 809, col: 8, offset: 25974},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement1234,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement1237,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1089, col: 5, offset: 33323},
																							run: (*parser).callonListContinuationElement1244,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1096, col: 5, offset: 33480},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 814, col: 5, offset: 26120},
																			run: (*parser).callonListContinuationElement1248,
																			expr: &seqExpr{
																				pos: position{line: 814, col: 5, offset: 26120},
																				exprs: []any{
																					&andExpr{
																						pos: position{line: 2914, col: 11, offset: 92066},
																						expr: &anyMatcher{
																							line: 2914, col: 13, offset: 92068,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 815, col: 5, offset: 26195},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2843, col: 13, offset: 90258},
																							run: (*parser).callonListContinuationElement1253,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2843, col: 13, offset: 90258},
																								expr: &charClassMatcher{
																									pos:        position{line: 2843, col: 13, offset: 90258},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonListContinuationElement1257,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1081, col: 5, offset: 33086},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1081, col: 9, offset: 33090},
														expr: &choiceExpr{
															pos: position{line: 1088, col: 5, offset: 33292},
															alternatives: []any{
																&seqExpr{
																	pos: position{line: 1088, col: 5, offset: 33292},
																	exprs: []any{
																		&labeledExpr{
																			pos:   position{line: 1088, col: 5, offset: 33292},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 807, col: 5, offset: 25872},
																				run: (*parser).callonListContinuationElement1269,
																				expr: &seqExpr{
																					pos: position{line: 807, col: 5, offset: 25872},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 807, col: 5, offset: 25872},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 807, col: 16, offset: 25883},
																								run: (*parser).callonListContinuationElement1272,
																								expr: &seqExpr{
																									pos: position{line: 807, col: 16, offset: 25883},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 807, col: 16, offset: 25883},
																											val:        "****",
																											ignoreCase: false,
																											want:       "\"****\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 807, col: 23, offset: 25890},
																											expr: &litMatcher{
																												pos:        position{line: 807, col: 23, offset: 25890},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 809, col: 8, offset: 25974},
																							expr: &actionExpr{
																								pos: position{line: 2897, col: 10, offset: 91732},
																								run: (*parser).callonListContinuationElement1278,
																								expr: &charClassMatcher{
																									pos:        position{line: 2897, col: 10, offset: 91732},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2919, col: 8, offset: 92130},
																							alternatives: []any{
																								&actionExpr{
																									pos: position{line: 2906, col: 12, offset: 91903},
																									run: (*parser).callonListContinuationElement1281,
																									expr: &choiceExpr{
																										pos: position{line: 2906, col: 13, offset: 91904},
																										alternatives: []any{
																											&litMatcher{
																												pos:        position{line: 2906, col: 13, offset: 91904},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 20, offset: 91911},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2906, col: 29, offset: 91920},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2916, col: 8, offset: 92080},
																									expr: &anyMatcher{
																										line: 2916, col: 9, offset: 92081,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1089, col: 5, offset: 33323},
																			run: (*parser).callonListContinuationElement1288,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2916, col: 8, offset: 92080},
																	expr: &anyMatcher{
																		line: 2916, col: 9, offset: 92081,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2742, col: 18, offset: 87322},
										run: (*parser).callonListContinuationElement1291,
										expr: &seqExpr{
											pos: position{line: 2742, col: 18, offset: 87322},
											exprs: []any{
												&choiceExpr{
													pos: position{line: 2743, col: 9, offset: 87332},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2743, col: 9, offset: 87332},
															val:        "'''",
															ignoreCase: false,
															want:       "\"'''\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 11, offset: 87368},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 19, offset: 87376},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 29, offset: 87386},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 37, offset: 87394},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 47, offset: 87404},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 2744, col: 55, offset: 87412},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2745, col: 11, offset: 87470},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonListContinuationElement1302,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonListContinuationElement1305,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonListContinuationElement1313,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1551, col: 11, offset: 50018},
										name: "ImageBlock",
									},
									&actionExpr{
										pos: position{line: 2591, col: 5, offset: 82797},
										run: (*parser).callonListContinuationElement1321,
										expr: &seqExpr{
											pos: position{line: 2591, col: 5, offset: 82797},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2597, col: 19, offset: 82954},
													val:        "|===",
													ignoreCase: false,
													want:       "\"|===\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2597, col: 26, offset: 82961},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonListContinuationElement1325,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonListContinuationElement1328,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2592, col: 5, offset: 82821},
													label: "lines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2592, col: 11, offset: 82827},
														expr: &choiceExpr{
															pos: position{line: 2592, col: 12, offset: 82828},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 680, col: 14, offset: 21521},
																	run: (*parser).callonListContinuationElement1338,
																	expr: &seqExpr{
																		pos: position{line: 680, col: 14, offset: 21521},
																		exprs: []any{
																			&andExpr{
																				pos: position{line: 2914, col: 11, offset: 92066},
																				expr: &anyMatcher{
																					line: 2914, col: 13, offset: 92068,
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 680, col: 21, offset: 21528},
																				expr: &actionExpr{
																					pos: position{line: 2897, col: 10, offset: 91732},
																					run: (*parser).callonListContinuationElement1343,
																					expr: &charClassMatcher{
																						pos:        position{line: 2897, col: 10, offset: 91732},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2919, col: 8, offset: 92130},
																				alternatives: []any{
																					&actionExpr{
																						pos: position{line: 2906, col: 12, offset: 91903},
																						run: (*parser).callonListContinuationElement1346,
																						expr: &choiceExpr{
																							pos: position{line: 2906, col: 13, offset: 91904},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 2906, col: 13, offset: 91904},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2906, col: 20, offset: 91911},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2906, col: 29, offset: 91920},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2916, col: 8, offset: 92080},
																						expr: &anyMatcher{
																							line: 2916, col: 9, offset: 92081,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2604, col: 5, offset: 83073},
																	run: (*parser).callonListContinuationElement1353,
																	expr: &seqExpr{
																		pos: position{line: 2604, col: 5, offset: 83073},
																		exprs: []any{
																			&notExpr{
																				pos: position{line: 2604, col: 5, offset: 83073},
																				expr: &choiceExpr{
																					pos: position{line: 2601, col: 22, offset: 83034},
																					alternatives: []any{
																						&seqExpr{
																							pos: position{line: 2597, col: 19, offset: 82954},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 2597, col: 19, offset: 82954},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2597, col: 26, offset: 82961},
																									expr: &actionExpr{
																										pos: position{line: 2897, col: 10, offset: 91732},
																										run: (*parser).callonListContinuationElement1360,
																										expr: &charClassMatcher{
																											pos:        position{line: 2897, col: 10, offset: 91732},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2919, col: 8, offset: 92130},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2906, col: 12, offset: 91903},
																											run: (*parser).callonListContinuationElement1363,
																											expr: &choiceExpr{
																												pos: position{line: 2906, col: 13, offset: 91904},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2906, col: 13, offset: 91904},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 20, offset: 91911},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 29, offset: 91920},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2916, col: 8, offset: 92080},
																											expr: &anyMatcher{
																												line: 2916, col: 9, offset: 92081,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2916, col: 8, offset: 92080},
																							expr: &anyMatcher{
																								line: 2916, col: 9, offset: 92081,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2605, col: 5, offset: 83096},
																				label: "content",
																				expr: &choiceExpr{
																					pos: position{line: 2606, col: 9, offset: 83114},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2606, col: 10, offset: 83115},
																							run: (*parser).callonListContinuationElement1374,
																							expr: &labeledExpr{
																								pos:   position{line: 2606, col: 10, offset: 83115},
																								label: "cells",
																								expr: &actionExpr{
																									pos: position{line: 2655, col: 15, offset: 84713},
																									run: (*parser).callonListContinuationElement1376,
																									expr: &labeledExpr{
																										pos:   position{line: 2655, col: 15, offset: 84713},
																										label: "cells",
																										expr: &oneOrMoreExpr{
																											pos: position{line: 2655, col: 21, offset: 84719},
																											expr: &actionExpr{
																												pos: position{line: 2660, col: 5, offset: 84777},
																												run: (*parser).callonListContinuationElement1379,
																												expr: &seqExpr{
																													pos: position{line: 2660, col: 5, offset: 84777},
																													exprs: []any{
																														&notExpr{
																															pos: position{line: 2660, col: 5, offset: 84777},
																															expr: &choiceExpr{
																																pos: position{line: 2601, col: 22, offset: 83034},
																																alternatives: []any{
																																	&seqExpr{
																																		pos: position{line: 2597, col: 19, offset: 82954},
																																		exprs: []any{
																																			&litMatcher{
																																				pos:        position{line: 2597, col: 19, offset: 82954},
																																				val:        "|===",
																																				ignoreCase: false,
																																				want:       "\"|===\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 2597, col: 26, offset: 82961},
																																				expr: &actionExpr{
																																					pos: position{line: 2897, col: 10, offset: 91732},
																																					run: (*parser).callonListContinuationElement1386,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2897, col: 10, offset: 91732},
																																						val:        "[\\t ]",
																																						chars:      []rune{'\t', ' '},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 2919, col: 8, offset: 92130},
																																				alternatives: []any{
																																					&actionExpr{
																																						pos: position{line: 2906, col: 12, offset: 91903},
																																						run: (*parser).callonListContinuationElement1389,
																																						expr: &choiceExpr{
																																							pos: position{line: 2906, col: 13, offset: 91904},
																																							alternatives: []any{
																																								&litMatcher{
																																									pos:        position{line: 2906, col: 13, offset: 91904},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2906, col: 20, offset: 91911},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2906, col: 29, offset: 91920},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2916, col: 8, offset: 92080},
																																						expr: &anyMatcher{
																																							line: 2916, col: 9, offset: 92081,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2916, col: 8, offset: 92080},
																																		expr: &anyMatcher{
																																			line: 2916, col: 9, offset: 92081,
																																		},
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2661, col: 5, offset: 84800},
																															expr: &actionExpr{
																																pos: position{line: 680, col: 14, offset: 21521},
																																run: (*parser).callonListContinuationElement1399,
																																expr: &seqExpr{
																																	pos: position{line: 680, col: 14, offset: 21521},
																																	exprs: []any{
																																		&andExpr{
																																			pos: position{line: 2914, col: 11, offset: 92066},
																																			expr: &anyMatcher{
																																				line: 2914, col: 13, offset: 92068,
																																			},
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 680, col: 21, offset: 21528},
																																			expr: &actionExpr{
																																				pos: position{line: 2897, col: 10, offset: 91732},
																																				run: (*parser).callonListContinuationElement1404,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2897, col: 10, offset: 91732},
																																					val:        "[\\t ]",
																																					chars:      []rune{'\t', ' '},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&choiceExpr{
																																			pos: position{line: 2919, col: 8, offset: 92130},
																																			alternatives: []any{
																																				&actionExpr{
																																					pos: position{line: 2906, col: 12, offset: 91903},
																																					run: (*parser).callonListContinuationElement1407,
																																					expr: &choiceExpr{
																																						pos: position{line: 2906, col: 13, offset: 91904},
																																						alternatives: []any{
																																							&litMatcher{
																																								pos:        position{line: 2906, col: 13, offset: 91904},
																																								val:        "\n",
																																								ignoreCase: false,
																																								want:       "\"\\n\"",
																																							},
																																							&litMatcher{
																																								pos:        position{line: 2906, col: 20, offset: 91911},
																																								val:        "\r\n",
																																								ignoreCase: false,
																																								want:       "\"\\r\\n\"",
																																							},
																																							&litMatcher{
																																								pos:        position{line: 2906, col: 29, offset: 91920},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 2916, col: 8, offset: 92080},
																																					expr: &anyMatcher{
																																						line: 2916, col: 9, offset: 92081,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2662, col: 5, offset: 84815},
																															expr: &actionExpr{
																																pos: position{line: 2897, col: 10, offset: 91732},
																																run: (*parser).callonListContinuationElement1415,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2897, col: 10, offset: 91732},
																																	val:        "[\\t ]",
																																	chars:      []rune{'\t', ' '},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 2662, col: 12, offset: 84822},
																															label: "format",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 2662, col: 19, offset: 84829},
																																expr: &actionExpr{
																																	pos: position{line: 2696, col: 20, offset: 85764},
																																	run: (*parser).callonListContinuationElement1419,
																																	expr: &zeroOrMoreExpr{
																																		pos: position{line: 2696, col: 20, offset: 85764},
																																		expr: &choiceExpr{
																																			pos: position{line: 2694, col: 30, offset: 85726},
																																			alternatives: []any{
																																				&litMatcher{
																																					pos:        position{line: 2694, col: 30, offset: 85726},
																																					val:        "\\|",
																																					ignoreCase: false,
																																					want:       "\"\\\\|\"",
																																				},
																																				&charClassMatcher{
																																					pos:        position{line: 2694, col: 38, offset: 85734},
																																					val:        "[^ |\\r\\n]",
																																					chars:      []rune{' ', '|', '\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 2662, col: 38, offset: 84848},
																															val:        "|",
																															ignoreCase: false,
																															want:       "\"|\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2662, col: 42, offset: 84852},
																															expr: &actionExpr{
																																pos: position{line: 2897, col: 10, offset: 91732},
																																run: (*parser).callonListContinuationElement1426,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2897, col: 10, offset: 91732},
																																	val:        "[\\t ]",
																																	chars:      []rune{'\t', ' '},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 2662, col: 49, offset: 84859},
																															label: "eol",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 2662, col: 53, offset: 84863},
																																expr: &actionExpr{
																																	pos: position{line: 2906, col: 12, offset: 91903},
																																	run: (*parser).callonListContinuationElement1430,
																																	expr: &choiceExpr{
																																		pos: position{line: 2906, col: 13, offset: 91904},
																																		alternatives: []any{
																																			&litMatcher{
																																				pos:        position{line: 2906, col: 13, offset: 91904},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2906, col: 20, offset: 91911},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2906, col: 29, offset: 91920},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 2662, col: 64, offset: 84874},
																															label: "content",
																															expr: &zeroOrMoreExpr{
																																pos: position{line: 2676, col: 5, offset: 85220},
																																expr: &actionExpr{
																																	pos: position{line: 2677, col: 9, offset: 85230},
																																	run: (*parser).callonListContinuationElement1437,
																																	expr: &seqExpr{
																																		pos: position{line: 2677, col: 9, offset: 85230},
																																		exprs: []any{
																																			&notExpr{
																																				pos: position{line: 2677, col: 9, offset: 85230},
																																				expr: &choiceExpr{
																																					pos: position{line: 2601, col: 22, offset: 83034},
																																					alternatives: []any{
																																						&seqExpr{
																																							pos: position{line: 2597, col: 19, offset: 82954},
																																							exprs: []any{
																																								&litMatcher{
																																									pos:        position{line: 2597, col: 19, offset: 82954},
																																									val:        "|===",
																																									ignoreCase: false,
																																									want:       "\"|===\"",
																																								},
																																								&zeroOrMoreExpr{
																																									pos: position{line: 2597, col: 26, offset: 82961},
																																									expr: &actionExpr{
																																										pos: position{line: 2897, col: 10, offset: 91732},
																																										run: (*parser).callonListContinuationElement1444,
																																										expr: &charClassMatcher{
																																											pos:        position{line: 2897, col: 10, offset: 91732},
																																											val:        "[\\t ]",
																																											chars:      []rune{'\t', ' '},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																								&choiceExpr{
																																									pos: position{line: 2919, col: 8, offset: 92130},
																																									alternatives: []any{
																																										&actionExpr{
																																											pos: position{line: 2906, col: 12, offset: 91903},
																																											run: (*parser).callonListContinuationElement1447,
																																											expr: &choiceExpr{
																																												pos: position{line: 2906, col: 13, offset: 91904},
																																												alternatives: []any{
																																													&litMatcher{
																																														pos:        position{line: 2906, col: 13, offset: 91904},
																																														val:        "\n",
																																														ignoreCase: false,
																																														want:       "\"\\n\"",
																																													},
																																													&litMatcher{
																																														pos:        position{line: 2906, col: 20, offset: 91911},
																																														val:        "\r\n",
																																														ignoreCase: false,
																																														want:       "\"\\r\\n\"",
																																													},
																																													&litMatcher{
																																														pos:        position{line: 2906, col: 29, offset: 91920},
																																														val:        "\r",
																																														ignoreCase: false,
																																														want:       "\"\\r\"",
																																													},
																																												},
																																											},
																																										},
																																										&notExpr{
																																											pos: position{line: 2916, col: 8, offset: 92080},
																																											expr: &anyMatcher{
																																												line: 2916, col: 9, offset: 92081,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2916, col: 8, offset: 92080},
																																							expr: &anyMatcher{
																																								line: 2916, col: 9, offset: 92081,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2678, col: 9, offset: 85257},
																																				expr: &actionExpr{
																																					pos: position{line: 680, col: 14, offset: 21521},
																																					run: (*parser).callonListContinuationElement1457,
																																					expr: &seqExpr{
																																						pos: position{line: 680, col: 14, offset: 21521},
																																						exprs: []any{
																																							&andExpr{
																																								pos: position{line: 2914, col: 11, offset: 92066},
																																								expr: &anyMatcher{
																																									line: 2914, col: 13, offset: 92068,
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 680, col: 21, offset: 21528},
																																								expr: &actionExpr{
																																									pos: position{line: 2897, col: 10, offset: 91732},
																																									run: (*parser).callonListContinuationElement1462,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2897, col: 10, offset: 91732},
																																										val:        "[\\t ]",
																																										chars:      []rune{'\t', ' '},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 2919, col: 8, offset: 92130},
																																								alternatives: []any{
																																									&actionExpr{
																																										pos: position{line: 2906, col: 12, offset: 91903},
																																										run: (*parser).callonListContinuationElement1465,
																																										expr: &choiceExpr{
																																											pos: position{line: 2906, col: 13, offset: 91904},
																																											alternatives: []any{
																																												&litMatcher{
																																													pos:        position{line: 2906, col: 13, offset: 91904},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2906, col: 20, offset: 91911},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2906, col: 29, offset: 91920},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2916, col: 8, offset: 92080},
																																										expr: &anyMatcher{
																																											line: 2916, col: 9, offset: 92081,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2679, col: 9, offset: 85276},
																																				expr: &seqExpr{
																																					pos: position{line: 2679, col: 11, offset: 85278},
																																					exprs: []any{
																																						&labeledExpr{
																																							pos:   position{line: 2679, col: 11, offset: 85278},
																																							label: "format",
																																							expr: &zeroOrMoreExpr{
																																								pos: position{line: 2679, col: 19, offset: 85286},
																																								expr: &actionExpr{
																																									pos: position{line: 2897, col: 10, offset: 91732},
																																									run: (*parser).callonListContinuationElement1476,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2897, col: 10, offset: 91732},
																																										val:        "[\\t ]",
																																										chars:      []rune{'\t', ' '},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																						&zeroOrOneExpr{
																																							pos: position{line: 2679, col: 26, offset: 85293},
																																							expr: &actionExpr{
																																								pos: position{line: 2696, col: 20, offset: 85764},
																																								run: (*parser).callonListContinuationElement1479,
																																								expr: &zeroOrMoreExpr{
																																									pos: position{line: 2696, col: 20, offset: 85764},
																																									expr: &choiceExpr{
																																										pos: position{line: 2694, col: 30, offset: 85726},
																																										alternatives: []any{
																																											&litMatcher{
																																												pos:        position{line: 2694, col: 30, offset: 85726},
																																												val:        "\\|",
																																												ignoreCase: false,
																																												want:       "\"\\\\|\"",
																																											},
																																											&charClassMatcher{
																																												pos:        position{line: 2694, col: 38, offset: 85734},
																																												val:        "[^ |\\r\\n]",
																																												chars:      []rune{' ', '|', '\r', '\n'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 2679, col: 45, offset: 85312},
																																							val:        "|",
																																							ignoreCase: false,
																																							want:       "\"|\"",
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 2680, col: 9, offset: 85325},
																																				label: "content",
																																				expr: &actionExpr{
																																					pos: position{line: 2680, col: 18, offset: 85334},
																																					run: (*parser).callonListContinuationElement1486,
																																					expr: &seqExpr{
																																						pos: position{line: 2680, col: 18, offset: 85334},
																																						exprs: []any{
																																							&zeroOrMoreExpr{
																																								pos: position{line: 2680, col: 18, offset: 85334},
																																								expr: &choiceExpr{
																																									pos: position{line: 2653, col: 25, offset: 84680},
																																									alternatives: []any{
																																										&litMatcher{
																																											pos:        position{line: 2653, col: 25, offset: 84680},
																																											val:        "\\|",
																																											ignoreCase: false,
																																											want:       "\"\\\\|\"",
																																										},
																																										&charClassMatcher{
																																											pos:        position{line: 2653, col: 33, offset: 84688},
																																											val:        "[^|\\r\\n]",
																																											chars:      []rune{'|', '\r', '\n'},
																																											ignoreCase: false,
																																											inverted:   true,
																																										},
																																									},
																																								},
																																							},
																																							&andExpr{
																																								pos: position{line: 2680, col: 39, offset: 85355},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2673, col: 18, offset: 85175},
																																									val:        "[|\\r\\n]",
																																									chars:      []rune{'|', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 2682, col: 12, offset: 85422},
																																				label: "eol",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 2682, col: 16, offset: 85426},
																																					expr: &choiceExpr{
																																						pos: position{line: 2682, col: 17, offset: 85427},
																																						alternatives: []any{
																																							&seqExpr{
																																								pos: position{line: 2682, col: 17, offset: 85427},
																																								exprs: []any{
																																									&choiceExpr{
																																										pos: position{line: 2919, col: 8, offset: 92130},
																																										alternatives: []any{
																																											&actionExpr{
																																												pos: position{line: 2906, col: 12, offset: 91903},
																																												run: (*parser).callonListContinuationElement1499,
																																												expr: &choiceExpr{
																																													pos: position{line: 2906, col: 13, offset: 91904},
																																													alternatives: []any{
																																														&litMatcher{
																																															pos:        position{line: 2906, col: 13, offset: 91904},
																																															val:        "\n",
																																															ignoreCase: false,
																																															want:       "\"\\n\"",
																																														},
																																														&litMatcher{
																																															pos:        position{line: 2906, col: 20, offset: 91911},
																																															val:        "\r\n",
																																															ignoreCase: false,
																																															want:       "\"\\r\\n\"",
																																														},
																																														&litMatcher{
																																															pos:        position{line: 2906, col: 29, offset: 91920},
																																															val:        "\r",
																																															ignoreCase: false,
																																															want:       "\"\\r\"",
																																														},
																																													},
																																												},
																																											},
																																											&notExpr{
																																												pos: position{line: 2916, col: 8, offset: 92080},
																																												expr: &anyMatcher{
																																													line: 2916, col: 9, offset: 92081,
																																												},
																																											},
																																										},
																																									},
																																									&oneOrMoreExpr{
																																										pos: position{line: 2682, col: 21, offset: 85431},
																																										expr: &actionExpr{
																																											pos: position{line: 2897, col: 10, offset: 91732},
																																											run: (*parser).callonListContinuationElement1507,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2897, col: 10, offset: 91732},
																																												val:        "[\\t ]",
																																												chars:      []rune{'\t', ' '},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 2906, col: 12, offset: 91903},
																																								run: (*parser).callonListContinuationElement1509,
																																								expr: &choiceExpr{
																																									pos: position{line: 2906, col: 13, offset: 91904},
																																									alternatives: []any{
																																										&litMatcher{
																																											pos:        position{line: 2906, col: 13, offset: 91904},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2906, col: 20, offset: 91911},
																																											val:        "\r\n",
																																											ignoreCase: false,
																																											want:       "\"\\r\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2906, col: 29, offset: 91920},
																																											val:        "\r",
																																											ignoreCase: false,
																																											want:       "\"\\r\"",
																																										},
																																									},
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 2916, col: 8, offset: 92080},
																																								expr: &anyMatcher{
																																									line: 2916, col: 9, offset: 92081,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 680, col: 14, offset: 21521},
																							run: (*parser).callonListContinuationElement1516,
																							expr: &seqExpr{
																								pos: position{line: 680, col: 14, offset: 21521},
																								exprs: []any{
																									&andExpr{
																										pos: position{line: 2914, col: 11, offset: 92066},
																										expr: &anyMatcher{
																											line: 2914, col: 13, offset: 92068,
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 680, col: 21, offset: 21528},
																										expr: &actionExpr{
																											pos: position{line: 2897, col: 10, offset: 91732},
																											run: (*parser).callonListContinuationElement1521,
																											expr: &charClassMatcher{
																												pos:        position{line: 2897, col: 10, offset: 91732},
																												val:        "[\\t ]",
																												chars:      []rune{'\t', ' '},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2919, col: 8, offset: 92130},
																										alternatives: []any{
																											&actionExpr{
																												pos: position{line: 2906, col: 12, offset: 91903},
																												run: (*parser).callonListContinuationElement1524,
																												expr: &choiceExpr{
																													pos: position{line: 2906, col: 13, offset: 91904},
																													alternatives: []any{
																														&litMatcher{
																															pos:        position{line: 2906, col: 13, offset: 91904},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2906, col: 20, offset: 91911},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2906, col: 29, offset: 91920},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2916, col: 8, offset: 92080},
																												expr: &anyMatcher{
																													line: 2916, col: 9, offset: 92081,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2601, col: 22, offset: 83034},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 2597, col: 19, offset: 82954},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 2597, col: 19, offset: 82954},
																	val:        "|===",
																	ignoreCase: false,
																	want:       "\"|===\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2597, col: 26, offset: 82961},
																	expr: &actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonListContinuationElement1535,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement1538,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2465, col: 22, offset: 79256},
										run: (*parser).callonListContinuationElement1547,
										expr: &seqExpr{
											pos: position{line: 2465, col: 22, offset: 79256},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2470, col: 31, offset: 79477},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2470, col: 36, offset: 79482},
													expr: &litMatcher{
														pos:        position{line: 2470, col: 37, offset: 79483},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2465, col: 49, offset: 79283},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2843, col: 13, offset: 90258},
														run: (*parser).callonListContinuationElement1553,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2843, col: 13, offset: 90258},
															expr: &charClassMatcher{
																pos:        position{line: 2843, col: 13, offset: 90258},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2919, col: 8, offset: 92130},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonListContinuationElement1557,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2916, col: 8, offset: 92080},
															expr: &anyMatcher{
																line: 2916, col: 9, offset: 92081,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1564, col: 5, offset: 50448},
										run: (*parser).callonListContinuationElement1564,
										expr: &seqExpr{
											pos: position{line: 1564, col: 5, offset: 50448},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 1564, col: 5, offset: 50448},
													label: "style",
													expr: &zeroOrOneExpr{
														pos: position{line: 1564, col: 11, offset: 50454},
														expr: &actionExpr{
															pos: position{line: 1728, col: 5, offset: 55771},
															run: (*parser).callonListContinuationElement1568,
															expr: &seqExpr{
																pos: position{line: 1728, col: 5, offset: 55771},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 1728, col: 5, offset: 55771},
																		run: (*parser).callonListContinuationElement1570,
																	},
																	&labeledExpr{
																		pos:   position{line: 1731, col: 5, offset: 55834},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1731, col: 12, offset: 55841},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 1731, col: 12, offset: 55841},
																					run: (*parser).callonListContinuationElement1573,
																					expr: &litMatcher{
																						pos:        position{line: 1731, col: 12, offset: 55841},
																						val:        "TIP: ",
																						ignoreCase: false,
																						want:       "\"TIP: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1733, col: 13, offset: 55897},
																					run: (*parser).callonListContinuationElement1575,
																					expr: &litMatcher{
																						pos:        position{line: 1733, col: 13, offset: 55897},
																						val:        "NOTE: ",
																						ignoreCase: false,
																						want:       "\"NOTE: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1735, col: 13, offset: 55955},
																					run: (*parser).callonListContinuationElement1577,
																					expr: &litMatcher{
																						pos:        position{line: 1735, col: 13, offset: 55955},
																						val:        "IMPORTANT: ",
																						ignoreCase: false,
																						want:       "\"IMPORTANT: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1737, col: 13, offset: 56023},
																					run: (*parser).callonListContinuationElement1579,
																					expr: &litMatcher{
																						pos:        position{line: 1737, col: 13, offset: 56023},
																						val:        "WARNING: ",
																						ignoreCase: false,
																						want:       "\"WARNING: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1739, col: 13, offset: 56087},
																					run: (*parser).callonListContinuationElement1581,
																					expr: &litMatcher{
																						pos:        position{line: 1739, col: 13, offset: 56087},
																						val:        "CAUTION: ",
																						ignoreCase: false,
																						want:       "\"CAUTION: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1741, col: 13, offset: 56151},
																					run: (*parser).callonListContinuationElement1583,
																					expr: &andExpr{
																						pos: position{line: 1741, col: 13, offset: 56151},
																						expr: &actionExpr{
																							pos: position{line: 2901, col: 11, offset: 91793},
																							run: (*parser).callonListContinuationElement1585,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2901, col: 11, offset: 91793},
																								expr: &charClassMatcher{
																									pos:        position{line: 2901, col: 11, offset: 91793},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1565, col: 5, offset: 50477},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1508, col: 5, offset: 48827},
														run: (*parser).callonListContinuationElement1589,
														expr: &seqExpr{
															pos: position{line: 1508, col: 5, offset: 48827},
															exprs: []any{
																&notExpr{
																	pos: position{line: 1508, col: 5, offset: 48827},
																	expr: &actionExpr{
																		pos: position{line: 680, col: 14, offset: 21521},
																		run: (*parser).callonListContinuationElement1592,
																		expr: &seqExpr{
																			pos: position{line: 680, col: 14, offset: 21521},
																			exprs: []any{
																				&andExpr{
																					pos: position{line: 2914, col: 11, offset: 92066},
																					expr: &anyMatcher{
																						line: 2914, col: 13, offset: 92068,
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 680, col: 21, offset: 21528},
																					expr: &actionExpr{
																						pos: position{line: 2897, col: 10, offset: 91732},
																						run: (*parser).callonListContinuationElement1597,
																						expr: &charClassMatcher{
																							pos:        position{line: 2897, col: 10, offset: 91732},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2919, col: 8, offset: 92130},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 2906, col: 12, offset: 91903},
																							run: (*parser).callonListContinuationElement1600,
																							expr: &choiceExpr{
																								pos: position{line: 2906, col: 13, offset: 91904},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2906, col: 13, offset: 91904},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 20, offset: 91911},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 29, offset: 91920},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2916, col: 8, offset: 92080},
																							expr: &anyMatcher{
																								line: 2916, col: 9, offset: 92081,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1509, col: 5, offset: 48842},
																	expr: &seqExpr{
																		pos: position{line: 1539, col: 27, offset: 49668},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 1539, col: 27, offset: 49668},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1539, col: 31, offset: 49672},
																				expr: &actionExpr{
																					pos: position{line: 2897, col: 10, offset: 91732},
																					run: (*parser).callonListContinuationElement1611,
																					expr: &charClassMatcher{
																						pos:        position{line: 2897, col: 10, offset: 91732},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonListContinuationElement1613,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1510, col: 5, offset: 48870},
																	expr: &actionExpr{
																		pos: position{line: 1580, col: 5, offset: 50887},
																		run: (*parser).callonListContinuationElement1619,
																		expr: &seqExpr{
																			pos: position{line: 1580, col: 5, offset: 50887},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 1580, col: 5, offset: 50887},
																					expr: &actionExpr{
																						pos: position{line: 2897, col: 10, offset: 91732},
																						run: (*parser).callonListContinuationElement1622,
																						expr: &charClassMatcher{
																							pos:        position{line: 2897, col: 10, offset: 91732},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1580, col: 12, offset: 50894},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1582, col: 9, offset: 50957},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 1582, col: 9, offset: 50957},
																								run: (*parser).callonListContinuationElement1626,
																								expr: &seqExpr{
																									pos: position{line: 1582, col: 9, offset: 50957},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 1582, col: 9, offset: 50957},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1582, col: 16, offset: 50964},
																												run: (*parser).callonListContinuationElement1629,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1582, col: 16, offset: 50964},
																													expr: &litMatcher{
																														pos:        position{line: 1582, col: 17, offset: 50965},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1586, col: 9, offset: 51065},
																											run: (*parser).callonListContinuationElement1632,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1605, col: 11, offset: 51782},
																								run: (*parser).callonListContinuationElement1633,
																								expr: &seqExpr{
																									pos: position{line: 1605, col: 11, offset: 51782},
																									exprs: []any{
																										&oneOrMoreExpr{
																											pos: position{line: 1605, col: 11, offset: 51782},
																											expr: &charClassMatcher{
																												pos:        position{line: 1605, col: 12, offset: 51783},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1605, col: 20, offset: 51791},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1607, col: 13, offset: 51908},
																								run: (*parser).callonListContinuationElement1638,
																								expr: &seqExpr{
																									pos: position{line: 1607, col: 13, offset: 51908},
																									exprs: []any{
																										&charClassMatcher{
																											pos:        position{line: 1607, col: 14, offset: 51909},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1607, col: 21, offset: 51916},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1609, col: 13, offset: 52036},
																								run: (*parser).callonListContinuationElement1642,
																								expr: &seqExpr{
																									pos: position{line: 1609, col: 13, offset: 52036},
																									exprs: []any{
																										&charClassMatcher{
																											pos:        position{line: 1609, col: 14, offset: 52037},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1609, col: 21, offset: 52044},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1611, col: 13, offset: 52164},
																								run: (*parser).callonListContinuationElement1646,
																								expr: &seqExpr{
																									pos: position{line: 1611, col: 13, offset: 52164},
																									exprs: []any{
																										&oneOrMoreExpr{
																											pos: position{line: 1611, col: 13, offset: 52164},
																											expr: &charClassMatcher{
																												pos:        position{line: 1611, col: 14, offset: 52165},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1611, col: 26, offset: 52177},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1613, col: 13, offset: 52297},
																								run: (*parser).callonListContinuationElement1651,
																								expr: &seqExpr{
																									pos: position{line: 1613, col: 13, offset: 52297},
																									exprs: []any{
																										&oneOrMoreExpr{
																											pos: position{line: 1613, col: 13, offset: 52297},
																											expr: &charClassMatcher{
																												pos:        position{line: 1613, col: 14, offset: 52298},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1613, col: 26, offset: 52310},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2901, col: 11, offset: 91793},
																					run: (*parser).callonListContinuationElement1656,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2901, col: 11, offset: 91793},
																						expr: &charClassMatcher{
																							pos:        position{line: 2901, col: 11, offset: 91793},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1511, col: 5, offset: 48900},
																	expr: &actionExpr{
																		pos: position{line: 1630, col: 5, offset: 52849},
																		run: (*parser).callonListContinuationElement1660,
																		expr: &seqExpr{
																			pos: position{line: 1630, col: 5, offset: 52849},
																			exprs: []any{
																				&zeroOrMoreExpr{
																					pos: position{line: 1630, col: 5, offset: 52849},
																					expr: &actionExpr{
																						pos: position{line: 2897, col: 10, offset: 91732},
																						run: (*parser).callonListContinuationElement1663,
																						expr: &charClassMatcher{
																							pos:        position{line: 2897, col: 10, offset: 91732},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1631, col: 5, offset: 52861},
																					label: "style",
																					expr: &actionExpr{
																						pos: position{line: 1632, col: 9, offset: 52877},
																						run: (*parser).callonListContinuationElement1666,
																						expr: &choiceExpr{
																							pos: position{line: 1632, col: 10, offset: 52878},
																							alternatives: []any{
																								&litMatcher{
																									pos:        position{line: 1632, col: 11, offset: 52879},
																									val:        "-",
																									ignoreCase: false,
																									want:       "\"-\"",
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 1632, col: 18, offset: 52886},
																									expr: &litMatcher{
																										pos:        position{line: 1632, col: 19, offset: 52887},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1635, col: 7, offset: 52977},
																					run: (*parser).callonListContinuationElement1671,
																				},
																				&actionExpr{
																					pos: position{line: 2901, col: 11, offset: 91793},
																					run: (*parser).callonListContinuationElement1672,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2901, col: 11, offset: 91793},
																						expr: &charClassMatcher{
																							pos:        position{line: 2901, col: 11, offset: 91793},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1512, col: 5, offset: 48932},
																	expr: &actionExpr{
																		pos: position{line: 1719, col: 5, offset: 55386},
																		run: (*parser).callonListContinuationElement1676,
																		expr: &seqExpr{
																			pos: position{line: 1719, col: 5, offset: 55386},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 1719, col: 5, offset: 55386},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1719, col: 9, offset: 55390},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1719, col: 14, offset: 55395},
																						run: (*parser).callonListContinuationElement1680,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1719, col: 14, offset: 55395},
																							expr: &charClassMatcher{
																								pos:        position{line: 1719, col: 14, offset: 55395},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1719, col: 62, offset: 55443},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 2901, col: 11, offset: 91793},
																					run: (*parser).callonListContinuationElement1684,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2901, col: 11, offset: 91793},
																						expr: &charClassMatcher{
																							pos:        position{line: 2901, col: 11, offset: 91793},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1513, col: 5, offset: 48962},
																	expr: &seqExpr{
																		pos: position{line: 1513, col: 7, offset: 48964},
																		exprs: []any{
																			&actionExpr{
																				pos: position{line: 1665, col: 5, offset: 53868},
																				run: (*parser).callonListContinuationElement1689,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1665, col: 5, offset: 53868},
																					expr: &seqExpr{
																						pos: position{line: 1665, col: 6, offset: 53869},
																						exprs: []any{
																							&notExpr{
																								pos: position{line: 1665, col: 6, offset: 53869},
																								expr: &actionExpr{
																									pos: position{line: 1670, col: 5, offset: 54019},
																									run: (*parser).callonListContinuationElement1693,
																									expr: &seqExpr{
																										pos: position{line: 1670, col: 5, offset: 54019},
																										exprs: []any{
																											&labeledExpr{
																												pos:   position{line: 1670, col: 5, offset: 54019},
																												label: "separator",
																												expr: &actionExpr{
																													pos: position{line: 1670, col: 16, offset: 54030},
																													run: (*parser).callonListContinuationElement1696,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1670, col: 16, offset: 54030},
																														expr: &litMatcher{
																															pos:        position{line: 1670, col: 17, offset: 54031},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1673, col: 5, offset: 54088},
																												run: (*parser).callonListContinuationElement1699,
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1665, col: 35, offset: 53898},
																								expr: &choiceExpr{
																									pos: position{line: 2919, col: 8, offset: 92130},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 2906, col: 12, offset: 91903},
																											run: (*parser).callonListContinuationElement1702,
																											expr: &choiceExpr{
																												pos: position{line: 2906, col: 13, offset: 91904},
																												alternatives: []any{
																													&litMatcher{
																														pos:        position{line: 2906, col: 13, offset: 91904},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 20, offset: 91911},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2906, col: 29, offset: 91920},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2916, col: 8, offset: 92080},
																											expr: &anyMatcher{
																												line: 2916, col: 9, offset: 92081,
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1665, col: 40, offset: 53903,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1670, col: 5, offset: 54019},
																				run: (*parser).callonListContinuationElement1710,
																				expr: &seqExpr{
																					pos: position{line: 1670, col: 5, offset: 54019},
																					exprs: []any{
																						&labeledExpr{
																							pos:   position{line: 1670, col: 5, offset: 54019},
																							label: "separator",
																							expr: &actionExpr{
																								pos: position{line: 1670, col: 16, offset: 54030},
																								run: (*parser).callonListContinuationElement1713,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1670, col: 16, offset: 54030},
																									expr: &litMatcher{
																										pos:        position{line: 1670, col: 17, offset: 54031},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1673, col: 5, offset: 54088},
																							run: (*parser).callonListContinuationElement1716,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1514, col: 5, offset: 49020},
																	expr: &actionExpr{
																		pos: position{line: 727, col: 5, offset: 23074},
																		run: (*parser).callonListContinuationElement1718,
																		expr: &seqExpr{
																			pos: position{line: 727, col: 5, offset: 23074},
																			exprs: []any{
																				&notExpr{
																					pos: position{line: 727, col: 5, offset: 23074},
																					expr: &charClassMatcher{
																						pos:        position{line: 2787, col: 13, offset: 88827},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 728, col: 5, offset: 23104},
																					label: "delimiter",
																					expr: &choiceExpr{
																						pos: position{line: 729, col: 9, offset: 23124},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 743, col: 5, offset: 23616},
																								run: (*parser).callonListContinuationElement1724,
																								expr: &seqExpr{
																									pos: position{line: 743, col: 5, offset: 23616},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 743, col: 5, offset: 23616},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 743, col: 16, offset: 23627},
																												run: (*parser).callonListContinuationElement1727,
																												expr: &seqExpr{
																													pos: position{line: 743, col: 16, offset: 23627},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 743, col: 16, offset: 23627},
																															val:        "////",
																															ignoreCase: false,
																															want:       "\"////\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 743, col: 23, offset: 23634},
																															expr: &litMatcher{
																																pos:        position{line: 743, col: 23, offset: 23634},
																																val:        "/",
																																ignoreCase: false,
																																want:       "\"/\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 745, col: 8, offset: 23718},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement1733,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement1736,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 750, col: 5, offset: 23864},
																								run: (*parser).callonListContinuationElement1743,
																								expr: &seqExpr{
																									pos: position{line: 750, col: 5, offset: 23864},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 750, col: 5, offset: 23864},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 750, col: 16, offset: 23875},
																												run: (*parser).callonListContinuationElement1746,
																												expr: &seqExpr{
																													pos: position{line: 750, col: 16, offset: 23875},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 750, col: 16, offset: 23875},
																															val:        "====",
																															ignoreCase: false,
																															want:       "\"====\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 750, col: 23, offset: 23882},
																															expr: &litMatcher{
																																pos:        position{line: 750, col: 23, offset: 23882},
																																val:        "=",
																																ignoreCase: false,
																																want:       "\"=\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 752, col: 8, offset: 23966},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement1752,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement1755,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 763, col: 26, offset: 24352},
																								run: (*parser).callonListContinuationElement1762,
																								expr: &seqExpr{
																									pos: position{line: 763, col: 26, offset: 24352},
																									exprs: []any{
																										&litMatcher{
																											pos:        position{line: 763, col: 26, offset: 24352},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 763, col: 32, offset: 24358},
																											label: "language",
																											expr: &actionExpr{
																												pos: position{line: 767, col: 13, offset: 24488},
																												run: (*parser).callonListContinuationElement1766,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 767, col: 14, offset: 24489},
																													expr: &charClassMatcher{
																														pos:        position{line: 767, col: 14, offset: 24489},
																														val:        "[^\\r\\n` ]",
																														chars:      []rune{'\r', '\n', '`', ' '},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 763, col: 52, offset: 24378},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement1770,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement1773,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 757, col: 5, offset: 24111},
																								run: (*parser).callonListContinuationElement1780,
																								expr: &seqExpr{
																									pos: position{line: 757, col: 5, offset: 24111},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 757, col: 5, offset: 24111},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 757, col: 16, offset: 24122},
																												run: (*parser).callonListContinuationElement1783,
																												expr: &seqExpr{
																													pos: position{line: 757, col: 16, offset: 24122},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 757, col: 16, offset: 24122},
																															val:        "```",
																															ignoreCase: false,
																															want:       "\"```\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 757, col: 22, offset: 24128},
																															expr: &litMatcher{
																																pos:        position{line: 757, col: 22, offset: 24128},
																																val:        "`",
																																ignoreCase: false,
																																want:       "\"`\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 759, col: 8, offset: 24212},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement1789,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement1792,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 772, col: 5, offset: 24648},
																								run: (*parser).callonListContinuationElement1799,
																								expr: &seqExpr{
																									pos: position{line: 772, col: 5, offset: 24648},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 772, col: 5, offset: 24648},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 772, col: 16, offset: 24659},
																												run: (*parser).callonListContinuationElement1802,
																												expr: &seqExpr{
																													pos: position{line: 772, col: 16, offset: 24659},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 772, col: 16, offset: 24659},
																															val:        "----",
																															ignoreCase: false,
																															want:       "\"----\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 772, col: 23, offset: 24666},
																															expr: &litMatcher{
																																pos:        position{line: 772, col: 23, offset: 24666},
																																val:        "-",
																																ignoreCase: false,
																																want:       "\"-\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 774, col: 8, offset: 24750},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement1808,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement1811,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 786, col: 5, offset: 25124},
																								run: (*parser).callonListContinuationElement1818,
																								expr: &seqExpr{
																									pos: position{line: 786, col: 5, offset: 25124},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 786, col: 5, offset: 25124},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 786, col: 16, offset: 25135},
																												run: (*parser).callonListContinuationElement1821,
																												expr: &seqExpr{
																													pos: position{line: 786, col: 16, offset: 25135},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 786, col: 16, offset: 25135},
																															val:        "....",
																															ignoreCase: false,
																															want:       "\"....\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 786, col: 23, offset: 25142},
																															expr: &litMatcher{
																																pos:        position{line: 786, col: 23, offset: 25142},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 788, col: 8, offset: 25226},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement1827,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement1830,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 793, col: 5, offset: 25376},
																								run: (*parser).callonListContinuationElement1837,
																								expr: &seqExpr{
																									pos: position{line: 793, col: 5, offset: 25376},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 793, col: 5, offset: 25376},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 793, col: 16, offset: 25387},
																												run: (*parser).callonListContinuationElement1840,
																												expr: &seqExpr{
																													pos: position{line: 793, col: 16, offset: 25387},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 793, col: 16, offset: 25387},
																															val:        "++++",
																															ignoreCase: false,
																															want:       "\"++++\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 793, col: 23, offset: 25394},
																															expr: &litMatcher{
																																pos:        position{line: 793, col: 23, offset: 25394},
																																val:        "+",
																																ignoreCase: false,
																																want:       "\"+\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 795, col: 8, offset: 25478},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement1846,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement1849,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 800, col: 5, offset: 25626},
																								run: (*parser).callonListContinuationElement1856,
																								expr: &seqExpr{
																									pos: position{line: 800, col: 5, offset: 25626},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 800, col: 5, offset: 25626},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 800, col: 16, offset: 25637},
																												run: (*parser).callonListContinuationElement1859,
																												expr: &seqExpr{
																													pos: position{line: 800, col: 16, offset: 25637},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 800, col: 16, offset: 25637},
																															val:        "____",
																															ignoreCase: false,
																															want:       "\"____\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 800, col: 23, offset: 25644},
																															expr: &litMatcher{
																																pos:        position{line: 800, col: 23, offset: 25644},
																																val:        "_",
																																ignoreCase: false,
																																want:       "\"_\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 802, col: 8, offset: 25728},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement1865,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement1868,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 807, col: 5, offset: 25872},
																								run: (*parser).callonListContinuationElement1875,
																								expr: &seqExpr{
																									pos: position{line: 807, col: 5, offset: 25872},
																									exprs: []any{
																										&labeledExpr{
																											pos:   position{line: 807, col: 5, offset: 25872},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 807, col: 16, offset: 25883},
																												run: (*parser).callonListContinuationElement1878,
																												expr: &seqExpr{
																													pos: position{line: 807, col: 16, offset: 25883},
																													exprs: []any{
																														&litMatcher{
																															pos:        position{line: 807, col: 16, offset: 25883},
																															val:        "****",
																															ignoreCase: false,
																															want:       "\"****\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 807, col: 23, offset: 25890},
																															expr: &litMatcher{
																																pos:        position{line: 807, col: 23, offset: 25890},
																																val:        "*",
																																ignoreCase: false,
																																want:       "\"*\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 809, col: 8, offset: 25974},
																											expr: &actionExpr{
																												pos: position{line: 2897, col: 10, offset: 91732},
																												run: (*parser).callonListContinuationElement1884,
																												expr: &charClassMatcher{
																													pos:        position{line: 2897, col: 10, offset: 91732},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2919, col: 8, offset: 92130},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 2906, col: 12, offset: 91903},
																													run: (*parser).callonListContinuationElement1887,
																													expr: &choiceExpr{
																														pos: position{line: 2906, col: 13, offset: 91904},
																														alternatives: []any{
																															&litMatcher{
																																pos:        position{line: 2906, col: 13, offset: 91904},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 20, offset: 91911},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2906, col: 29, offset: 91920},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2916, col: 8, offset: 92080},
																													expr: &anyMatcher{
																														line: 2916, col: 9, offset: 92081,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1515, col: 5, offset: 49040},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 2847, col: 14, offset: 90325},
																		run: (*parser).callonListContinuationElement1895,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2847, col: 14, offset: 90325},
																			expr: &charClassMatcher{
																				pos:        position{line: 2847, col: 14, offset: 90325},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonListContinuationElement1899,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1703, col: 1, offset: 54880},
			expr: &actionExpr{
				pos: position{line: 1705, col: 5, offset: 54958},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1705, col: 5, offset: 54958},
					exprs: []any{
						&andCodeExpr{
							pos: position{line: 1705, col: 5, offset: 54958},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1708, col: 5, offset: 55025},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1708, col: 9, offset: 55029},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1708, col: 14, offset: 55034},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1708, col: 14, offset: 55034},
									expr: &charClassMatcher{
										pos:        position{line: 1708, col: 14, offset: 55034},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1708, col: 62, offset: 55082},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1708, col: 66, offset: 55086},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonCallout11,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andExpr{
							pos: position{line: 1708, col: 73, offset: 55093},
							expr: &choiceExpr{
								pos: position{line: 1708, col: 75, offset: 55095},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2906, col: 12, offset: 91903},
										run: (*parser).callonCallout15,
										expr: &choiceExpr{
											pos: position{line: 2906, col: 13, offset: 91904},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 2906, col: 13, offset: 91904},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2906, col: 20, offset: 91911},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2906, col: 29, offset: 91920},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2916, col: 8, offset: 92080},
										expr: &anyMatcher{
											line: 2916, col: 9, offset: 92081,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1708, col: 81, offset: 55101},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortcutParagraph",
			pos:  position{line: 1747, col: 1, offset: 56274},
			expr: &actionExpr{
				pos: position{line: 1749, col: 5, offset: 56348},
				run: (*parser).callonShortcutParagraph1,
				expr: &seqExpr{
					pos: position{line: 1749, col: 5, offset: 56348},
					exprs: []any{
						&andExpr{
							pos: position{line: 1749, col: 5, offset: 56348},
							expr: &seqExpr{
								pos: position{line: 1749, col: 7, offset: 56350},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 2787, col: 13, offset: 88827},
										val:        "[\\pL\\pN]",
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
									&notExpr{
										pos: position{line: 1749, col: 16, offset: 56359},
										expr: &seqExpr{
											pos: position{line: 1749, col: 18, offset: 56361},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 1749, col: 19, offset: 56362},
													val:        "[.)]",
													chars:      []rune{'.', ')'},
													ignoreCase: false,
													inverted:   false,
												},
												&actionExpr{
													pos: position{line: 2901, col: 11, offset: 91793},
													run: (*parser).callonShortcutParagraph9,
													expr: &oneOrMoreExpr{
														pos: position{line: 2901, col: 11, offset: 91793},
														expr: &charClassMatcher{
															pos:        position{line: 2901, col: 11, offset: 91793},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1750, col: 5, offset: 56502},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 1750, col: 11, offset: 56508},
								expr: &actionExpr{
									pos: position{line: 1728, col: 5, offset: 55771},
									run: (*parser).callonShortcutParagraph14,
									expr: &seqExpr{
										pos: position{line: 1728, col: 5, offset: 55771},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 1728, col: 5, offset: 55771},
												run: (*parser).callonShortcutParagraph16,
											},
											&labeledExpr{
												pos:   position{line: 1731, col: 5, offset: 55834},
												label: "style",
												expr: &choiceExpr{
													pos: position{line: 1731, col: 12, offset: 55841},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 1731, col: 12, offset: 55841},
															run: (*parser).callonShortcutParagraph19,
															expr: &litMatcher{
																pos:        position{line: 1731, col: 12, offset: 55841},
																val:        "TIP: ",
																ignoreCase: false,
																want:       "\"TIP: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1733, col: 13, offset: 55897},
															run: (*parser).callonShortcutParagraph21,
															expr: &litMatcher{
																pos:        position{line: 1733, col: 13, offset: 55897},
																val:        "NOTE: ",
																ignoreCase: false,
																want:       "\"NOTE: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1735, col: 13, offset: 55955},
															run: (*parser).callonShortcutParagraph23,
															expr: &litMatcher{
																pos:        position{line: 1735, col: 13, offset: 55955},
																val:        "IMPORTANT: ",
																ignoreCase: false,
																want:       "\"IMPORTANT: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1737, col: 13, offset: 56023},
															run: (*parser).callonShortcutParagraph25,
															expr: &litMatcher{
																pos:        position{line: 1737, col: 13, offset: 56023},
																val:        "WARNING: ",
																ignoreCase: false,
																want:       "\"WARNING: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1739, col: 13, offset: 56087},
															run: (*parser).callonShortcutParagraph27,
															expr: &litMatcher{
																pos:        position{line: 1739, col: 13, offset: 56087},
																val:        "CAUTION: ",
																ignoreCase: false,
																want:       "\"CAUTION: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1741, col: 13, offset: 56151},
															run: (*parser).callonShortcutParagraph29,
															expr: &andExpr{
																pos: position{line: 1741, col: 13, offset: 56151},
																expr: &actionExpr{
																	pos: position{line: 2901, col: 11, offset: 91793},
																	run: (*parser).callonShortcutParagraph31,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		expr: &charClassMatcher{
																			pos:        position{line: 2901, col: 11, offset: 91793},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1751, col: 5, offset: 56530},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1787, col: 5, offset: 57637},
								run: (*parser).callonShortcutParagraph35,
								expr: &seqExpr{
									pos: position{line: 1787, col: 5, offset: 57637},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 1787, col: 5, offset: 57637},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 2847, col: 14, offset: 90325},
												run: (*parser).callonShortcutParagraph38,
												expr: &oneOrMoreExpr{
													pos: position{line: 2847, col: 14, offset: 90325},
													expr: &charClassMatcher{
														pos:        position{line: 2847, col: 14, offset: 90325},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1788, col: 5, offset: 57661},
											run: (*parser).callonShortcutParagraph41,
										},
										&choiceExpr{
											pos: position{line: 2919, col: 8, offset: 92130},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 2906, col: 12, offset: 91903},
													run: (*parser).callonShortcutParagraph43,
													expr: &choiceExpr{
														pos: position{line: 2906, col: 13, offset: 91904},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2906, col: 13, offset: 91904},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2906, col: 20, offset: 91911},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2906, col: 29, offset: 91920},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2916, col: 8, offset: 92080},
													expr: &anyMatcher{
														line: 2916, col: 9, offset: 92081,
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1752, col: 5, offset: 56564},
							run: (*parser).callonShortcutParagraph50,
						},
						&labeledExpr{
							pos:   position{line: 1759, col: 5, offset: 56894},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1759, col: 16, offset: 56905},
								expr: &actionExpr{
									pos: position{line: 1760, col: 9, offset: 56915},
									run: (*parser).callonShortcutParagraph53,
									expr: &seqExpr{
										pos: position{line: 1760, col: 9, offset: 56915},
										exprs: []any{
											&andExpr{
												pos: position{line: 2914, col: 11, offset: 92066},
												expr: &anyMatcher{
													line: 2914, col: 13, offset: 92068,
												},
											},
											&notExpr{
												pos: position{line: 1761, col: 9, offset: 56931},
												expr: &actionExpr{
													pos: position{line: 680, col: 14, offset: 21521},
													run: (*parser).callonShortcutParagraph58,
													expr: &seqExpr{
														pos: position{line: 680, col: 14, offset: 21521},
														exprs: []any{
															&andExpr{
																pos: position{line: 2914, col: 11, offset: 92066},
																expr: &anyMatcher{
																	line: 2914, col: 13, offset: 92068,
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 680, col: 21, offset: 21528},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonShortcutParagraph63,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2919, col: 8, offset: 92130},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 2906, col: 12, offset: 91903},
																		run: (*parser).callonShortcutParagraph66,
																		expr: &choiceExpr{
																			pos: position{line: 2906, col: 13, offset: 91904},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2906, col: 13, offset: 91904},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 20, offset: 91911},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 29, offset: 91920},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1762, col: 9, offset: 56950},
												expr: &ruleRefExpr{
													pos:  position{line: 1762, col: 10, offset: 56951},
													name: "BlockAttributes",
												},
											},
											&notExpr{
												pos: position{line: 1763, col: 9, offset: 56975},
												expr: &actionExpr{
													pos: position{line: 727, col: 5, offset: 23074},
													run: (*parser).callonShortcutParagraph76,
													expr: &seqExpr{
														pos: position{line: 727, col: 5, offset: 23074},
														exprs: []any{
															&notExpr{
																pos: position{line: 727, col: 5, offset: 23074},
																expr: &charClassMatcher{
																	pos:        position{line: 2787, col: 13, offset: 88827},
																	val:        "[\\pL\\pN]",
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 728, col: 5, offset: 23104},
																label: "delimiter",
																expr: &choiceExpr{
																	pos: position{line: 729, col: 9, offset: 23124},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 743, col: 5, offset: 23616},
																			run: (*parser).callonShortcutParagraph82,
																			expr: &seqExpr{
																				pos: position{line: 743, col: 5, offset: 23616},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 743, col: 5, offset: 23616},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 743, col: 16, offset: 23627},
																							run: (*parser).callonShortcutParagraph85,
																							expr: &seqExpr{
																								pos: position{line: 743, col: 16, offset: 23627},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 743, col: 16, offset: 23627},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 743, col: 23, offset: 23634},
																										expr: &litMatcher{
																											pos:        position{line: 743, col: 23, offset: 23634},
																											val:        "/",
																											ignoreCase: false,
																											want:       "\"/\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 745, col: 8, offset: 23718},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonShortcutParagraph91,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonShortcutParagraph94,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 750, col: 5, offset: 23864},
																			run: (*parser).callonShortcutParagraph101,
																			expr: &seqExpr{
																				pos: position{line: 750, col: 5, offset: 23864},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 750, col: 5, offset: 23864},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 750, col: 16, offset: 23875},
																							run: (*parser).callonShortcutParagraph104,
																							expr: &seqExpr{
																								pos: position{line: 750, col: 16, offset: 23875},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 750, col: 16, offset: 23875},
																										val:        "====",
																										ignoreCase: false,
																										want:       "\"====\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 750, col: 23, offset: 23882},
																										expr: &litMatcher{
																											pos:        position{line: 750, col: 23, offset: 23882},
																											val:        "=",
																											ignoreCase: false,
																											want:       "\"=\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 752, col: 8, offset: 23966},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonShortcutParagraph110,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonShortcutParagraph113,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 763, col: 26, offset: 24352},
																			run: (*parser).callonShortcutParagraph120,
																			expr: &seqExpr{
																				pos: position{line: 763, col: 26, offset: 24352},
																				exprs: []any{
																					&litMatcher{
																						pos:        position{line: 763, col: 26, offset: 24352},
																						val:        "```",
																						ignoreCase: false,
																						want:       "\"```\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 763, col: 32, offset: 24358},
																						label: "language",
																						expr: &actionExpr{
																							pos: position{line: 767, col: 13, offset: 24488},
																							run: (*parser).callonShortcutParagraph124,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 767, col: 14, offset: 24489},
																								expr: &charClassMatcher{
																									pos:        position{line: 767, col: 14, offset: 24489},
																									val:        "[^\\r\\n` ]",
																									chars:      []rune{'\r', '\n', '`', ' '},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 763, col: 52, offset: 24378},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonShortcutParagraph128,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonShortcutParagraph131,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 757, col: 5, offset: 24111},
																			run: (*parser).callonShortcutParagraph138,
																			expr: &seqExpr{
																				pos: position{line: 757, col: 5, offset: 24111},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 757, col: 5, offset: 24111},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 757, col: 16, offset: 24122},
																							run: (*parser).callonShortcutParagraph141,
																							expr: &seqExpr{
																								pos: position{line: 757, col: 16, offset: 24122},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 757, col: 16, offset: 24122},
																										val:        "```",
																										ignoreCase: false,
																										want:       "\"```\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 757, col: 22, offset: 24128},
																										expr: &litMatcher{
																											pos:        position{line: 757, col: 22, offset: 24128},
																											val:        "`",
																											ignoreCase: false,
																											want:       "\"`\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 759, col: 8, offset: 24212},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonShortcutParagraph147,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonShortcutParagraph150,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 772, col: 5, offset: 24648},
																			run: (*parser).callonShortcutParagraph157,
																			expr: &seqExpr{
																				pos: position{line: 772, col: 5, offset: 24648},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 772, col: 5, offset: 24648},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 772, col: 16, offset: 24659},
																							run: (*parser).callonShortcutParagraph160,
																							expr: &seqExpr{
																								pos: position{line: 772, col: 16, offset: 24659},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 772, col: 16, offset: 24659},
																										val:        "----",
																										ignoreCase: false,
																										want:       "\"----\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 772, col: 23, offset: 24666},
																										expr: &litMatcher{
																											pos:        position{line: 772, col: 23, offset: 24666},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 774, col: 8, offset: 24750},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonShortcutParagraph166,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonShortcutParagraph169,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 786, col: 5, offset: 25124},
																			run: (*parser).callonShortcutParagraph176,
																			expr: &seqExpr{
																				pos: position{line: 786, col: 5, offset: 25124},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 786, col: 5, offset: 25124},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 786, col: 16, offset: 25135},
																							run: (*parser).callonShortcutParagraph179,
																							expr: &seqExpr{
																								pos: position{line: 786, col: 16, offset: 25135},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 786, col: 16, offset: 25135},
																										val:        "....",
																										ignoreCase: false,
																										want:       "\"....\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 786, col: 23, offset: 25142},
																										expr: &litMatcher{
																											pos:        position{line: 786, col: 23, offset: 25142},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 788, col: 8, offset: 25226},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonShortcutParagraph185,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonShortcutParagraph188,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 793, col: 5, offset: 25376},
																			run: (*parser).callonShortcutParagraph195,
																			expr: &seqExpr{
																				pos: position{line: 793, col: 5, offset: 25376},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 793, col: 5, offset: 25376},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 793, col: 16, offset: 25387},
																							run: (*parser).callonShortcutParagraph198,
																							expr: &seqExpr{
																								pos: position{line: 793, col: 16, offset: 25387},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 793, col: 16, offset: 25387},
																										val:        "++++",
																										ignoreCase: false,
																										want:       "\"++++\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 793, col: 23, offset: 25394},
																										expr: &litMatcher{
																											pos:        position{line: 793, col: 23, offset: 25394},
																											val:        "+",
																											ignoreCase: false,
																											want:       "\"+\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 795, col: 8, offset: 25478},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonShortcutParagraph204,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonShortcutParagraph207,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 800, col: 5, offset: 25626},
																			run: (*parser).callonShortcutParagraph214,
																			expr: &seqExpr{
																				pos: position{line: 800, col: 5, offset: 25626},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 800, col: 5, offset: 25626},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 800, col: 16, offset: 25637},
																							run: (*parser).callonShortcutParagraph217,
																							expr: &seqExpr{
																								pos: position{line: 800, col: 16, offset: 25637},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 800, col: 16, offset: 25637},
																										val:        "____",
																										ignoreCase: false,
																										want:       "\"____\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 800, col: 23, offset: 25644},
																										expr: &litMatcher{
																											pos:        position{line: 800, col: 23, offset: 25644},
																											val:        "_",
																											ignoreCase: false,
																											want:       "\"_\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 802, col: 8, offset: 25728},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonShortcutParagraph223,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonShortcutParagraph226,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 807, col: 5, offset: 25872},
																			run: (*parser).callonShortcutParagraph233,
																			expr: &seqExpr{
																				pos: position{line: 807, col: 5, offset: 25872},
																				exprs: []any{
																					&labeledExpr{
																						pos:   position{line: 807, col: 5, offset: 25872},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 807, col: 16, offset: 25883},
																							run: (*parser).callonShortcutParagraph236,
																							expr: &seqExpr{
																								pos: position{line: 807, col: 16, offset: 25883},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 807, col: 16, offset: 25883},
																										val:        "****",
																										ignoreCase: false,
																										want:       "\"****\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 807, col: 23, offset: 25890},
																										expr: &litMatcher{
																											pos:        position{line: 807, col: 23, offset: 25890},
																											val:        "*",
																											ignoreCase: false,
																											want:       "\"*\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 809, col: 8, offset: 25974},
																						expr: &actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonShortcutParagraph242,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2919, col: 8, offset: 92130},
																						alternatives: []any{
																							&actionExpr{
																								pos: position{line: 2906, col: 12, offset: 91903},
																								run: (*parser).callonShortcutParagraph245,
																								expr: &choiceExpr{
																									pos: position{line: 2906, col: 13, offset: 91904},
																									alternatives: []any{
																										&litMatcher{
																											pos:        position{line: 2906, col: 13, offset: 91904},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 20, offset: 91911},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2906, col: 29, offset: 91920},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2916, col: 8, offset: 92080},
																								expr: &anyMatcher{
																									line: 2916, col: 9, offset: 92081,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1764, col: 9, offset: 56999},
												expr: &seqExpr{
													pos: position{line: 1539, col: 27, offset: 49668},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 1539, col: 27, offset: 49668},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1539, col: 31, offset: 49672},
															expr: &actionExpr{
																pos: position{line: 2897, col: 10, offset: 91732},
																run: (*parser).callonShortcutParagraph256,
																expr: &charClassMatcher{
																	pos:        position{line: 2897, col: 10, offset: 91732},
																	val:        "[\\t ]",
																	chars:      []rune{'\t', ' '},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonShortcutParagraph258,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1765, col: 9, offset: 57031},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1765, col: 15, offset: 57037},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2465, col: 22, offset: 79256},
															run: (*parser).callonShortcutParagraph265,
															expr: &seqExpr{
																pos: position{line: 2465, col: 22, offset: 79256},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2470, col: 31, offset: 79477},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2470, col: 36, offset: 79482},
																		expr: &litMatcher{
																			pos:        position{line: 2470, col: 37, offset: 79483},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2465, col: 49, offset: 79283},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2843, col: 13, offset: 90258},
																			run: (*parser).callonShortcutParagraph271,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2843, col: 13, offset: 90258},
																				expr: &charClassMatcher{
																					pos:        position{line: 2843, col: 13, offset: 90258},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonShortcutParagraph275,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1787, col: 5, offset: 57637},
															run: (*parser).callonShortcutParagraph282,
															expr: &seqExpr{
																pos: position{line: 1787, col: 5, offset: 57637},
																exprs: []any{
																	&labeledExpr{
																		pos:   position{line: 1787, col: 5, offset: 57637},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2847, col: 14, offset: 90325},
																			run: (*parser).callonShortcutParagraph285,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2847, col: 14, offset: 90325},
																				expr: &charClassMatcher{
																					pos:        position{line: 2847, col: 14, offset: 90325},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1788, col: 5, offset: 57661},
																		run: (*parser).callonShortcutParagraph288,
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonShortcutParagraph290,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1772, col: 1, offset: 57241},
			expr: &actionExpr{
				pos: position{line: 1773, col: 5, offset: 57259},
				run: (*parser).callonParagraph1,
				expr: &seqExpr{
					pos: position{line: 1773, col: 5, offset: 57259},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1773, col: 5, offset: 57259},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 1773, col: 11, offset: 57265},
								expr: &actionExpr{
									pos: position{line: 1728, col: 5, offset: 55771},
									run: (*parser).callonParagraph5,
									expr: &seqExpr{
										pos: position{line: 1728, col: 5, offset: 55771},
										exprs: []any{
											&andCodeExpr{
												pos: position{line: 1728, col: 5, offset: 55771},
												run: (*parser).callonParagraph7,
											},
											&labeledExpr{
												pos:   position{line: 1731, col: 5, offset: 55834},
												label: "style",
												expr: &choiceExpr{
													pos: position{line: 1731, col: 12, offset: 55841},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 1731, col: 12, offset: 55841},
															run: (*parser).callonParagraph10,
															expr: &litMatcher{
																pos:        position{line: 1731, col: 12, offset: 55841},
																val:        "TIP: ",
																ignoreCase: false,
																want:       "\"TIP: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1733, col: 13, offset: 55897},
															run: (*parser).callonParagraph12,
															expr: &litMatcher{
																pos:        position{line: 1733, col: 13, offset: 55897},
																val:        "NOTE: ",
																ignoreCase: false,
																want:       "\"NOTE: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1735, col: 13, offset: 55955},
															run: (*parser).callonParagraph14,
															expr: &litMatcher{
																pos:        position{line: 1735, col: 13, offset: 55955},
																val:        "IMPORTANT: ",
																ignoreCase: false,
																want:       "\"IMPORTANT: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1737, col: 13, offset: 56023},
															run: (*parser).callonParagraph16,
															expr: &litMatcher{
																pos:        position{line: 1737, col: 13, offset: 56023},
																val:        "WARNING: ",
																ignoreCase: false,
																want:       "\"WARNING: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1739, col: 13, offset: 56087},
															run: (*parser).callonParagraph18,
															expr: &litMatcher{
																pos:        position{line: 1739, col: 13, offset: 56087},
																val:        "CAUTION: ",
																ignoreCase: false,
																want:       "\"CAUTION: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1741, col: 13, offset: 56151},
															run: (*parser).callonParagraph20,
															expr: &andExpr{
																pos: position{line: 1741, col: 13, offset: 56151},
																expr: &actionExpr{
																	pos: position{line: 2901, col: 11, offset: 91793},
																	run: (*parser).callonParagraph22,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2901, col: 11, offset: 91793},
																		expr: &charClassMatcher{
																			pos:        position{line: 2901, col: 11, offset: 91793},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1774, col: 5, offset: 57288},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1787, col: 5, offset: 57637},
								run: (*parser).callonParagraph26,
								expr: &seqExpr{
									pos: position{line: 1787, col: 5, offset: 57637},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 1787, col: 5, offset: 57637},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 2847, col: 14, offset: 90325},
												run: (*parser).callonParagraph29,
												expr: &oneOrMoreExpr{
													pos: position{line: 2847, col: 14, offset: 90325},
													expr: &charClassMatcher{
														pos:        position{line: 2847, col: 14, offset: 90325},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1788, col: 5, offset: 57661},
											run: (*parser).callonParagraph32,
										},
										&choiceExpr{
											pos: position{line: 2919, col: 8, offset: 92130},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 2906, col: 12, offset: 91903},
													run: (*parser).callonParagraph34,
													expr: &choiceExpr{
														pos: position{line: 2906, col: 13, offset: 91904},
														alternatives: []any{
															&litMatcher{
																pos:        position{line: 2906, col: 13, offset: 91904},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2906, col: 20, offset: 91911},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2906, col: 29, offset: 91920},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2916, col: 8, offset: 92080},
													expr: &anyMatcher{
														line: 2916, col: 9, offset: 92081,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1775, col: 5, offset: 57322},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1775, col: 16, offset: 57333},
								expr: &actionExpr{
									pos: position{line: 1776, col: 9, offset: 57343},
									run: (*parser).callonParagraph43,
									expr: &seqExpr{
										pos: position{line: 1776, col: 9, offset: 57343},
										exprs: []any{
											&andExpr{
												pos: position{line: 2914, col: 11, offset: 92066},
												expr: &anyMatcher{
													line: 2914, col: 13, offset: 92068,
												},
											},
											&notExpr{
												pos: position{line: 1777, col: 9, offset: 57358},
												expr: &actionExpr{
													pos: position{line: 680, col: 14, offset: 21521},
													run: (*parser).callonParagraph48,
													expr: &seqExpr{
														pos: position{line: 680, col: 14, offset: 21521},
														exprs: []any{
															&andExpr{
																pos: position{line: 2914, col: 11, offset: 92066},
																expr: &anyMatcher{
																	line: 2914, col: 13, offset: 92068,
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 680, col: 21, offset: 21528},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonParagraph53,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2919, col: 8, offset: 92130},
																alternatives: []any{
																	&actionExpr{
																		pos: position{line: 2906, col: 12, offset: 91903},
																		run: (*parser).callonParagraph56,
																		expr: &choiceExpr{
																			pos: position{line: 2906, col: 13, offset: 91904},
																			alternatives: []any{
																				&litMatcher{
																					pos:        position{line: 2906, col: 13, offset: 91904},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 20, offset: 91911},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2906, col: 29, offset: 91920},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2916, col: 8, offset: 92080},
																		expr: &anyMatcher{
																			line: 2916, col: 9, offset: 92081,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1778, col: 9, offset: 57377},
												expr: &ruleRefExpr{
													pos:  position{line: 1778, col: 10, offset: 57378},
													name: "BlockAttributes",
												},
											},
											&labeledExpr{
												pos:   position{line: 1779, col: 9, offset: 57402},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1779, col: 15, offset: 57408},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2465, col: 22, offset: 79256},
															run: (*parser).callonParagraph67,
															expr: &seqExpr{
																pos: position{line: 2465, col: 22, offset: 79256},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2470, col: 31, offset: 79477},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2470, col: 36, offset: 79482},
																		expr: &litMatcher{
																			pos:        position{line: 2470, col: 37, offset: 79483},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2465, col: 49, offset: 79283},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2843, col: 13, offset: 90258},
																			run: (*parser).callonParagraph73,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2843, col: 13, offset: 90258},
																				expr: &charClassMatcher{
																					pos:        position{line: 2843, col: 13, offset: 90258},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonParagraph77,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1787, col: 5, offset: 57637},
															run: (*parser).callonParagraph84,
															expr: &seqExpr{
																pos: position{line: 1787, col: 5, offset: 57637},
																exprs: []any{
																	&labeledExpr{
																		pos:   position{line: 1787, col: 5, offset: 57637},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2847, col: 14, offset: 90325},
																			run: (*parser).callonParagraph87,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2847, col: 14, offset: 90325},
																				expr: &charClassMatcher{
																					pos:        position{line: 2847, col: 14, offset: 90325},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1788, col: 5, offset: 57661},
																		run: (*parser).callonParagraph90,
																	},
																	&choiceExpr{
																		pos: position{line: 2919, col: 8, offset: 92130},
																		alternatives: []any{
																			&actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonParagraph92,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2916, col: 8, offset: 92080},
																				expr: &anyMatcher{
																					line: 2916, col: 9, offset: 92081,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1798, col: 1, offset: 58147},
			expr: &choiceExpr{
				pos: position{line: 1798, col: 15, offset: 58161},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1798, col: 15, offset: 58161},
						name: "EscapedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1798, col: 35, offset: 58181},
						name: "UnescapedQuotedText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1800, col: 1, offset: 58202},
			expr: &actionExpr{
				pos: position{line: 1801, col: 5, offset: 58227},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1801, col: 5, offset: 58227},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1801, col: 5, offset: 58227},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1801, col: 16, offset: 58238},
								expr: &actionExpr{
									pos: position{line: 1801, col: 17, offset: 58239},
									run: (*parser).callonEscapedQuotedText5,
									expr: &ruleRefExpr{
										pos:  position{line: 1801, col: 17, offset: 58239},
										name: "LongHandAttributes",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1804, col: 5, offset: 58307},
							expr: &litMatcher{
								pos:        position{line: 1804, col: 7, offset: 58309},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1805, col: 5, offset: 58318},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1806, col: 9, offset: 58336},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1806, col: 9, offset: 58336},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1807, col: 11, offset: 58363},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1808, col: 11, offset: 58391},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1809, col: 11, offset: 58422},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1810, col: 11, offset: 58450},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1811, col: 11, offset: 58481},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnescapedQuotedText",
			pos:  position{line: 1816, col: 1, offset: 58601},
			expr: &actionExpr{
				pos: position{line: 1817, col: 5, offset: 58643},
				run: (*parser).callonUnescapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1817, col: 5, offset: 58643},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1817, col: 5, offset: 58643},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1817, col: 16, offset: 58654},
								expr: &ruleRefExpr{
									pos:  position{line: 1817, col: 17, offset: 58655},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1818, col: 5, offset: 58680},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1818, col: 14, offset: 58689},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1818, col: 14, offset: 58689},
										name: "SingleQuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1818, col: 33, offset: 58708},
										name: "DoubleQuotedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedText",
			pos:  position{line: 1826, col: 1, offset: 58939},
			expr: &choiceExpr{
				pos: position{line: 1827, col: 5, offset: 58964},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1827, col: 5, offset: 58964},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1828, col: 7, offset: 58991},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1829, col: 7, offset: 59019},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1830, col: 7, offset: 59051},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1831, col: 7, offset: 59079},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1832, col: 7, offset: 59100},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "DoubleQuotedText",
			pos:  position{line: 1834, col: 1, offset: 59118},
			expr: &choiceExpr{
				pos: position{line: 1835, col: 5, offset: 59143},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1835, col: 5, offset: 59143},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1836, col: 7, offset: 59169},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1837, col: 7, offset: 59197},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1838, col: 7, offset: 59228},
						name: "DoubleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "QuotedTextElement",
			pos:  position{line: 1852, col: 1, offset: 59582},
			expr: &choiceExpr{
				pos: position{line: 1853, col: 5, offset: 59608},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2796, col: 5, offset: 88974},
						run: (*parser).callonQuotedTextElement2,
						expr: &seqExpr{
							pos: position{line: 2796, col: 5, offset: 88974},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2796, col: 5, offset: 88974},
									label: "text",
									expr: &actionExpr{
										pos: position{line: 2796, col: 11, offset: 88980},
										run: (*parser).callonQuotedTextElement5,
										expr: &oneOrMoreExpr{
											pos: position{line: 2796, col: 11, offset: 88980},
											expr: &charClassMatcher{
												pos:        position{line: 2796, col: 11, offset: 88980},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2799, col: 5, offset: 89038},
									expr: &seqExpr{
										pos: position{line: 2800, col: 9, offset: 89049},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2800, col: 9, offset: 89049},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&andCodeExpr{
												pos: position{line: 2801, col: 9, offset: 89098},
												run: (*parser).callonQuotedTextElement11,
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2805, col: 5, offset: 89178},
									expr: &seqExpr{
										pos: position{line: 2806, col: 9, offset: 89189},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2806, col: 9, offset: 89189},
												val:        "@",
												ignoreCase: false,
												want:       "\"@\"",
											},
											&charClassMatcher{
												pos:        position{line: 2806, col: 13, offset: 89193},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2901, col: 11, offset: 91793},
						run: (*parser).callonQuotedTextElement16,
						expr: &oneOrMoreExpr{
							pos: position{line: 2901, col: 11, offset: 91793},
							expr: &charClassMatcher{
								pos:        position{line: 2901, col: 11, offset: 91793},
								val:        "[\\t ]",
								chars:      []rune{'\t', ' '},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1855, col: 7, offset: 59671},
						name: "Replacement",
					},
					&actionExpr{
						pos: position{line: 2483, col: 5, offset: 79973},
						run: (*parser).callonQuotedTextElement20,
						expr: &seqExpr{
							pos: position{line: 2483, col: 5, offset: 79973},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2483, col: 5, offset: 79973},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 2483, col: 10, offset: 79978},
									expr: &charClassMatcher{
										pos:        position{line: 2483, col: 11, offset: 79979},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2489, col: 5, offset: 80171},
						run: (*parser).callonQuotedTextElement25,
						expr: &seqExpr{
							pos: position{line: 2489, col: 5, offset: 80171},
							exprs: []any{
								&andCodeExpr{
									pos: position{line: 2489, col: 5, offset: 80171},
									run: (*parser).callonQuotedTextElement27,
								},
								&andCodeExpr{
									pos: position{line: 2492, col: 5, offset: 80242},
									run: (*parser).callonQuotedTextElement28,
								},
								&litMatcher{
									pos:        position{line: 2496, col: 5, offset: 80367},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2496, col: 9, offset: 80371},
									expr: &charClassMatcher{
										pos:        position{line: 2496, col: 10, offset: 80372},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2814, col: 5, offset: 89386},
						run: (*parser).callonQuotedTextElement32,
						expr: &choiceExpr{
							pos: position{line: 2815, col: 9, offset: 89396},
							alternatives: []any{
								&charClassMatcher{
									pos:        position{line: 2815, col: 10, offset: 89397},
									val:        "[.,;?)!/:\"\\@=-]",
									chars:      []rune{'.', ',', ';', '?', ')', '!', '/', ':', '"', '\'', '@', '=', '-'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 2817, col: 13, offset: 89494},
									exprs: []any{
										&andCodeExpr{
											pos: position{line: 2817, col: 13, offset: 89494},
											run: (*parser).callonQuotedTextElement36,
										},
										&litMatcher{
											pos:        position{line: 2820, col: 13, offset: 89594},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2820, col: 19, offset: 89600},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&seqExpr{
									pos: position{line: 2823, col: 13, offset: 89638},
									exprs: []any{
										&andCodeExpr{
											pos: position{line: 2823, col: 13, offset: 89638},
											run: (*parser).callonQuotedTextElement40,
										},
										&charClassMatcher{
											pos:        position{line: 2826, col: 14, offset: 89731},
											val:        "[*_`#]",
											chars:      []rune{'*', '_', '`', '#'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&seqExpr{
									pos: position{line: 2828, col: 12, offset: 89775},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 2828, col: 12, offset: 89775},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
										&notExpr{
											pos: position{line: 2828, col: 16, offset: 89779},
											expr: &litMatcher{
												pos:        position{line: 2828, col: 17, offset: 89780},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 639, col: 5, offset: 20141},
						run: (*parser).callonQuotedTextElement46,
						expr: &seqExpr{
							pos: position{line: 639, col: 5, offset: 20141},
							exprs: []any{
								&andCodeExpr{
									pos: position{line: 639, col: 5, offset: 20141},
									run: (*parser).callonQuotedTextElement48,
								},
								&labeledExpr{
									pos:   position{line: 642, col: 5, offset: 20213},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 642, col: 14, offset: 20222},
										alternatives: []any{
											&actionExpr{
												pos: position{line: 648, col: 5, offset: 20351},
												run: (*parser).callonQuotedTextElement51,
												expr: &seqExpr{
													pos: position{line: 648, col: 5, offset: 20351},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 648, col: 5, offset: 20351},
															val:        "\\{",
															ignoreCase: false,
															want:       "\"\\\\{\"",
														},
														&labeledExpr{
															pos:   position{line: 648, col: 13, offset: 20359},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 321, col: 18, offset: 9768},
																run: (*parser).callonQuotedTextElement55,
																expr: &seqExpr{
																	pos: position{line: 321, col: 18, offset: 9768},
																	exprs: []any{
																		&charClassMatcher{
																			pos:        position{line: 321, col: 18, offset: 9768},
																			val:        "[_\\pL\\pN]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 321, col: 28, offset: 9778},
																			expr: &charClassMatcher{
																				pos:        position{line: 321, col: 29, offset: 9779},
																				val:        "[-\\pL\\pN]",
																				chars:      []rune{'-'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 648, col: 32, offset: 20378},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 655, col: 5, offset: 20619},
												run: (*parser).callonQuotedTextElement61,
												expr: &seqExpr{
													pos: position{line: 655, col: 5, offset: 20619},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 655, col: 5, offset: 20619},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 655, col: 9, offset: 20623},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 321, col: 18, offset: 9768},
																run: (*parser).callonQuotedTextElement65,
																expr: &seqExpr{
																	pos: position{line: 321, col: 18, offset: 9768},
																	exprs: []any{
																		&charClassMatcher{
																			pos:        position{line: 321, col: 18, offset: 9768},
																			val:        "[_\\pL\\pN]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 321, col: 28, offset: 9778},
																			expr: &charClassMatcher{
																				pos:        position{line: 321, col: 29, offset: 9779},
																				val:        "[-\\pL\\pN]",
																				chars:      []rune{'-'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 655, col: 28, offset: 20642},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 661, col: 25, offset: 20823},
												run: (*parser).callonQuotedTextElement71,
												expr: &seqExpr{
													pos: position{line: 661, col: 25, offset: 20823},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 661, col: 25, offset: 20823},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 661, col: 37, offset: 20835},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 321, col: 18, offset: 9768},
																run: (*parser).callonQuotedTextElement75,
																expr: &seqExpr{
																	pos: position{line: 321, col: 18, offset: 9768},
																	exprs: []any{
																		&charClassMatcher{
																			pos:        position{line: 321, col: 18, offset: 9768},
																			val:        "[_\\pL\\pN]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 321, col: 28, offset: 9778},
																			expr: &charClassMatcher{
																				pos:        position{line: 321, col: 29, offset: 9779},
																				val:        "[-\\pL\\pN]",
																				chars:      []rune{'-'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 661, col: 56, offset: 20854},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 661, col: 62, offset: 20860},
																expr: &actionExpr{
																	pos: position{line: 669, col: 17, offset: 21155},
																	run: (*parser).callonQuotedTextElement82,
																	expr: &seqExpr{
																		pos: position{line: 669, col: 17, offset: 21155},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 669, col: 17, offset: 21155},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 669, col: 21, offset: 21159},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 669, col: 28, offset: 21166},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 669, col: 28, offset: 21166},
																							run: (*parser).callonQuotedTextElement87,
																							expr: &charClassMatcher{
																								pos:        position{line: 669, col: 28, offset: 21166},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 671, col: 9, offset: 21220},
																							run: (*parser).callonQuotedTextElement89,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 671, col: 9, offset: 21220},
																								expr: &charClassMatcher{
																									pos:        position{line: 671, col: 9, offset: 21220},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 661, col: 78, offset: 20876},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 665, col: 25, offset: 20994},
												run: (*parser).callonQuotedTextElement93,
												expr: &seqExpr{
													pos: position{line: 665, col: 25, offset: 20994},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 665, col: 25, offset: 20994},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 665, col: 38, offset: 21007},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 321, col: 18, offset: 9768},
																run: (*parser).callonQuotedTextElement97,
																expr: &seqExpr{
																	pos: position{line: 321, col: 18, offset: 9768},
																	exprs: []any{
																		&charClassMatcher{
																			pos:        position{line: 321, col: 18, offset: 9768},
																			val:        "[_\\pL\\pN]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 321, col: 28, offset: 9778},
																			expr: &charClassMatcher{
																				pos:        position{line: 321, col: 29, offset: 9779},
																				val:        "[-\\pL\\pN]",
																				chars:      []rune{'-'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 665, col: 57, offset: 21026},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 665, col: 63, offset: 21032},
																expr: &actionExpr{
																	pos: position{line: 669, col: 17, offset: 21155},
																	run: (*parser).callonQuotedTextElement104,
																	expr: &seqExpr{
																		pos: position{line: 669, col: 17, offset: 21155},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 669, col: 17, offset: 21155},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 669, col: 21, offset: 21159},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 669, col: 28, offset: 21166},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 669, col: 28, offset: 21166},
																							run: (*parser).callonQuotedTextElement109,
																							expr: &charClassMatcher{
																								pos:        position{line: 669, col: 28, offset: 21166},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 671, col: 9, offset: 21220},
																							run: (*parser).callonQuotedTextElement111,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 671, col: 9, offset: 21220},
																								expr: &charClassMatcher{
																									pos:        position{line: 671, col: 9, offset: 21220},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 665, col: 79, offset: 21048},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2910, col: 18, offset: 92003},
						run: (*parser).callonQuotedTextElement115,
						expr: &seqExpr{
							pos: position{line: 2910, col: 18, offset: 92003},
							exprs: []any{
								&actionExpr{
									pos: position{line: 2906, col: 12, offset: 91903},
									run: (*parser).callonQuotedTextElement117,
									expr: &choiceExpr{
										pos: position{line: 2906, col: 13, offset: 91904},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2906, col: 13, offset: 91904},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 20, offset: 91911},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 29, offset: 91920},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2910, col: 26, offset: 92011},
									expr: &actionExpr{
										pos: position{line: 2906, col: 12, offset: 91903},
										run: (*parser).callonQuotedTextElement123,
										expr: &choiceExpr{
											pos: position{line: 2906, col: 13, offset: 91904},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 2906, col: 13, offset: 91904},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2906, col: 20, offset: 91911},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2906, col: 29, offset: 91920},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1860, col: 7, offset: 59838},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1861, col: 7, offset: 59885},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2452, col: 5, offset: 78802},
						run: (*parser).callonQuotedTextElement130,
						expr: &seqExpr{
							pos: position{line: 2452, col: 5, offset: 78802},
							exprs: []any{
								&andCodeExpr{
									pos: position{line: 2452, col: 5, offset: 78802},
									run: (*parser).callonQuotedTextElement132,
								},
								&labeledExpr{
									pos:   position{line: 2455, col: 5, offset: 78878},
									label: "element",
									expr: &actionExpr{
										pos: position{line: 2456, col: 9, offset: 78896},
										run: (*parser).callonQuotedTextElement134,
										expr: &charClassMatcher{
											pos:        position{line: 2456, col: 10, offset: 78897},
											val:        "[<>&]",
											chars:      []rune{'<', '>', '&'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1201, col: 23, offset: 37004},
						run: (*parser).callonQuotedTextElement136,
						expr: &seqExpr{
							pos: position{line: 1201, col: 23, offset: 37004},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1199, col: 32, offset: 36972},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1201, col: 51, offset: 37032},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1201, col: 56, offset: 37037},
										run: (*parser).callonQuotedTextElement140,
										expr: &oneOrMoreExpr{
											pos: position{line: 1201, col: 56, offset: 37037},
											expr: &charClassMatcher{
												pos:        position{line: 1201, col: 56, offset: 37037},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1199, col: 32, offset: 36972},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2836, col: 12, offset: 90040},
						run: (*parser).callonQuotedTextElement144,
						expr: &charClassMatcher{
							pos:        position{line: 2836, col: 12, offset: 90040},
							val:        "[^\\r\\n]",
							chars:      []rune{'\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1879, col: 1, offset: 60355},
			expr: &actionExpr{
				pos: position{line: 1880, col: 5, offset: 60383},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1880, col: 5, offset: 60383},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1875, col: 38, offset: 60308},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1881, col: 5, offset: 60422},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1881, col: 15, offset: 60432},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1877, col: 36, offset: 60349},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1886, col: 1, offset: 60592},
			expr: &oneOrMoreExpr{
				pos: position{line: 1886, col: 32, offset: 60623},
				expr: &ruleRefExpr{
					pos:  position{line: 1886, col: 32, offset: 60623},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1888, col: 1, offset: 60654},
			expr: &actionExpr{
				pos: position{line: 1889, col: 5, offset: 60689},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1889, col: 5, offset: 60689},
					exprs: []any{
						&andExpr{
							pos: position{line: 2914, col: 11, offset: 92066},
							expr: &anyMatcher{
								line: 2914, col: 13, offset: 92068,
							},
						},
						&notExpr{
							pos: position{line: 1890, col: 5, offset: 60700},
							expr: &litMatcher{
								pos:        position{line: 1877, col: 36, offset: 60349},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1891, col: 5, offset: 60737},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1891, col: 14, offset: 60746},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1916, col: 1, offset: 61426},
			expr: &actionExpr{
				pos: position{line: 1917, col: 5, offset: 61454},
				run: (*parser).callonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1917, col: 5, offset: 61454},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1900, col: 5, offset: 60980},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&andCodeExpr{
							pos: position{line: 1901, col: 5, offset: 60989},
							run: (*parser).callonSingleQuoteBoldText4,
						},
						&andExpr{
							pos: position{line: 1905, col: 5, offset: 61107},
							expr: &notExpr{
								pos: position{line: 1905, col: 7, offset: 61109},
								expr: &litMatcher{
									pos:        position{line: 1905, col: 8, offset: 61110},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1918, col: 5, offset: 61492},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1918, col: 15, offset: 61502},
								name: "SingleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1908, col: 5, offset: 61230},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&notExpr{
							pos: position{line: 1909, col: 5, offset: 61239},
							expr: &litMatcher{
								pos:        position{line: 1909, col: 6, offset: 61240},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
						&andCodeExpr{
							pos: position{line: 1910, col: 5, offset: 61303},
							run: (*parser).callonSingleQuoteBoldText13,
						},
						&andExpr{
							pos: position{line: 1914, col: 5, offset: 61412},
							expr: &notExpr{
								pos: position{line: 1914, col: 7, offset: 61414},
								expr: &charClassMatcher{
									pos:        position{line: 2787, col: 13, offset: 88827},
									val:        "[\\pL\\pN]",
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1923, col: 1, offset: 61662},
			expr: &actionExpr{
				pos: position{line: 1924, col: 5, offset: 61699},
				run: (*parser).callonSingleQuoteBoldTextElements1,
				expr: &seqExpr{
					pos: position{line: 1924, col: 5, offset: 61699},
					exprs: []any{
						&notExpr{
							pos: position{line: 1924, col: 5, offset: 61699},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonSingleQuoteBoldTextElements4,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1925, col: 5, offset: 61738},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1925, col: 14, offset: 61747},
								expr: &ruleRefExpr{
									pos:  position{line: 1925, col: 15, offset: 61748},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1926, col: 5, offset: 61782},
							run: (*parser).callonSingleQuoteBoldTextElements9,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1932, col: 1, offset: 61923},
			expr: &actionExpr{
				pos: position{line: 1933, col: 5, offset: 61958},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1933, col: 5, offset: 61958},
					exprs: []any{
						&andExpr{
							pos: position{line: 2914, col: 11, offset: 92066},
							expr: &anyMatcher{
								line: 2914, col: 13, offset: 92068,
							},
						},
						&notExpr{
							pos: position{line: 1934, col: 5, offset: 61986},
							expr: &seqExpr{
								pos: position{line: 1908, col: 5, offset: 61230},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1908, col: 5, offset: 61230},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&notExpr{
										pos: position{line: 1909, col: 5, offset: 61239},
										expr: &litMatcher{
											pos:        position{line: 1909, col: 6, offset: 61240},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
									&andCodeExpr{
										pos: position{line: 1910, col: 5, offset: 61303},
										run: (*parser).callonSingleQuoteBoldTextElement10,
									},
									&andExpr{
										pos: position{line: 1914, col: 5, offset: 61412},
										expr: &notExpr{
											pos: position{line: 1914, col: 7, offset: 61414},
											expr: &charClassMatcher{
												pos:        position{line: 2787, col: 13, offset: 88827},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1935, col: 5, offset: 62023},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1935, col: 14, offset: 62032},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1940, col: 1, offset: 62120},
			expr: &choiceExpr{
				pos: position{line: 1942, col: 5, offset: 62181},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1942, col: 5, offset: 62181},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1942, col: 5, offset: 62181},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1942, col: 5, offset: 62181},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1848, col: 25, offset: 59528},
										run: (*parser).callonEscapedBoldText5,
										expr: &seqExpr{
											pos: position{line: 1848, col: 25, offset: 59528},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1848, col: 25, offset: 59528},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1848, col: 30, offset: 59533},
													expr: &litMatcher{
														pos:        position{line: 1848, col: 30, offset: 59533},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1942, col: 40, offset: 62216},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1942, col: 45, offset: 62221},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1942, col: 55, offset: 62231},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1942, col: 84, offset: 62260},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1946, col: 7, offset: 62424},
						run: (*parser).callonEscapedBoldText14,
						expr: &seqExpr{
							pos: position{line: 1946, col: 7, offset: 62424},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1946, col: 7, offset: 62424},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1844, col: 25, offset: 59455},
										run: (*parser).callonEscapedBoldText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1844, col: 25, offset: 59455},
											expr: &litMatcher{
												pos:        position{line: 1844, col: 25, offset: 59455},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1946, col: 42, offset: 62459},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1946, col: 47, offset: 62464},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1946, col: 57, offset: 62474},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1946, col: 86, offset: 62503},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1951, col: 7, offset: 62705},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 1951, col: 7, offset: 62705},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1951, col: 7, offset: 62705},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1844, col: 25, offset: 59455},
										run: (*parser).callonEscapedBoldText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1844, col: 25, offset: 59455},
											expr: &litMatcher{
												pos:        position{line: 1844, col: 25, offset: 59455},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1951, col: 42, offset: 62740},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1951, col: 46, offset: 62744},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1951, col: 56, offset: 62754},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1951, col: 85, offset: 62783},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1968, col: 1, offset: 63263},
			expr: &actionExpr{
				pos: position{line: 1969, col: 5, offset: 63293},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1969, col: 5, offset: 63293},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1964, col: 40, offset: 63214},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1970, col: 5, offset: 63334},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1970, col: 15, offset: 63344},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1966, col: 38, offset: 63257},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1975, col: 1, offset: 63509},
			expr: &oneOrMoreExpr{
				pos: position{line: 1975, col: 34, offset: 63542},
				expr: &ruleRefExpr{
					pos:  position{line: 1975, col: 34, offset: 63542},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1977, col: 1, offset: 63574},
			expr: &actionExpr{
				pos: position{line: 1978, col: 5, offset: 63611},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1978, col: 5, offset: 63611},
					exprs: []any{
						&andExpr{
							pos: position{line: 2914, col: 11, offset: 92066},
							expr: &anyMatcher{
								line: 2914, col: 13, offset: 92068,
							},
						},
						&notExpr{
							pos: position{line: 1979, col: 5, offset: 63622},
							expr: &litMatcher{
								pos:        position{line: 1966, col: 38, offset: 63257},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1980, col: 5, offset: 63661},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1980, col: 14, offset: 63670},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 2006, col: 1, offset: 64354},
			expr: &actionExpr{
				pos: position{line: 2007, col: 5, offset: 64384},
				run: (*parser).callonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 2007, col: 5, offset: 64384},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1989, col: 5, offset: 63912},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&andCodeExpr{
							pos: position{line: 1990, col: 5, offset: 63921},
							run: (*parser).callonSingleQuoteItalicText4,
						},
						&andExpr{
							pos: position{line: 1994, col: 5, offset: 64041},
							expr: &notExpr{
								pos: position{line: 1994, col: 7, offset: 64043},
								expr: &litMatcher{
									pos:        position{line: 1994, col: 8, offset: 64044},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2008, col: 5, offset: 64424},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2008, col: 15, offset: 64434},
								name: "SingleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1998, col: 5, offset: 64154},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&notExpr{
							pos: position{line: 1999, col: 5, offset: 64163},
							expr: &litMatcher{
								pos:        position{line: 1999, col: 6, offset: 64164},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
						&andCodeExpr{
							pos: position{line: 2000, col: 5, offset: 64229},
							run: (*parser).callonSingleQuoteItalicText13,
						},
						&andExpr{
							pos: position{line: 2004, col: 5, offset: 64340},
							expr: &notExpr{
								pos: position{line: 2004, col: 7, offset: 64342},
								expr: &charClassMatcher{
									pos:        position{line: 2787, col: 13, offset: 88827},
									val:        "[\\pL\\pN]",
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 2013, col: 1, offset: 64601},
			expr: &actionExpr{
				pos: position{line: 2014, col: 5, offset: 64639},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 2014, col: 5, offset: 64639},
					exprs: []any{
						&notExpr{
							pos: position{line: 2014, col: 5, offset: 64639},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonSingleQuoteItalicTextElements4,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2015, col: 5, offset: 64678},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2015, col: 14, offset: 64687},
								expr: &ruleRefExpr{
									pos:  position{line: 2015, col: 15, offset: 64688},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2016, col: 5, offset: 64723},
							run: (*parser).callonSingleQuoteItalicTextElements9,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 2022, col: 1, offset: 64864},
			expr: &actionExpr{
				pos: position{line: 2023, col: 5, offset: 64901},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 2023, col: 5, offset: 64901},
					exprs: []any{
						&andExpr{
							pos: position{line: 2914, col: 11, offset: 92066},
							expr: &anyMatcher{
								line: 2914, col: 13, offset: 92068,
							},
						},
						&notExpr{
							pos: position{line: 2024, col: 5, offset: 64912},
							expr: &seqExpr{
								pos: position{line: 1998, col: 5, offset: 64154},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1998, col: 5, offset: 64154},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
									&notExpr{
										pos: position{line: 1999, col: 5, offset: 64163},
										expr: &litMatcher{
											pos:        position{line: 1999, col: 6, offset: 64164},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
									&andCodeExpr{
										pos: position{line: 2000, col: 5, offset: 64229},
										run: (*parser).callonSingleQuoteItalicTextElement10,
									},
									&andExpr{
										pos: position{line: 2004, col: 5, offset: 64340},
										expr: &notExpr{
											pos: position{line: 2004, col: 7, offset: 64342},
											expr: &charClassMatcher{
												pos:        position{line: 2787, col: 13, offset: 88827},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2025, col: 5, offset: 64951},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2025, col: 14, offset: 64960},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 2030, col: 1, offset: 65048},
			expr: &choiceExpr{
				pos: position{line: 2032, col: 5, offset: 65113},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2032, col: 5, offset: 65113},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 2032, col: 5, offset: 65113},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2032, col: 5, offset: 65113},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1848, col: 25, offset: 59528},
										run: (*parser).callonEscapedItalicText5,
										expr: &seqExpr{
											pos: position{line: 1848, col: 25, offset: 59528},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1848, col: 25, offset: 59528},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1848, col: 30, offset: 59533},
													expr: &litMatcher{
														pos:        position{line: 1848, col: 30, offset: 59533},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2032, col: 40, offset: 65148},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 2032, col: 45, offset: 65153},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2032, col: 55, offset: 65163},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2032, col: 86, offset: 65194},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2036, col: 7, offset: 65359},
						run: (*parser).callonEscapedItalicText14,
						expr: &seqExpr{
							pos: position{line: 2036, col: 7, offset: 65359},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2036, col: 7, offset: 65359},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1844, col: 25, offset: 59455},
										run: (*parser).callonEscapedItalicText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1844, col: 25, offset: 59455},
											expr: &litMatcher{
												pos:        position{line: 1844, col: 25, offset: 59455},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2036, col: 42, offset: 65394},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 2036, col: 47, offset: 65399},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2036, col: 57, offset: 65409},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2036, col: 88, offset: 65440},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2041, col: 7, offset: 65681},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 2041, col: 7, offset: 65681},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2041, col: 7, offset: 65681},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1844, col: 25, offset: 59455},
										run: (*parser).callonEscapedItalicText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1844, col: 25, offset: 59455},
											expr: &litMatcher{
												pos:        position{line: 1844, col: 25, offset: 59455},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2041, col: 42, offset: 65716},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 2041, col: 46, offset: 65720},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2041, col: 56, offset: 65730},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2041, col: 87, offset: 65761},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 2058, col: 1, offset: 66325},
			expr: &actionExpr{
				pos: position{line: 2059, col: 5, offset: 66358},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2059, col: 5, offset: 66358},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2054, col: 43, offset: 66273},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 2060, col: 5, offset: 66402},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2060, col: 15, offset: 66412},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2056, col: 41, offset: 66319},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 2065, col: 1, offset: 66587},
			expr: &oneOrMoreExpr{
				pos: position{line: 2065, col: 37, offset: 66623},
				expr: &ruleRefExpr{
					pos:  position{line: 2065, col: 37, offset: 66623},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 2067, col: 1, offset: 66690},
			expr: &actionExpr{
				pos: position{line: 2068, col: 5, offset: 66730},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 2068, col: 5, offset: 66730},
					exprs: []any{
						&andExpr{
							pos: position{line: 2914, col: 11, offset: 92066},
							expr: &anyMatcher{
								line: 2914, col: 13, offset: 92068,
							},
						},
						&notExpr{
							pos: position{line: 2069, col: 5, offset: 66741},
							expr: &litMatcher{
								pos:        position{line: 2056, col: 41, offset: 66319},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2070, col: 5, offset: 66783},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2070, col: 14, offset: 66792},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextEndDelimiter",
			pos:  position{line: 2088, col: 1, offset: 67334},
			expr: &seqExpr{
				pos: position{line: 2089, col: 5, offset: 67379},
				exprs: []any{
					&notExpr{
						pos: position{line: 2089, col: 5, offset: 67379},
						expr: &ruleRefExpr{
							pos:  position{line: 2089, col: 6, offset: 67380},
							name: "QuotationMark",
						},
					},
					&litMatcher{
						pos:        position{line: 2090, col: 5, offset: 67399},
						val:        "`",
						ignoreCase: false,
						want:       "\"`\"",
					},
					&andCodeExpr{
						pos: position{line: 2091, col: 5, offset: 67407},
						run: (*parser).callonSingleQuoteMonospaceTextEndDelimiter5,
					},
					&andExpr{
						pos: position{line: 2095, col: 5, offset: 67521},
						expr: &notExpr{
							pos: position{line: 2095, col: 7, offset: 67523},
							expr: &charClassMatcher{
								pos:        position{line: 2787, col: 13, offset: 88827},
								val:        "[\\pL\\pN]",
								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 2098, col: 1, offset: 67540},
			expr: &actionExpr{
				pos: position{line: 2099, col: 5, offset: 67573},
				run: (*parser).callonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2099, col: 5, offset: 67573},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2081, col: 5, offset: 67136},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andCodeExpr{
							pos: position{line: 2082, col: 5, offset: 67145},
							run: (*parser).callonSingleQuoteMonospaceText4,
						},
						&andExpr{
							pos: position{line: 2086, col: 5, offset: 67268},
							expr: &notExpr{
								pos: position{line: 2086, col: 7, offset: 67270},
								expr: &litMatcher{
									pos:        position{line: 2086, col: 8, offset: 67271},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2100, col: 5, offset: 67617},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2100, col: 15, offset: 67627},
								name: "SingleQuoteMonospaceTextElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2101, col: 5, offset: 67666},
							name: "SingleQuoteMonospaceTextEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 2105, col: 1, offset: 67803},
			expr: &actionExpr{
				pos: position{line: 2106, col: 5, offset: 67844},
				run: (*parser).callonSingleQuoteMonospaceTextElements1,
				expr: &seqExpr{
					pos: position{line: 2106, col: 5, offset: 67844},
					exprs: []any{
						&notExpr{
							pos: position{line: 2106, col: 5, offset: 67844},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonSingleQuoteMonospaceTextElements4,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2107, col: 5, offset: 67883},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2107, col: 14, offset: 67892},
								expr: &ruleRefExpr{
									pos:  position{line: 2107, col: 15, offset: 67893},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2108, col: 5, offset: 67931},
							run: (*parser).callonSingleQuoteMonospaceTextElements9,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 2114, col: 1, offset: 68072},
			expr: &actionExpr{
				pos: position{line: 2115, col: 5, offset: 68112},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 2115, col: 5, offset: 68112},
					exprs: []any{
						&andExpr{
							pos: position{line: 2914, col: 11, offset: 92066},
							expr: &anyMatcher{
								line: 2914, col: 13, offset: 92068,
							},
						},
						&notExpr{
							pos: position{line: 2116, col: 5, offset: 68123},
							expr: &ruleRefExpr{
								pos:  position{line: 2116, col: 6, offset: 68124},
								name: "SingleQuoteMonospaceTextEndDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2117, col: 5, offset: 68165},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2117, col: 14, offset: 68174},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 2122, col: 1, offset: 68262},
			expr: &choiceExpr{
				pos: position{line: 2124, col: 5, offset: 68333},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2124, col: 5, offset: 68333},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2124, col: 5, offset: 68333},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2124, col: 5, offset: 68333},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1848, col: 25, offset: 59528},
										run: (*parser).callonEscapedMonospaceText5,
										expr: &seqExpr{
											pos: position{line: 1848, col: 25, offset: 59528},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1848, col: 25, offset: 59528},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1848, col: 30, offset: 59533},
													expr: &litMatcher{
														pos:        position{line: 1848, col: 30, offset: 59533},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2124, col: 40, offset: 68368},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2124, col: 45, offset: 68373},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2124, col: 55, offset: 68383},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2124, col: 89, offset: 68417},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2128, col: 7, offset: 68586},
						run: (*parser).callonEscapedMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 2128, col: 7, offset: 68586},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2128, col: 7, offset: 68586},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1844, col: 25, offset: 59455},
										run: (*parser).callonEscapedMonospaceText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1844, col: 25, offset: 59455},
											expr: &litMatcher{
												pos:        position{line: 1844, col: 25, offset: 59455},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2128, col: 42, offset: 68621},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2128, col: 47, offset: 68626},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2128, col: 57, offset: 68636},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2128, col: 91, offset: 68670},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2133, col: 7, offset: 68876},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 2133, col: 7, offset: 68876},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2133, col: 7, offset: 68876},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1844, col: 25, offset: 59455},
										run: (*parser).callonEscapedMonospaceText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1844, col: 25, offset: 59455},
											expr: &litMatcher{
												pos:        position{line: 1844, col: 25, offset: 59455},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2133, col: 42, offset: 68911},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 2133, col: 46, offset: 68915},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2133, col: 56, offset: 68925},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2133, col: 90, offset: 68959},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 2150, col: 1, offset: 69444},
			expr: &actionExpr{
				pos: position{line: 2151, col: 5, offset: 69474},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2151, col: 5, offset: 69474},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2146, col: 40, offset: 69395},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 2152, col: 5, offset: 69515},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2152, col: 15, offset: 69525},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2148, col: 38, offset: 69438},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 2157, col: 1, offset: 69691},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2157, col: 34, offset: 69724},
				expr: &ruleRefExpr{
					pos:  position{line: 2157, col: 34, offset: 69724},
					name: "DoubleQuoteMarkedTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 2159, col: 1, offset: 69755},
			expr: &actionExpr{
				pos: position{line: 2160, col: 5, offset: 69824},
				run: (*parser).callonDoubleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2160, col: 5, offset: 69824},
					exprs: []any{
						&andExpr{
							pos: position{line: 2914, col: 11, offset: 92066},
							expr: &anyMatcher{
								line: 2914, col: 13, offset: 92068,
							},
						},
						&notExpr{
							pos: position{line: 2161, col: 5, offset: 69835},
							expr: &litMatcher{
								pos:        position{line: 2148, col: 38, offset: 69438},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2162, col: 5, offset: 69874},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2162, col: 14, offset: 69883},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 2187, col: 1, offset: 70565},
			expr: &actionExpr{
				pos: position{line: 2188, col: 5, offset: 70595},
				run: (*parser).callonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2188, col: 5, offset: 70595},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2171, col: 5, offset: 70131},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&andCodeExpr{
							pos: position{line: 2172, col: 5, offset: 70140},
							run: (*parser).callonSingleQuoteMarkedText4,
						},
						&andExpr{
							pos: position{line: 2176, col: 5, offset: 70260},
							expr: &notExpr{
								pos: position{line: 2176, col: 7, offset: 70262},
								expr: &litMatcher{
									pos:        position{line: 2176, col: 8, offset: 70263},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2189, col: 5, offset: 70635},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2189, col: 15, offset: 70645},
								name: "SingleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2179, col: 5, offset: 70368},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&notExpr{
							pos: position{line: 2180, col: 5, offset: 70376},
							expr: &litMatcher{
								pos:        position{line: 2180, col: 6, offset: 70377},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
						},
						&andCodeExpr{
							pos: position{line: 2181, col: 5, offset: 70440},
							run: (*parser).callonSingleQuoteMarkedText13,
						},
						&andExpr{
							pos: position{line: 2185, col: 5, offset: 70551},
							expr: &notExpr{
								pos: position{line: 2185, col: 7, offset: 70553},
								expr: &charClassMatcher{
									pos:        position{line: 2787, col: 13, offset: 88827},
									val:        "[\\pL\\pN]",
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 2194, col: 1, offset: 70812},
			expr: &actionExpr{
				pos: position{line: 2195, col: 5, offset: 70850},
				run: (*parser).callonSingleQuoteMarkedTextElements1,
				expr: &seqExpr{
					pos: position{line: 2195, col: 5, offset: 70850},
					exprs: []any{
						&notExpr{
							pos: position{line: 2195, col: 5, offset: 70850},
							expr: &actionExpr{
								pos: position{line: 2897, col: 10, offset: 91732},
								run: (*parser).callonSingleQuoteMarkedTextElements4,
								expr: &charClassMatcher{
									pos:        position{line: 2897, col: 10, offset: 91732},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2196, col: 5, offset: 70889},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2196, col: 14, offset: 70898},
								expr: &ruleRefExpr{
									pos:  position{line: 2196, col: 15, offset: 70899},
									name: "SingleQuoteMarkedTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2197, col: 5, offset: 70935},
							run: (*parser).callonSingleQuoteMarkedTextElements9,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 2203, col: 1, offset: 71076},
			expr: &actionExpr{
				pos: position{line: 2204, col: 5, offset: 71113},
				run: (*parser).callonSingleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2204, col: 5, offset: 71113},
					exprs: []any{
						&andExpr{
							pos: position{line: 2914, col: 11, offset: 92066},
							expr: &anyMatcher{
								line: 2914, col: 13, offset: 92068,
							},
						},
						&notExpr{
							pos: position{line: 2205, col: 5, offset: 71124},
							expr: &seqExpr{
								pos: position{line: 2179, col: 5, offset: 70368},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 2179, col: 5, offset: 70368},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
									&notExpr{
										pos: position{line: 2180, col: 5, offset: 70376},
										expr: &litMatcher{
											pos:        position{line: 2180, col: 6, offset: 70377},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
									&andCodeExpr{
										pos: position{line: 2181, col: 5, offset: 70440},
										run: (*parser).callonSingleQuoteMarkedTextElement10,
									},
									&andExpr{
										pos: position{line: 2185, col: 5, offset: 70551},
										expr: &notExpr{
											pos: position{line: 2185, col: 7, offset: 70553},
											expr: &charClassMatcher{
												pos:        position{line: 2787, col: 13, offset: 88827},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2206, col: 5, offset: 71163},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2206, col: 14, offset: 71172},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 2211, col: 1, offset: 71260},
			expr: &choiceExpr{
				pos: position{line: 2213, col: 5, offset: 71324},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2213, col: 5, offset: 71324},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 2213, col: 5, offset: 71324},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2213, col: 5, offset: 71324},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1848, col: 25, offset: 59528},
										run: (*parser).callonEscapedMarkedText5,
										expr: &seqExpr{
											pos: position{line: 1848, col: 25, offset: 59528},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1848, col: 25, offset: 59528},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1848, col: 30, offset: 59533},
													expr: &litMatcher{
														pos:        position{line: 1848, col: 30, offset: 59533},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2213, col: 40, offset: 71359},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2213, col: 45, offset: 71364},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2213, col: 55, offset: 71374},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2213, col: 86, offset: 71405},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2217, col: 7, offset: 71570},
						run: (*parser).callonEscapedMarkedText14,
						expr: &seqExpr{
							pos: position{line: 2217, col: 7, offset: 71570},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2217, col: 7, offset: 71570},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1844, col: 25, offset: 59455},
										run: (*parser).callonEscapedMarkedText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1844, col: 25, offset: 59455},
											expr: &litMatcher{
												pos:        position{line: 1844, col: 25, offset: 59455},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2217, col: 42, offset: 71605},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2217, col: 47, offset: 71610},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2217, col: 57, offset: 71620},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2217, col: 88, offset: 71651},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2222, col: 7, offset: 71854},
						run: (*parser).callonEscapedMarkedText24,
						expr: &seqExpr{
							pos: position{line: 2222, col: 7, offset: 71854},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2222, col: 7, offset: 71854},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1844, col: 25, offset: 59455},
										run: (*parser).callonEscapedMarkedText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1844, col: 25, offset: 59455},
											expr: &litMatcher{
												pos:        position{line: 1844, col: 25, offset: 59455},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2222, col: 42, offset: 71889},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 2222, col: 46, offset: 71893},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2222, col: 56, offset: 71903},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2222, col: 87, offset: 71934},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 2229, col: 1, offset: 72201},
			expr: &actionExpr{
				pos: position{line: 2230, col: 5, offset: 72223},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2230, col: 5, offset: 72223},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2236, col: 27, offset: 72438},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2231, col: 5, offset: 72250},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2231, col: 14, offset: 72259},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2236, col: 27, offset: 72438},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 2238, col: 1, offset: 72443},
			expr: &choiceExpr{
				pos: position{line: 2238, col: 25, offset: 72467},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2238, col: 25, offset: 72467},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2240, col: 21, offset: 72519},
						run: (*parser).callonSubscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2240, col: 21, offset: 72519},
							expr: &charClassMatcher{
								pos:        position{line: 2240, col: 21, offset: 72519},
								val:        "[^\\r\\n ~]",
								chars:      []rune{'\r', '\n', ' ', '~'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 2244, col: 1, offset: 72604},
			expr: &actionExpr{
				pos: position{line: 2246, col: 5, offset: 72671},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2246, col: 5, offset: 72671},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2246, col: 5, offset: 72671},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1844, col: 25, offset: 59455},
								run: (*parser).callonEscapedSubscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1844, col: 25, offset: 59455},
									expr: &litMatcher{
										pos:        position{line: 1844, col: 25, offset: 59455},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2236, col: 27, offset: 72438},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2248, col: 5, offset: 72739},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2248, col: 14, offset: 72748},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2236, col: 27, offset: 72438},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 2256, col: 1, offset: 73011},
			expr: &actionExpr{
				pos: position{line: 2257, col: 5, offset: 73035},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2257, col: 5, offset: 73035},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2263, col: 29, offset: 73262},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2258, col: 5, offset: 73065},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2258, col: 14, offset: 73074},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2263, col: 29, offset: 73262},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 2265, col: 1, offset: 73267},
			expr: &choiceExpr{
				pos: position{line: 2265, col: 27, offset: 73293},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2265, col: 27, offset: 73293},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2267, col: 23, offset: 73349},
						run: (*parser).callonSuperscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2267, col: 23, offset: 73349},
							expr: &charClassMatcher{
								pos:        position{line: 2267, col: 23, offset: 73349},
								val:        "[^\\r\\n ^]",
								chars:      []rune{'\r', '\n', ' ', '^'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 2271, col: 1, offset: 73434},
			expr: &actionExpr{
				pos: position{line: 2273, col: 5, offset: 73506},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2273, col: 5, offset: 73506},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2273, col: 5, offset: 73506},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1844, col: 25, offset: 59455},
								run: (*parser).callonEscapedSuperscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1844, col: 25, offset: 59455},
									expr: &litMatcher{
										pos:        position{line: 1844, col: 25, offset: 59455},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2263, col: 29, offset: 73262},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2275, col: 5, offset: 73576},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2275, col: 14, offset: 73585},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2263, col: 29, offset: 73262},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 2284, col: 1, offset: 74054},
			expr: &actionExpr{
				pos: position{line: 2285, col: 5, offset: 74070},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 2285, col: 5, offset: 74070},
					exprs: []any{
						&andCodeExpr{
							pos: position{line: 2285, col: 5, offset: 74070},
							run: (*parser).callonSection3,
						},
						&labeledExpr{
							pos:   position{line: 2288, col: 5, offset: 74133},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 2288, col: 12, offset: 74140},
								run: (*parser).callonSection5,
								expr: &oneOrMoreExpr{
									pos: position{line: 2288, col: 12, offset: 74140},
									expr: &litMatcher{
										pos:        position{line: 2288, col: 13, offset: 74141},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2292, col: 5, offset: 74249},
							run: (*parser).callonSection8,
						},
						&actionExpr{
							pos: position{line: 2901, col: 11, offset: 91793},
							run: (*parser).callonSection9,
							expr: &oneOrMoreExpr{
								pos: position{line: 2901, col: 11, offset: 91793},
								expr: &charClassMatcher{
									pos:        position{line: 2901, col: 11, offset: 91793},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2296, col: 12, offset: 74408},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 2296, col: 19, offset: 74415},
								name: "SectionTitle",
							},
						},
						&choiceExpr{
							pos: position{line: 2919, col: 8, offset: 92130},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 2906, col: 12, offset: 91903},
									run: (*parser).callonSection15,
									expr: &choiceExpr{
										pos: position{line: 2906, col: 13, offset: 91904},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2906, col: 13, offset: 91904},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 20, offset: 91911},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 29, offset: 91920},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2916, col: 8, offset: 92080},
									expr: &anyMatcher{
										line: 2916, col: 9, offset: 92081,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitle",
			pos:  position{line: 2300, col: 1, offset: 74511},
			expr: &actionExpr{
				pos: position{line: 2301, col: 5, offset: 74532},
				run: (*parser).callonSectionTitle1,
				expr: &seqExpr{
					pos: position{line: 2301, col: 5, offset: 74532},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 2301, col: 5, offset: 74532},
							run: (*parser).callonSectionTitle3,
						},
						&labeledExpr{
							pos:   position{line: 2306, col: 5, offset: 74647},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2306, col: 14, offset: 74656},
								expr: &ruleRefExpr{
									pos:  position{line: 2306, col: 15, offset: 74657},
									name: "SectionTitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElement",
			pos:  position{line: 2310, col: 1, offset: 74738},
			expr: &actionExpr{
				pos: position{line: 2311, col: 5, offset: 74765},
				run: (*parser).callonSectionTitleElement1,
				expr: &seqExpr{
					pos: position{line: 2311, col: 5, offset: 74765},
					exprs: []any{
						&notExpr{
							pos: position{line: 2311, col: 5, offset: 74765},
							expr: &choiceExpr{
								pos: position{line: 2919, col: 8, offset: 92130},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2906, col: 12, offset: 91903},
										run: (*parser).callonSectionTitleElement5,
										expr: &choiceExpr{
											pos: position{line: 2906, col: 13, offset: 91904},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 2906, col: 13, offset: 91904},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2906, col: 20, offset: 91911},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2906, col: 29, offset: 91920},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2916, col: 8, offset: 92080},
										expr: &anyMatcher{
											line: 2916, col: 9, offset: 92081,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2312, col: 5, offset: 74774},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2313, col: 9, offset: 74792},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2796, col: 5, offset: 88974},
										run: (*parser).callonSectionTitleElement14,
										expr: &seqExpr{
											pos: position{line: 2796, col: 5, offset: 88974},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2796, col: 5, offset: 88974},
													label: "text",
													expr: &actionExpr{
														pos: position{line: 2796, col: 11, offset: 88980},
														run: (*parser).callonSectionTitleElement17,
														expr: &oneOrMoreExpr{
															pos: position{line: 2796, col: 11, offset: 88980},
															expr: &charClassMatcher{
																pos:        position{line: 2796, col: 11, offset: 88980},
																val:        "[\\pL\\pN]",
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2799, col: 5, offset: 89038},
													expr: &seqExpr{
														pos: position{line: 2800, col: 9, offset: 89049},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2800, col: 9, offset: 89049},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
															&andCodeExpr{
																pos: position{line: 2801, col: 9, offset: 89098},
																run: (*parser).callonSectionTitleElement23,
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2805, col: 5, offset: 89178},
													expr: &seqExpr{
														pos: position{line: 2806, col: 9, offset: 89189},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2806, col: 9, offset: 89189},
																val:        "@",
																ignoreCase: false,
																want:       "\"@\"",
															},
															&charClassMatcher{
																pos:        position{line: 2806, col: 13, offset: 89193},
																val:        "[\\pL\\pN]",
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2901, col: 11, offset: 91793},
										run: (*parser).callonSectionTitleElement28,
										expr: &oneOrMoreExpr{
											pos: position{line: 2901, col: 11, offset: 91793},
											expr: &charClassMatcher{
												pos:        position{line: 2901, col: 11, offset: 91793},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2483, col: 5, offset: 79973},
										run: (*parser).callonSectionTitleElement31,
										expr: &seqExpr{
											pos: position{line: 2483, col: 5, offset: 79973},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 2483, col: 5, offset: 79973},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2483, col: 10, offset: 79978},
													expr: &charClassMatcher{
														pos:        position{line: 2483, col: 11, offset: 79979},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2489, col: 5, offset: 80171},
										run: (*parser).callonSectionTitleElement36,
										expr: &seqExpr{
											pos: position{line: 2489, col: 5, offset: 80171},
											exprs: []any{
												&andCodeExpr{
													pos: position{line: 2489, col: 5, offset: 80171},
													run: (*parser).callonSectionTitleElement38,
												},
												&andCodeExpr{
													pos: position{line: 2492, col: 5, offset: 80242},
													run: (*parser).callonSectionTitleElement39,
												},
												&litMatcher{
													pos:        position{line: 2496, col: 5, offset: 80367},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2496, col: 9, offset: 80371},
													expr: &charClassMatcher{
														pos:        position{line: 2496, col: 10, offset: 80372},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2316, col: 11, offset: 74857},
										name: "Replacement",
									},
									&actionExpr{
										pos: position{line: 2814, col: 5, offset: 89386},
										run: (*parser).callonSectionTitleElement44,
										expr: &choiceExpr{
											pos: position{line: 2815, col: 9, offset: 89396},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2815, col: 10, offset: 89397},
													val:        "[.,;?)!/:\"\\@=-]",
													chars:      []rune{'.', ',', ';', '?', ')', '!', '/', ':', '"', '\'', '@', '=', '-'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2817, col: 13, offset: 89494},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2817, col: 13, offset: 89494},
															run: (*parser).callonSectionTitleElement48,
														},
														&litMatcher{
															pos:        position{line: 2820, col: 13, offset: 89594},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2820, col: 19, offset: 89600},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&seqExpr{
													pos: position{line: 2823, col: 13, offset: 89638},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2823, col: 13, offset: 89638},
															run: (*parser).callonSectionTitleElement52,
														},
														&charClassMatcher{
															pos:        position{line: 2826, col: 14, offset: 89731},
															val:        "[*_`#]",
															chars:      []rune{'*', '_', '`', '#'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&seqExpr{
													pos: position{line: 2828, col: 12, offset: 89775},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 2828, col: 12, offset: 89775},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
														&notExpr{
															pos: position{line: 2828, col: 16, offset: 89779},
															expr: &litMatcher{
																pos:        position{line: 2828, col: 17, offset: 89780},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2318, col: 11, offset: 74930},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2319, col: 11, offset: 74946},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2320, col: 11, offset: 74974},
										name: "Link",
									},
									&actionExpr{
										pos: position{line: 2452, col: 5, offset: 78802},
										run: (*parser).callonSectionTitleElement61,
										expr: &seqExpr{
											pos: position{line: 2452, col: 5, offset: 78802},
											exprs: []any{
												&andCodeExpr{
													pos: position{line: 2452, col: 5, offset: 78802},
													run: (*parser).callonSectionTitleElement63,
												},
												&labeledExpr{
													pos:   position{line: 2455, col: 5, offset: 78878},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 2456, col: 9, offset: 78896},
														run: (*parser).callonSectionTitleElement65,
														expr: &charClassMatcher{
															pos:        position{line: 2456, col: 10, offset: 78897},
															val:        "[<>&]",
															chars:      []rune{'<', '>', '&'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2322, col: 11, offset: 75059},
										name: "InlineIcon",
									},
									&actionExpr{
										pos: position{line: 639, col: 5, offset: 20141},
										run: (*parser).callonSectionTitleElement68,
										expr: &seqExpr{
											pos: position{line: 639, col: 5, offset: 20141},
											exprs: []any{
												&andCodeExpr{
													pos: position{line: 639, col: 5, offset: 20141},
													run: (*parser).callonSectionTitleElement70,
												},
												&labeledExpr{
													pos:   position{line: 642, col: 5, offset: 20213},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 642, col: 14, offset: 20222},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 648, col: 5, offset: 20351},
																run: (*parser).callonSectionTitleElement73,
																expr: &seqExpr{
																	pos: position{line: 648, col: 5, offset: 20351},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 648, col: 5, offset: 20351},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 648, col: 13, offset: 20359},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				run: (*parser).callonSectionTitleElement77,
																				expr: &seqExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 321, col: 18, offset: 9768},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 321, col: 28, offset: 9778},
																							expr: &charClassMatcher{
																								pos:        position{line: 321, col: 29, offset: 9779},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 648, col: 32, offset: 20378},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 655, col: 5, offset: 20619},
																run: (*parser).callonSectionTitleElement83,
																expr: &seqExpr{
																	pos: position{line: 655, col: 5, offset: 20619},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 655, col: 5, offset: 20619},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 655, col: 9, offset: 20623},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				run: (*parser).callonSectionTitleElement87,
																				expr: &seqExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 321, col: 18, offset: 9768},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 321, col: 28, offset: 9778},
																							expr: &charClassMatcher{
																								pos:        position{line: 321, col: 29, offset: 9779},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 655, col: 28, offset: 20642},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 661, col: 25, offset: 20823},
																run: (*parser).callonSectionTitleElement93,
																expr: &seqExpr{
																	pos: position{line: 661, col: 25, offset: 20823},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 661, col: 25, offset: 20823},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 37, offset: 20835},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				run: (*parser).callonSectionTitleElement97,
																				expr: &seqExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 321, col: 18, offset: 9768},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 321, col: 28, offset: 9778},
																							expr: &charClassMatcher{
																								pos:        position{line: 321, col: 29, offset: 9779},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 661, col: 56, offset: 20854},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 661, col: 62, offset: 20860},
																				expr: &actionExpr{
																					pos: position{line: 669, col: 17, offset: 21155},
																					run: (*parser).callonSectionTitleElement104,
																					expr: &seqExpr{
																						pos: position{line: 669, col: 17, offset: 21155},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 669, col: 17, offset: 21155},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 669, col: 21, offset: 21159},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 669, col: 28, offset: 21166},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 669, col: 28, offset: 21166},
																											run: (*parser).callonSectionTitleElement109,
																											expr: &charClassMatcher{
																												pos:        position{line: 669, col: 28, offset: 21166},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 671, col: 9, offset: 21220},
																											run: (*parser).callonSectionTitleElement111,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 671, col: 9, offset: 21220},
																												expr: &charClassMatcher{
																													pos:        position{line: 671, col: 9, offset: 21220},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 661, col: 78, offset: 20876},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 665, col: 25, offset: 20994},
																run: (*parser).callonSectionTitleElement115,
																expr: &seqExpr{
																	pos: position{line: 665, col: 25, offset: 20994},
																	exprs: []any{
																		&litMatcher{
																			pos:        position{line: 665, col: 25, offset: 20994},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 665, col: 38, offset: 21007},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 321, col: 18, offset: 9768},
																				run: (*parser).callonSectionTitleElement119,
																				expr: &seqExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					exprs: []any{
																						&charClassMatcher{
																							pos:        position{line: 321, col: 18, offset: 9768},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 321, col: 28, offset: 9778},
																							expr: &charClassMatcher{
																								pos:        position{line: 321, col: 29, offset: 9779},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 665, col: 57, offset: 21026},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 665, col: 63, offset: 21032},
																				expr: &actionExpr{
																					pos: position{line: 669, col: 17, offset: 21155},
																					run: (*parser).callonSectionTitleElement126,
																					expr: &seqExpr{
																						pos: position{line: 669, col: 17, offset: 21155},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 669, col: 17, offset: 21155},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 669, col: 21, offset: 21159},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 669, col: 28, offset: 21166},
																									alternatives: []any{
																										&actionExpr{
																											pos: position{line: 669, col: 28, offset: 21166},
																											run: (*parser).callonSectionTitleElement131,
																											expr: &charClassMatcher{
																												pos:        position{line: 669, col: 28, offset: 21166},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 671, col: 9, offset: 21220},
																											run: (*parser).callonSectionTitleElement133,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 671, col: 9, offset: 21220},
																												expr: &charClassMatcher{
																													pos:        position{line: 671, col: 9, offset: 21220},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 665, col: 79, offset: 21048},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1201, col: 23, offset: 37004},
										run: (*parser).callonSectionTitleElement137,
										expr: &seqExpr{
											pos: position{line: 1201, col: 23, offset: 37004},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1199, col: 32, offset: 36972},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1201, col: 51, offset: 37032},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1201, col: 56, offset: 37037},
														run: (*parser).callonSectionTitleElement141,
														expr: &oneOrMoreExpr{
															pos: position{line: 1201, col: 56, offset: 37037},
															expr: &charClassMatcher{
																pos:        position{line: 1201, col: 56, offset: 37037},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1199, col: 32, offset: 36972},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2335, col: 5, offset: 75512},
										run: (*parser).callonSectionTitleElement145,
										expr: &seqExpr{
											pos: position{line: 2335, col: 5, offset: 75512},
											exprs: []any{
												&andCodeExpr{
													pos: position{line: 2335, col: 5, offset: 75512},
													run: (*parser).callonSectionTitleElement147,
												},
												&labeledExpr{
													pos:   position{line: 2338, col: 5, offset: 75567},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 407, col: 5, offset: 12369},
														run: (*parser).callonSectionTitleElement149,
														expr: &seqExpr{
															pos: position{line: 407, col: 5, offset: 12369},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 407, col: 5, offset: 12369},
																	val:        "[[",
																	ignoreCase: false,
																	want:       "\"[[\"",
																},
																&labeledExpr{
																	pos:   position{line: 408, col: 5, offset: 12379},
																	label: "id",
																	expr: &actionExpr{
																		pos: position{line: 409, col: 9, offset: 12392},
																		run: (*parser).callonSectionTitleElement153,
																		expr: &labeledExpr{
																			pos:   position{line: 409, col: 9, offset: 12392},
																			label: "elements",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 409, col: 18, offset: 12401},
																				expr: &choiceExpr{
																					pos: position{line: 410, col: 13, offset: 12415},
																					alternatives: []any{
																						&actionExpr{
																							pos: position{line: 410, col: 14, offset: 12416},
																							run: (*parser).callonSectionTitleElement157,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 410, col: 14, offset: 12416},
																								expr: &charClassMatcher{
																									pos:        position{line: 410, col: 14, offset: 12416},
																									val:        "[^=\\r\\n�{]]",
																									chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1201, col: 23, offset: 37004},
																							run: (*parser).callonSectionTitleElement160,
																							expr: &seqExpr{
																								pos: position{line: 1201, col: 23, offset: 37004},
																								exprs: []any{
																									&litMatcher{
																										pos:        position{line: 1199, col: 32, offset: 36972},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 1201, col: 51, offset: 37032},
																										label: "ref",
																										expr: &actionExpr{
																											pos: position{line: 1201, col: 56, offset: 37037},
																											run: (*parser).callonSectionTitleElement164,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1201, col: 56, offset: 37037},
																												expr: &charClassMatcher{
																													pos:        position{line: 1201, col: 56, offset: 37037},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1199, col: 32, offset: 36972},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 639, col: 5, offset: 20141},
																							run: (*parser).callonSectionTitleElement168,
																							expr: &seqExpr{
																								pos: position{line: 639, col: 5, offset: 20141},
																								exprs: []any{
																									&andCodeExpr{
																										pos: position{line: 639, col: 5, offset: 20141},
																										run: (*parser).callonSectionTitleElement170,
																									},
																									&labeledExpr{
																										pos:   position{line: 642, col: 5, offset: 20213},
																										label: "element",
																										expr: &choiceExpr{
																											pos: position{line: 642, col: 14, offset: 20222},
																											alternatives: []any{
																												&actionExpr{
																													pos: position{line: 648, col: 5, offset: 20351},
																													run: (*parser).callonSectionTitleElement173,
																													expr: &seqExpr{
																														pos: position{line: 648, col: 5, offset: 20351},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 648, col: 5, offset: 20351},
																																val:        "\\{",
																																ignoreCase: false,
																																want:       "\"\\\\{\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 648, col: 13, offset: 20359},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 321, col: 18, offset: 9768},
																																	run: (*parser).callonSectionTitleElement177,
																																	expr: &seqExpr{
																																		pos: position{line: 321, col: 18, offset: 9768},
																																		exprs: []any{
																																			&charClassMatcher{
																																				pos:        position{line: 321, col: 18, offset: 9768},
																																				val:        "[_\\pL\\pN]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 321, col: 28, offset: 9778},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 321, col: 29, offset: 9779},
																																					val:        "[-\\pL\\pN]",
																																					chars:      []rune{'-'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 648, col: 32, offset: 20378},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 655, col: 5, offset: 20619},
																													run: (*parser).callonSectionTitleElement183,
																													expr: &seqExpr{
																														pos: position{line: 655, col: 5, offset: 20619},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 655, col: 5, offset: 20619},
																																val:        "{",
																																ignoreCase: false,
																																want:       "\"{\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 655, col: 9, offset: 20623},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 321, col: 18, offset: 9768},
																																	run: (*parser).callonSectionTitleElement187,
																																	expr: &seqExpr{
																																		pos: position{line: 321, col: 18, offset: 9768},
																																		exprs: []any{
																																			&charClassMatcher{
																																				pos:        position{line: 321, col: 18, offset: 9768},
																																				val:        "[_\\pL\\pN]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 321, col: 28, offset: 9778},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 321, col: 29, offset: 9779},
																																					val:        "[-\\pL\\pN]",
																																					chars:      []rune{'-'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 655, col: 28, offset: 20642},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 661, col: 25, offset: 20823},
																													run: (*parser).callonSectionTitleElement193,
																													expr: &seqExpr{
																														pos: position{line: 661, col: 25, offset: 20823},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 661, col: 25, offset: 20823},
																																val:        "{counter:",
																																ignoreCase: false,
																																want:       "\"{counter:\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 661, col: 37, offset: 20835},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 321, col: 18, offset: 9768},
																																	run: (*parser).callonSectionTitleElement197,
																																	expr: &seqExpr{
																																		pos: position{line: 321, col: 18, offset: 9768},
																																		exprs: []any{
																																			&charClassMatcher{
																																				pos:        position{line: 321, col: 18, offset: 9768},
																																				val:        "[_\\pL\\pN]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 321, col: 28, offset: 9778},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 321, col: 29, offset: 9779},
																																					val:        "[-\\pL\\pN]",
																																					chars:      []rune{'-'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 661, col: 56, offset: 20854},
																																label: "start",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 661, col: 62, offset: 20860},
																																	expr: &actionExpr{
																																		pos: position{line: 669, col: 17, offset: 21155},
																																		run: (*parser).callonSectionTitleElement204,
																																		expr: &seqExpr{
																																			pos: position{line: 669, col: 17, offset: 21155},
																																			exprs: []any{
																																				&litMatcher{
																																					pos:        position{line: 669, col: 17, offset: 21155},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 669, col: 21, offset: 21159},
																																					label: "start",
																																					expr: &choiceExpr{
																																						pos: position{line: 669, col: 28, offset: 21166},
																																						alternatives: []any{
																																							&actionExpr{
																																								pos: position{line: 669, col: 28, offset: 21166},
																																								run: (*parser).callonSectionTitleElement209,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 669, col: 28, offset: 21166},
																																									val:        "[A-Za-z]",
																																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 671, col: 9, offset: 21220},
																																								run: (*parser).callonSectionTitleElement211,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 671, col: 9, offset: 21220},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 671, col: 9, offset: 21220},
																																										val:        "[0-9]",
																																										ranges:     []rune{'0', '9'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 661, col: 78, offset: 20876},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 665, col: 25, offset: 20994},
																													run: (*parser).callonSectionTitleElement215,
																													expr: &seqExpr{
																														pos: position{line: 665, col: 25, offset: 20994},
																														exprs: []any{
																															&litMatcher{
																																pos:        position{line: 665, col: 25, offset: 20994},
																																val:        "{counter2:",
																																ignoreCase: false,
																																want:       "\"{counter2:\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 665, col: 38, offset: 21007},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 321, col: 18, offset: 9768},
																																	run: (*parser).callonSectionTitleElement219,
																																	expr: &seqExpr{
																																		pos: position{line: 321, col: 18, offset: 9768},
																																		exprs: []any{
																																			&charClassMatcher{
																																				pos:        position{line: 321, col: 18, offset: 9768},
																																				val:        "[_\\pL\\pN]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 321, col: 28, offset: 9778},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 321, col: 29, offset: 9779},
																																					val:        "[-\\pL\\pN]",
																																					chars:      []rune{'-'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 665, col: 57, offset: 21026},
																																label: "start",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 665, col: 63, offset: 21032},
																																	expr: &actionExpr{
																																		pos: position{line: 669, col: 17, offset: 21155},
																																		run: (*parser).callonSectionTitleElement226,
																																		expr: &seqExpr{
																																			pos: position{line: 669, col: 17, offset: 21155},
																																			exprs: []any{
																																				&litMatcher{
																																					pos:        position{line: 669, col: 17, offset: 21155},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 669, col: 21, offset: 21159},
																																					label: "start",
																																					expr: &choiceExpr{
																																						pos: position{line: 669, col: 28, offset: 21166},
																																						alternatives: []any{
																																							&actionExpr{
																																								pos: position{line: 669, col: 28, offset: 21166},
																																								run: (*parser).callonSectionTitleElement231,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 669, col: 28, offset: 21166},
																																									val:        "[A-Za-z]",
																																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 671, col: 9, offset: 21220},
																																								run: (*parser).callonSectionTitleElement233,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 671, col: 9, offset: 21220},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 671, col: 9, offset: 21220},
																																										val:        "[0-9]",
																																										ranges:     []rune{'0', '9'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 665, col: 79, offset: 21048},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 415, col: 16, offset: 12649},
																							run: (*parser).callonSectionTitleElement237,
																							expr: &litMatcher{
																								pos:        position{line: 415, col: 16, offset: 12649},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 421, col: 5, offset: 12835},
																	val:        "]]",
																	ignoreCase: false,
																	want:       "\"]]\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2338, col: 26, offset: 75588},
													expr: &actionExpr{
														pos: position{line: 2897, col: 10, offset: 91732},
														run: (*parser).callonSectionTitleElement241,
														expr: &charClassMatcher{
															pos:        position{line: 2897, col: 10, offset: 91732},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&andExpr{
													pos: position{line: 2338, col: 33, offset: 75595},
													expr: &choiceExpr{
														pos: position{line: 2919, col: 8, offset: 92130},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2906, col: 12, offset: 91903},
																run: (*parser).callonSectionTitleElement245,
																expr: &choiceExpr{
																	pos: position{line: 2906, col: 13, offset: 91904},
																	alternatives: []any{
																		&litMatcher{
																			pos:        position{line: 2906, col: 13, offset: 91904},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 20, offset: 91911},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2906, col: 29, offset: 91920},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2916, col: 8, offset: 92080},
																expr: &anyMatcher{
																	line: 2916, col: 9, offset: 92081,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1256, col: 5, offset: 38764},
										run: (*parser).callonSectionTitleElement252,
										expr: &seqExpr{
											pos: position{line: 1256, col: 5, offset: 38764},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1256, col: 5, offset: 38764},
													val:        "\\[[",
													ignoreCase: false,
													want:       "\"\\\\[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1256, col: 14, offset: 38773},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2882, col: 7, offset: 91384},
														run: (*parser).callonSectionTitleElement256,
														expr: &oneOrMoreExpr{
															pos: position{line: 2882, col: 7, offset: 91384},
															expr: &charClassMatcher{
																pos:        position{line: 2882, col: 7, offset: 91384},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1256, col: 22, offset: 38781},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1261, col: 5, offset: 38900},
										run: (*parser).callonSectionTitleElement260,
										expr: &seqExpr{
											pos: position{line: 1261, col: 5, offset: 38900},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1261, col: 5, offset: 38900},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1261, col: 10, offset: 38905},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2882, col: 7, offset: 91384},
														run: (*parser).callonSectionTitleElement264,
														expr: &oneOrMoreExpr{
															pos: position{line: 2882, col: 7, offset: 91384},
															expr: &charClassMatcher{
																pos:        position{line: 2882, col: 7, offset: 91384},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1261, col: 18, offset: 38913},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2327, col: 11, offset: 75313},
										name: "InlineFootnote",
									},
									&actionExpr{
										pos: position{line: 2836, col: 12, offset: 90040},
										run: (*parser).callonSectionTitleElement269,
										expr: &charClassMatcher{
											pos:        position{line: 2836, col: 12, offset: 90040},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 2348, col: 1, offset: 75857},
			expr: &actionExpr{
				pos: position{line: 2349, col: 5, offset: 75944},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 2349, col: 5, offset: 75944},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2349, col: 5, offset: 75944},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2349, col: 14, offset: 75953},
								expr: &actionExpr{
									pos: position{line: 2351, col: 9, offset: 75979},
									run: (*parser).callonNormalGroup5,
									expr: &seqExpr{
										pos: position{line: 2351, col: 9, offset: 75979},
										exprs: []any{
											&andExpr{
												pos: position{line: 2914, col: 11, offset: 92066},
												expr: &anyMatcher{
													line: 2914, col: 13, offset: 92068,
												},
											},
											&labeledExpr{
												pos:   position{line: 2352, col: 9, offset: 75994},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2353, col: 13, offset: 76016},
													alternatives: []any{
														&actionExpr{
															pos: position{line: 2796, col: 5, offset: 88974},
															run: (*parser).callonNormalGroup11,
															expr: &seqExpr{
																pos: position{line: 2796, col: 5, offset: 88974},
																exprs: []any{
																	&labeledExpr{
																		pos:   position{line: 2796, col: 5, offset: 88974},
																		label: "text",
																		expr: &actionExpr{
																			pos: position{line: 2796, col: 11, offset: 88980},
																			run: (*parser).callonNormalGroup14,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2796, col: 11, offset: 88980},
																				expr: &charClassMatcher{
																					pos:        position{line: 2796, col: 11, offset: 88980},
																					val:        "[\\pL\\pN]",
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2799, col: 5, offset: 89038},
																		expr: &seqExpr{
																			pos: position{line: 2800, col: 9, offset: 89049},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2800, col: 9, offset: 89049},
																					val:        ":",
																					ignoreCase: false,
																					want:       "\":\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 2801, col: 9, offset: 89098},
																					run: (*parser).callonNormalGroup20,
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2805, col: 5, offset: 89178},
																		expr: &seqExpr{
																			pos: position{line: 2806, col: 9, offset: 89189},
																			exprs: []any{
																				&litMatcher{
																					pos:        position{line: 2806, col: 9, offset: 89189},
																					val:        "@",
																					ignoreCase: false,
																					want:       "\"@\"",
																				},
																				&charClassMatcher{
																					pos:        position{line: 2806, col: 13, offset: 89193},
																					val:        "[\\pL\\pN]",
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2901, col: 11, offset: 91793},
															run: (*parser).callonNormalGroup25,
															expr: &oneOrMoreExpr{
																pos: position{line: 2901, col: 11, offset: 91793},
																expr: &charClassMatcher{
																	pos:        position{line: 2901, col: 11, offset: 91793},
																	val:        "[\\t ]",
																	chars:      []rune{'\t', ' '},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 2355, col: 15, offset: 76062},
															name: "Replacement",
														},
														&actionExpr{
															pos: position{line: 2483, col: 5, offset: 79973},
															run: (*parser).callonNormalGroup29,
															expr: &seqExpr{
																pos: position{line: 2483, col: 5, offset: 79973},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 2483, col: 5, offset: 79973},
																		val:        "\\'",
																		ignoreCase: false,
																		want:       "\"\\\\'\"",
																	},
																	&andExpr{
																		pos: position{line: 2483, col: 10, offset: 79978},
																		expr: &charClassMatcher{
																			pos:        position{line: 2483, col: 11, offset: 79979},
																			val:        "[\\pL]",
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2489, col: 5, offset: 80171},
															run: (*parser).callonNormalGroup34,
															expr: &seqExpr{
																pos: position{line: 2489, col: 5, offset: 80171},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2489, col: 5, offset: 80171},
																		run: (*parser).callonNormalGroup36,
																	},
																	&andCodeExpr{
																		pos: position{line: 2492, col: 5, offset: 80242},
																		run: (*parser).callonNormalGroup37,
																	},
																	&litMatcher{
																		pos:        position{line: 2496, col: 5, offset: 80367},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&andExpr{
																		pos: position{line: 2496, col: 9, offset: 80371},
																		expr: &charClassMatcher{
																			pos:        position{line: 2496, col: 10, offset: 80372},
																			val:        "[\\pL]",
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2814, col: 5, offset: 89386},
															run: (*parser).callonNormalGroup41,
															expr: &choiceExpr{
																pos: position{line: 2815, col: 9, offset: 89396},
																alternatives: []any{
																	&charClassMatcher{
																		pos:        position{line: 2815, col: 10, offset: 89397},
																		val:        "[.,;?)!/:\"\\@=-]",
																		chars:      []rune{'.', ',', ';', '?', ')', '!', '/', ':', '"', '\'', '@', '=', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2817, col: 13, offset: 89494},
																		exprs: []any{
																			&andCodeExpr{
																				pos: position{line: 2817, col: 13, offset: 89494},
																				run: (*parser).callonNormalGroup45,
																			},
																			&litMatcher{
																				pos:        position{line: 2820, col: 13, offset: 89594},
																				val:        "[",
																				ignoreCase: false,
																				want:       "\"[\"",
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 2820, col: 19, offset: 89600},
																		val:        "]",
																		ignoreCase: false,
																		want:       "\"]\"",
																	},
																	&seqExpr{
																		pos: position{line: 2823, col: 13, offset: 89638},
																		exprs: []any{
																			&andCodeExpr{
																				pos: position{line: 2823, col: 13, offset: 89638},
																				run: (*parser).callonNormalGroup49,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2826, col: 14, offset: 89731},
																				val:        "[*_`#]",
																				chars:      []rune{'*', '_', '`', '#'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2828, col: 12, offset: 89775},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 2828, col: 12, offset: 89775},
																				val:        "(",
																				ignoreCase: false,
																				want:       "\"(\"",
																			},
																			&notExpr{
																				pos: position{line: 2828, col: 16, offset: 89779},
																				expr: &litMatcher{
																					pos:        position{line: 2828, col: 17, offset: 89780},
																					val:        "(",
																					ignoreCase: false,
																					want:       "\"(\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2906, col: 12, offset: 91903},
															run: (*parser).callonNormalGroup55,
															expr: &choiceExpr{
																pos: position{line: 2906, col: 13, offset: 91904},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 2906, col: 13, offset: 91904},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 20, offset: 91911},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2906, col: 29, offset: 91920},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 639, col: 5, offset: 20141},
															run: (*parser).callonNormalGroup60,
															expr: &seqExpr{
																pos: position{line: 639, col: 5, offset: 20141},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 639, col: 5, offset: 20141},
																		run: (*parser).callonNormalGroup62,
																	},
																	&labeledExpr{
																		pos:   position{line: 642, col: 5, offset: 20213},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 642, col: 14, offset: 20222},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 648, col: 5, offset: 20351},
																					run: (*parser).callonNormalGroup65,
																					expr: &seqExpr{
																						pos: position{line: 648, col: 5, offset: 20351},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 648, col: 5, offset: 20351},
																								val:        "\\{",
																								ignoreCase: false,
																								want:       "\"\\\\{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 648, col: 13, offset: 20359},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									run: (*parser).callonNormalGroup69,
																									expr: &seqExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										exprs: []any{
																											&charClassMatcher{
																												pos:        position{line: 321, col: 18, offset: 9768},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 321, col: 28, offset: 9778},
																												expr: &charClassMatcher{
																													pos:        position{line: 321, col: 29, offset: 9779},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 648, col: 32, offset: 20378},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 655, col: 5, offset: 20619},
																					run: (*parser).callonNormalGroup75,
																					expr: &seqExpr{
																						pos: position{line: 655, col: 5, offset: 20619},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 655, col: 5, offset: 20619},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 655, col: 9, offset: 20623},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									run: (*parser).callonNormalGroup79,
																									expr: &seqExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										exprs: []any{
																											&charClassMatcher{
																												pos:        position{line: 321, col: 18, offset: 9768},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 321, col: 28, offset: 9778},
																												expr: &charClassMatcher{
																													pos:        position{line: 321, col: 29, offset: 9779},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 655, col: 28, offset: 20642},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 661, col: 25, offset: 20823},
																					run: (*parser).callonNormalGroup85,
																					expr: &seqExpr{
																						pos: position{line: 661, col: 25, offset: 20823},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 661, col: 25, offset: 20823},
																								val:        "{counter:",
																								ignoreCase: false,
																								want:       "\"{counter:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 661, col: 37, offset: 20835},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									run: (*parser).callonNormalGroup89,
																									expr: &seqExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										exprs: []any{
																											&charClassMatcher{
																												pos:        position{line: 321, col: 18, offset: 9768},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 321, col: 28, offset: 9778},
																												expr: &charClassMatcher{
																													pos:        position{line: 321, col: 29, offset: 9779},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 661, col: 56, offset: 20854},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 661, col: 62, offset: 20860},
																									expr: &actionExpr{
																										pos: position{line: 669, col: 17, offset: 21155},
																										run: (*parser).callonNormalGroup96,
																										expr: &seqExpr{
																											pos: position{line: 669, col: 17, offset: 21155},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 669, col: 17, offset: 21155},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 669, col: 21, offset: 21159},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 669, col: 28, offset: 21166},
																														alternatives: []any{
																															&actionExpr{
																																pos: position{line: 669, col: 28, offset: 21166},
																																run: (*parser).callonNormalGroup101,
																																expr: &charClassMatcher{
																																	pos:        position{line: 669, col: 28, offset: 21166},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 671, col: 9, offset: 21220},
																																run: (*parser).callonNormalGroup103,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 671, col: 9, offset: 21220},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 671, col: 9, offset: 21220},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 661, col: 78, offset: 20876},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 665, col: 25, offset: 20994},
																					run: (*parser).callonNormalGroup107,
																					expr: &seqExpr{
																						pos: position{line: 665, col: 25, offset: 20994},
																						exprs: []any{
																							&litMatcher{
																								pos:        position{line: 665, col: 25, offset: 20994},
																								val:        "{counter2:",
																								ignoreCase: false,
																								want:       "\"{counter2:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 38, offset: 21007},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 321, col: 18, offset: 9768},
																									run: (*parser).callonNormalGroup111,
																									expr: &seqExpr{
																										pos: position{line: 321, col: 18, offset: 9768},
																										exprs: []any{
																											&charClassMatcher{
																												pos:        position{line: 321, col: 18, offset: 9768},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 321, col: 28, offset: 9778},
																												expr: &charClassMatcher{
																													pos:        position{line: 321, col: 29, offset: 9779},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 665, col: 57, offset: 21026},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 665, col: 63, offset: 21032},
																									expr: &actionExpr{
																										pos: position{line: 669, col: 17, offset: 21155},
																										run: (*parser).callonNormalGroup118,
																										expr: &seqExpr{
																											pos: position{line: 669, col: 17, offset: 21155},
																											exprs: []any{
																												&litMatcher{
																													pos:        position{line: 669, col: 17, offset: 21155},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 669, col: 21, offset: 21159},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 669, col: 28, offset: 21166},
																														alternatives: []any{
																															&actionExpr{
																																pos: position{line: 669, col: 28, offset: 21166},
																																run: (*parser).callonNormalGroup123,
																																expr: &charClassMatcher{
																																	pos:        position{line: 669, col: 28, offset: 21166},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 671, col: 9, offset: 21220},
																																run: (*parser).callonNormalGroup125,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 671, col: 9, offset: 21220},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 671, col: 9, offset: 21220},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 665, col: 79, offset: 21048},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 2360, col: 15, offset: 76229},
															name: "Quote",
														},
														&ruleRefExpr{
															pos:  position{line: 2361, col: 15, offset: 76249},
															name: "InlineMacro",
														},
														&ruleRefExpr{
															pos:  position{line: 2362, col: 15, offset: 76338},
															name: "Callout",
														},
														&actionExpr{
															pos: position{line: 2452, col: 5, offset: 78802},
															run: (*parser).callonNormalGroup132,
															expr: &seqExpr{
																pos: position{line: 2452, col: 5, offset: 78802},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 2452, col: 5, offset: 78802},
																		run: (*parser).callonNormalGroup134,
																	},
																	&labeledExpr{
																		pos:   position{line: 2455, col: 5, offset: 78878},
																		label: "element",
																		expr: &actionExpr{
																			pos: position{line: 2456, col: 9, offset: 78896},
																			run: (*parser).callonNormalGroup136,
																			expr: &charClassMatcher{
																				pos:        position{line: 2456, col: 10, offset: 78897},
																				val:        "[<>&]",
																				chars:      []rune{'<', '>', '&'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1209, col: 5, offset: 37450},
															run: (*parser).callonNormalGroup138,
															expr: &seqExpr{
																pos: position{line: 1209, col: 5, offset: 37450},
																exprs: []any{
																	&andCodeExpr{
																		pos: position{line: 1209, col: 5, offset: 37450},
																		run: (*parser).callonNormalGroup140,
																	},
																	&litMatcher{
																		pos:        position{line: 1212, col: 5, offset: 37526},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&andCodeExpr{
																		pos: position{line: 1213, col: 5, offset: 37534},
																		run: (*parser).callonNormalGroup142,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1217, col: 5, offset: 37621},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonNormalGroup144,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 1217, col: 12, offset: 37628},
																		expr: &choiceExpr{
																			pos: position{line: 2919, col: 8, offset: 92130},
																			alternatives: []any{
																				&actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonNormalGroup148,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2916, col: 8, offset: 92080},
																					expr: &anyMatcher{
																						line: 2916, col: 9, offset: 92081,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 2365, col: 15, offset: 76520},
															name: "InlinePassthrough",
														},
														&actionExpr{
															pos: position{line: 1201, col: 23, offset: 37004},
															run: (*parser).callonNormalGroup156,
															expr: &seqExpr{
																pos: position{line: 1201, col: 23, offset: 37004},
																exprs: []any{
																	&litMatcher{
																		pos:        position{line: 1199, col: 32, offset: 36972},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1201, col: 51, offset: 37032},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1201, col: 56, offset: 37037},
																			run: (*parser).callonNormalGroup160,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1201, col: 56, offset: 37037},
																				expr: &charClassMatcher{
																					pos:        position{line: 1201, col: 56, offset: 37037},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1199, col: 32, offset: 36972},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2836, col: 12, offset: 90040},
															run: (*parser).callonNormalGroup164,
															expr: &charClassMatcher{
																pos:        position{line: 2836, col: 12, offset: 90040},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2916, col: 8, offset: 92080},
							expr: &anyMatcher{
								line: 2916, col: 9, offset: 92081,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeStructuredValue",
			pos:  position{line: 2376, col: 1, offset: 76958},
			expr: &actionExpr{
				pos: position{line: 2377, col: 5, offset: 76991},
				run: (*parser).callonAttributeStructuredValue1,
				expr: &seqExpr{
					pos: position{line: 2377, col: 5, offset: 76991},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2377, col: 5, offset: 76991},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2377, col: 14, offset: 77000},
								expr: &ruleRefExpr{
									pos:  position{line: 2377, col: 15, offset: 77001},
									name: "AttributeStructuredValueElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 2916, col: 8, offset: 92080},
							expr: &anyMatcher{
								line: 2916, col: 9, offset: 92081,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeStructuredValueElement",
			pos:  position{line: 2381, col: 1, offset: 77098},
			expr: &actionExpr{
				pos: position{line: 2382, col: 5, offset: 77138},
				run: (*parser).callonAttributeStructuredValueElement1,
				expr: &seqExpr{
					pos: position{line: 2382, col: 5, offset: 77138},
					exprs: []any{
						&andExpr{
							pos: position{line: 2914, col: 11, offset: 92066},
							expr: &anyMatcher{
								line: 2914, col: 13, offset: 92068,
							},
						},
						&labeledExpr{
							pos:   position{line: 2383, col: 5, offset: 77149},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2384, col: 9, offset: 77167},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 2796, col: 5, offset: 88974},
										run: (*parser).callonAttributeStructuredValueElement7,
										expr: &seqExpr{
											pos: position{line: 2796, col: 5, offset: 88974},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 2796, col: 5, offset: 88974},
													label: "text",
													expr: &actionExpr{
														pos: position{line: 2796, col: 11, offset: 88980},
														run: (*parser).callonAttributeStructuredValueElement10,
														expr: &oneOrMoreExpr{
															pos: position{line: 2796, col: 11, offset: 88980},
															expr: &charClassMatcher{
																pos:        position{line: 2796, col: 11, offset: 88980},
																val:        "[\\pL\\pN]",
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2799, col: 5, offset: 89038},
													expr: &seqExpr{
														pos: position{line: 2800, col: 9, offset: 89049},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2800, col: 9, offset: 89049},
																val:        ":",
																ignoreCase: false,
																want:       "\":\"",
															},
															&andCodeExpr{
																pos: position{line: 2801, col: 9, offset: 89098},
																run: (*parser).callonAttributeStructuredValueElement16,
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2805, col: 5, offset: 89178},
													expr: &seqExpr{
														pos: position{line: 2806, col: 9, offset: 89189},
														exprs: []any{
															&litMatcher{
																pos:        position{line: 2806, col: 9, offset: 89189},
																val:        "@",
																ignoreCase: false,
																want:       "\"@\"",
															},
															&charClassMatcher{
																pos:        position{line: 2806, col: 13, offset: 89193},
																val:        "[\\pL\\pN]",
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2897, col: 10, offset: 91732},
										run: (*parser).callonAttributeStructuredValueElement21,
										expr: &charClassMatcher{
											pos:        position{line: 2897, col: 10, offset: 91732},
											val:        "[\\t ]",
											chars:      []rune{'\t', ' '},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2386, col: 11, offset: 77205},
										name: "Replacement",
									},
									&actionExpr{
										pos: position{line: 2814, col: 5, offset: 89386},
										run: (*parser).callonAttributeStructuredValueElement24,
										expr: &choiceExpr{
											pos: position{line: 2815, col: 9, offset: 89396},
											alternatives: []any{
												&charClassMatcher{
													pos:        position{line: 2815, col: 10, offset: 89397},
													val:        "[.,;?)!/:\"\\@=-]",
													chars:      []rune{'.', ',', ';', '?', ')', '!', '/', ':', '"', '\'', '@', '=', '-'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2817, col: 13, offset: 89494},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2817, col: 13, offset: 89494},
															run: (*parser).callonAttributeStructuredValueElement28,
														},
														&litMatcher{
															pos:        position{line: 2820, col: 13, offset: 89594},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
													},
												},
												&litMatcher{
													pos:        position{line: 2820, col: 19, offset: 89600},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&seqExpr{
													pos: position{line: 2823, col: 13, offset: 89638},
													exprs: []any{
														&andCodeExpr{
															pos: position{line: 2823, col: 13, offset: 89638},
															run: (*parser).callonAttributeStructuredValueElement32,
														},
														&charClassMatcher{
															pos:        position{line: 2826, col: 14, offset: 89731},
															val:        "[*_`#]",
															chars:      []rune{'*', '_', '`', '#'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&seqExpr{
													pos: position{line: 2828, col: 12, offset: 89775},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 2828, col: 12, offset: 89775},
															val:        "(",
															ignoreCase: false,
															want:       "\"(\"",
														},
														&notExpr{
															pos: position{line: 2828, col: 16, offset: 89779},
															expr: &litMatcher{
																pos:        position{line: 2828, col: 17, offset: 89780},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2388, col: 11, offset: 77278},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2389, col: 11, offset: 77294},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2452, col: 5, offset: 78802},
										run: (*parser).callonAttributeStructuredValueElement40,
										expr: &seqExpr{
											pos: position{line: 2452, col: 5, offset: 78802},
											exprs: []any{
												&andCodeExpr{
													pos: position{line: 2452, col: 5, offset: 78802},
													run: (*parser).callonAttributeStructuredValueElement42,
												},
												&labeledExpr{
													pos:   position{line: 2455, col: 5, offset: 78878},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 2456, col: 9, offset: 78896},
														run: (*parser).callonAttributeStructuredValueElement44,
														expr: &charClassMatcher{
															pos:        position{line: 2456, col: 10, offset: 78897},
															val:        "[<>&]",
															chars:      []rune{'<', '>', '&'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1201, col: 23, offset: 37004},
										run: (*parser).callonAttributeStructuredValueElement46,
										expr: &seqExpr{
											pos: position{line: 1201, col: 23, offset: 37004},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1199, col: 32, offset: 36972},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1201, col: 51, offset: 37032},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1201, col: 56, offset: 37037},
														run: (*parser).callonAttributeStructuredValueElement50,
														expr: &oneOrMoreExpr{
															pos: position{line: 1201, col: 56, offset: 37037},
															expr: &charClassMatcher{
																pos:        position{line: 1201, col: 56, offset: 37037},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1199, col: 32, offset: 36972},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2906, col: 12, offset: 91903},
										run: (*parser).callonAttributeStructuredValueElement54,
										expr: &choiceExpr{
											pos: position{line: 2906, col: 13, offset: 91904},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 2906, col: 13, offset: 91904},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2906, col: 20, offset: 91911},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2906, col: 29, offset: 91920},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2836, col: 12, offset: 90040},
										run: (*parser).callonAttributeStructuredValueElement59,
										expr: &charClassMatcher{
											pos:        position{line: 2836, col: 12, offset: 90040},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 2400, col: 1, offset: 77564},
			expr: &actionExpr{
				pos: position{line: 2402, col: 5, offset: 77646},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 2402, col: 5, offset: 77646},
					exprs: []any{
						&andCodeExpr{
							pos: position{line: 2402, col: 5, offset: 77646},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 2405, col: 5, offset: 77711},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2406, col: 9, offset: 77729},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2406, col: 9, offset: 77729},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 2407, col: 11, offset: 77750},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 2408, col: 11, offset: 77773},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2409, col: 11, offset: 77789},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2410, col: 11, offset: 77818},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 2411, col: 11, offset: 77844},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 2412, col: 11, offset: 77870},
										name: "InlineUserMacro",
									},
									&actionExpr{
										pos: position{line: 1256, col: 5, offset: 38764},
										run: (*parser).callonInlineMacro13,
										expr: &seqExpr{
											pos: position{line: 1256, col: 5, offset: 38764},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1256, col: 5, offset: 38764},
													val:        "\\[[",
													ignoreCase: false,
													want:       "\"\\\\[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1256, col: 14, offset: 38773},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2882, col: 7, offset: 91384},
														run: (*parser).callonInlineMacro17,
														expr: &oneOrMoreExpr{
															pos: position{line: 2882, col: 7, offset: 91384},
															expr: &charClassMatcher{
																pos:        position{line: 2882, col: 7, offset: 91384},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1256, col: 22, offset: 38781},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1261, col: 5, offset: 38900},
										run: (*parser).callonInlineMacro21,
										expr: &seqExpr{
											pos: position{line: 1261, col: 5, offset: 38900},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1261, col: 5, offset: 38900},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1261, col: 10, offset: 38905},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2882, col: 7, offset: 91384},
														run: (*parser).callonInlineMacro25,
														expr: &oneOrMoreExpr{
															pos: position{line: 2882, col: 7, offset: 91384},
															expr: &charClassMatcher{
																pos:        position{line: 2882, col: 7, offset: 91384},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1261, col: 18, offset: 38913},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1300, col: 23, offset: 40389},
										run: (*parser).callonInlineMacro29,
										expr: &seqExpr{
											pos: position{line: 1300, col: 23, offset: 40389},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1300, col: 23, offset: 40389},
													val:        "(((",
													ignoreCase: false,
													want:       "\"(((\"",
												},
												&labeledExpr{
													pos:   position{line: 1300, col: 29, offset: 40395},
													label: "term1",
													expr: &actionExpr{
														pos: position{line: 1307, col: 30, offset: 40726},
														run: (*parser).callonInlineMacro33,
														expr: &oneOrMoreExpr{
															pos: position{line: 1307, col: 30, offset: 40726},
															expr: &choiceExpr{
																pos: position{line: 1307, col: 31, offset: 40727},
																alternatives: []any{
																	&charClassMatcher{
																		pos:        position{line: 2787, col: 13, offset: 88827},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 2897, col: 10, offset: 91732},
																		run: (*parser).callonInlineMacro37,
																		expr: &charClassMatcher{
																			pos:        position{line: 2897, col: 10, offset: 91732},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1301, col: 5, offset: 40434},
													label: "term2",
													expr: &zeroOrOneExpr{
														pos: position{line: 1301, col: 11, offset: 40440},
														expr: &actionExpr{
															pos: position{line: 1301, col: 12, offset: 40441},
															run: (*parser).callonInlineMacro41,
															expr: &seqExpr{
																pos: position{line: 1301, col: 12, offset: 40441},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 1301, col: 12, offset: 40441},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonInlineMacro44,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1301, col: 19, offset: 40448},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1301, col: 23, offset: 40452},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonInlineMacro48,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1301, col: 30, offset: 40459},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1307, col: 30, offset: 40726},
																			run: (*parser).callonInlineMacro51,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1307, col: 30, offset: 40726},
																				expr: &choiceExpr{
																					pos: position{line: 1307, col: 31, offset: 40727},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2787, col: 13, offset: 88827},
																							val:        "[\\pL\\pN]",
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonInlineMacro55,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1302, col: 5, offset: 40526},
													label: "term3",
													expr: &zeroOrOneExpr{
														pos: position{line: 1302, col: 11, offset: 40532},
														expr: &actionExpr{
															pos: position{line: 1302, col: 12, offset: 40533},
															run: (*parser).callonInlineMacro59,
															expr: &seqExpr{
																pos: position{line: 1302, col: 12, offset: 40533},
																exprs: []any{
																	&zeroOrMoreExpr{
																		pos: position{line: 1302, col: 12, offset: 40533},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonInlineMacro62,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1302, col: 19, offset: 40540},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1302, col: 23, offset: 40544},
																		expr: &actionExpr{
																			pos: position{line: 2897, col: 10, offset: 91732},
																			run: (*parser).callonInlineMacro66,
																			expr: &charClassMatcher{
																				pos:        position{line: 2897, col: 10, offset: 91732},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1302, col: 30, offset: 40551},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1307, col: 30, offset: 40726},
																			run: (*parser).callonInlineMacro69,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1307, col: 30, offset: 40726},
																				expr: &choiceExpr{
																					pos: position{line: 1307, col: 31, offset: 40727},
																					alternatives: []any{
																						&charClassMatcher{
																							pos:        position{line: 2787, col: 13, offset: 88827},
																							val:        "[\\pL\\pN]",
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2897, col: 10, offset: 91732},
																							run: (*parser).callonInlineMacro73,
																							expr: &charClassMatcher{
																								pos:        position{line: 2897, col: 10, offset: 91732},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1303, col: 5, offset: 40618},
													val:        ")))",
													ignoreCase: false,
													want:       "\")))\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2415, col: 11, offset: 77949},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 2416, col: 11, offset: 77969},
										name: "InlineButton",
									},
									&ruleRefExpr{
										pos:  position{line: 2417, col: 11, offset: 77992},
										name: "InlineMenu",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 2421, col: 1, offset: 78049},
			expr: &actionExpr{
				pos: position{line: 2423, col: 5, offset: 78137},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 2423, col: 5, offset: 78137},
					exprs: []any{
						&andCodeExpr{
							pos: position{line: 2423, col: 5, offset: 78137},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 2426, col: 5, offset: 78214},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2427, col: 9, offset: 78232},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 1382, col: 26, offset: 43996},
										run: (*parser).callonInlinePassthrough6,
										expr: &seqExpr{
											pos: position{line: 1382, col: 26, offset: 43996},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1380, col: 32, offset: 43964},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&labeledExpr{
													pos:   position{line: 1382, col: 54, offset: 44024},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1386, col: 33, offset: 44237},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 1386, col: 34, offset: 44238},
																run: (*parser).callonInlinePassthrough11,
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1386, col: 34, offset: 44238},
																	expr: &seqExpr{
																		pos: position{line: 1386, col: 35, offset: 44239},
																		exprs: []any{
																			&notExpr{
																				pos: position{line: 1386, col: 35, offset: 44239},
																				expr: &litMatcher{
																					pos:        position{line: 1380, col: 32, offset: 43964},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1386, col: 64, offset: 44268,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1388, col: 11, offset: 44441},
																run: (*parser).callonInlinePassthrough17,
																expr: &zeroOrOneExpr{
																	pos: position{line: 1388, col: 11, offset: 44441},
																	expr: &seqExpr{
																		pos: position{line: 1388, col: 12, offset: 44442},
																		exprs: []any{
																			&notExpr{
																				pos: position{line: 1388, col: 12, offset: 44442},
																				expr: &actionExpr{
																					pos: position{line: 2897, col: 10, offset: 91732},
																					run: (*parser).callonInlinePassthrough21,
																					expr: &charClassMatcher{
																						pos:        position{line: 2897, col: 10, offset: 91732},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1388, col: 19, offset: 44449},
																				expr: &actionExpr{
																					pos: position{line: 2906, col: 12, offset: 91903},
																					run: (*parser).callonInlinePassthrough24,
																					expr: &choiceExpr{
																						pos: position{line: 2906, col: 13, offset: 91904},
																						alternatives: []any{
																							&litMatcher{
																								pos:        position{line: 2906, col: 13, offset: 91904},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 20, offset: 91911},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2906, col: 29, offset: 91920},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1388, col: 28, offset: 44458},
																				expr: &litMatcher{
																					pos:        position{line: 1380, col: 32, offset: 43964},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1388, col: 57, offset: 44487,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1380, col: 32, offset: 43964},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&notExpr{
													pos: position{line: 1382, col: 121, offset: 44091},
													expr: &charClassMatcher{
														pos:        position{line: 2787, col: 13, offset: 88827},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1370, col: 26, offset: 43279},
										run: (*parser).callonInlinePassthrough35,
										expr: &seqExpr{
											pos: position{line: 1370, col: 26, offset: 43279},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1368, col: 32, offset: 43249},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&labeledExpr{
													pos:   position{line: 1370, col: 54, offset: 43307},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1374, col: 33, offset: 43520},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 1374, col: 34, offset: 43521},
																run: (*parser).callonInlinePassthrough40,
																expr: &seqExpr{
																	pos: position{line: 1374, col: 34, offset: 43521},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 1374, col: 35, offset: 43522},
																			expr: &litMatcher{
																				pos:        position{line: 1368, col: 32, offset: 43249},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&notExpr{
																			pos: position{line: 1374, col: 64, offset: 43551},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonInlinePassthrough45,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1374, col: 71, offset: 43558},
																			expr: &actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonInlinePassthrough48,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 1374, col: 80, offset: 43567,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1374, col: 83, offset: 43570},
																			expr: &seqExpr{
																				pos: position{line: 1374, col: 84, offset: 43571},
																				exprs: []any{
																					&notExpr{
																						pos: position{line: 1374, col: 84, offset: 43571},
																						expr: &seqExpr{
																							pos: position{line: 1374, col: 86, offset: 43573},
																							exprs: []any{
																								&actionExpr{
																									pos: position{line: 2901, col: 11, offset: 91793},
																									run: (*parser).callonInlinePassthrough58,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2901, col: 11, offset: 91793},
																										expr: &charClassMatcher{
																											pos:        position{line: 2901, col: 11, offset: 91793},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1368, col: 32, offset: 43249},
																									val:        "+",
																									ignoreCase: false,
																									want:       "\"+\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1374, col: 122, offset: 43609},
																						expr: &litMatcher{
																							pos:        position{line: 1368, col: 32, offset: 43249},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																					&notExpr{
																						pos: position{line: 1374, col: 151, offset: 43638},
																						expr: &actionExpr{
																							pos: position{line: 2906, col: 12, offset: 91903},
																							run: (*parser).callonInlinePassthrough65,
																							expr: &choiceExpr{
																								pos: position{line: 2906, col: 13, offset: 91904},
																								alternatives: []any{
																									&litMatcher{
																										pos:        position{line: 2906, col: 13, offset: 91904},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 20, offset: 91911},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2906, col: 29, offset: 91920},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1374, col: 160, offset: 43647,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1376, col: 11, offset: 43797},
																run: (*parser).callonInlinePassthrough71,
																expr: &seqExpr{
																	pos: position{line: 1376, col: 12, offset: 43798},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 1376, col: 12, offset: 43798},
																			expr: &actionExpr{
																				pos: position{line: 2897, col: 10, offset: 91732},
																				run: (*parser).callonInlinePassthrough74,
																				expr: &charClassMatcher{
																					pos:        position{line: 2897, col: 10, offset: 91732},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1376, col: 19, offset: 43805},
																			expr: &actionExpr{
																				pos: position{line: 2906, col: 12, offset: 91903},
																				run: (*parser).callonInlinePassthrough77,
																				expr: &choiceExpr{
																					pos: position{line: 2906, col: 13, offset: 91904},
																					alternatives: []any{
																						&litMatcher{
																							pos:        position{line: 2906, col: 13, offset: 91904},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 20, offset: 91911},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2906, col: 29, offset: 91920},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1376, col: 28, offset: 43814},
																			expr: &litMatcher{
																				pos:        position{line: 1368, col: 32, offset: 43249},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&anyMatcher{
																			line: 1376, col: 57, offset: 43843,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1368, col: 32, offset: 43249},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&notExpr{
													pos: position{line: 1370, col: 121, offset: 43374},
													expr: &charClassMatcher{
														pos:        position{line: 2787, col: 13, offset: 88827},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2427, col: 57, offset: 78280},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 2432, col: 1, offset: 78340},
			expr: &seqExpr{
				pos: position{line: 2434, col: 5, offset: 78416},
				exprs: []any{
					&andCodeExpr{
						pos: position{line: 2434, col: 5, offset: 78416},
						run: (*parser).callonQuote2,
					},
					&ruleRefExpr{
						pos:  position{line: 2437, col: 5, offset: 78481},
						name: "QuotedText",
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 2439, col: 1, offset: 78494},
			expr: &actionExpr{
				pos: position{line: 2441, col: 5, offset: 78576},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 2441, col: 5, offset: 78576},
					exprs: []any{
						&andCodeExpr{
							pos: position{line: 2441, col: 5, offset: 78576},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 2444, col: 5, offset: 78647},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2445, col: 9, offset: 78665},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2500, col: 1, offset: 80424},
			expr: &choiceExpr{
				pos: position{line: 2502, col: 5, offset: 80454},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2502, col: 5, offset: 80454},
						run: (*parser).callonSymbol2,
						expr: &seqExpr{
							pos: position{line: 2502, col: 5, offset: 80454},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2502, col: 5, offset: 80454},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&choiceExpr{
									pos: position{line: 2502, col: 10, offset: 80459},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 2502, col: 10, offset: 80459},
											name: "QuotationMark",
										},
										&actionExpr{
											pos: position{line: 2531, col: 14, offset: 81563},
											run: (*parser).callonSymbol7,
											expr: &litMatcher{
												pos:        position{line: 2531, col: 14, offset: 81563},
												val:        "(C)",
												ignoreCase: false,
												want:       "\"(C)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2535, col: 14, offset: 81629},
											run: (*parser).callonSymbol9,
											expr: &litMatcher{
												pos:        position{line: 2535, col: 14, offset: 81629},
												val:        "(TM)",
												ignoreCase: false,
												want:       "\"(TM)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2539, col: 15, offset: 81698},
											run: (*parser).callonSymbol11,
											expr: &litMatcher{
												pos:        position{line: 2539, col: 15, offset: 81698},
												val:        "(R)",
												ignoreCase: false,
												want:       "\"(R)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2543, col: 13, offset: 81763},
											run: (*parser).callonSymbol13,
											expr: &litMatcher{
												pos:        position{line: 2543, col: 13, offset: 81763},
												val:        "...",
												ignoreCase: false,
												want:       "\"...\"",
											},
										},
										&actionExpr{
											pos: position{line: 2571, col: 21, offset: 82333},
											run: (*parser).callonSymbol15,
											expr: &litMatcher{
												pos:        position{line: 2571, col: 21, offset: 82333},
												val:        "->",
												ignoreCase: false,
												want:       "\"->\"",
											},
										},
										&actionExpr{
											pos: position{line: 2550, col: 5, offset: 81919},
											run: (*parser).callonSymbol17,
											expr: &seqExpr{
												pos: position{line: 2550, col: 5, offset: 81919},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 2550, col: 5, offset: 81919},
														val:        "--",
														ignoreCase: false,
														want:       "\"--\"",
													},
													&andCodeExpr{
														pos: position{line: 2551, col: 5, offset: 81929},
														run: (*parser).callonSymbol20,
													},
													&choiceExpr{
														pos: position{line: 2555, col: 6, offset: 82016},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2897, col: 10, offset: 91732},
																run: (*parser).callonSymbol22,
																expr: &charClassMatcher{
																	pos:        position{line: 2897, col: 10, offset: 91732},
																	val:        "[\\t ]",
																	chars:      []rune{'\t', ' '},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2555, col: 14, offset: 82024},
																expr: &choiceExpr{
																	pos: position{line: 2919, col: 8, offset: 92130},
																	alternatives: []any{
																		&actionExpr{
																			pos: position{line: 2906, col: 12, offset: 91903},
																			run: (*parser).callonSymbol26,
																			expr: &choiceExpr{
																				pos: position{line: 2906, col: 13, offset: 91904},
																				alternatives: []any{
																					&litMatcher{
																						pos:        position{line: 2906, col: 13, offset: 91904},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 20, offset: 91911},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2906, col: 29, offset: 91920},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2916, col: 8, offset: 92080},
																			expr: &anyMatcher{
																				line: 2916, col: 9, offset: 92081,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2560, col: 5, offset: 82144},
											run: (*parser).callonSymbol33,
											expr: &seqExpr{
												pos: position{line: 2560, col: 5, offset: 82144},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 2560, col: 5, offset: 82144},
														val:        "--",
														ignoreCase: false,
														want:       "\"--\"",
													},
													&andCodeExpr{
														pos: position{line: 2561, col: 5, offset: 82154},
														run: (*parser).callonSymbol36,
													},
													&andExpr{
														pos: position{line: 2565, col: 5, offset: 82243},
														expr: &choiceExpr{
															pos: position{line: 2565, col: 7, offset: 82245},
															alternatives: []any{
																&charClassMatcher{
																	pos:        position{line: 2787, col: 13, offset: 88827},
																	val:        "[\\pL\\pN]",
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&actionExpr{
																	pos: position{line: 2906, col: 12, offset: 91903},
																	run: (*parser).callonSymbol40,
																	expr: &choiceExpr{
																		pos: position{line: 2906, col: 13, offset: 91904},
																		alternatives: []any{
																			&litMatcher{
																				pos:        position{line: 2906, col: 13, offset: 91904},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2906, col: 20, offset: 91911},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2906, col: 29, offset: 91920},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2916, col: 8, offset: 92080},
																	expr: &anyMatcher{
																		line: 2916, col: 9, offset: 92081,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2575, col: 20, offset: 82403},
											run: (*parser).callonSymbol47,
											expr: &litMatcher{
												pos:        position{line: 2575, col: 20, offset: 82403},
												val:        "<-",
												ignoreCase: false,
												want:       "\"<-\"",
											},
										},
										&actionExpr{
											pos: position{line: 2579, col: 21, offset: 82474},
											run: (*parser).callonSymbol49,
											expr: &litMatcher{
												pos:        position{line: 2579, col: 21, offset: 82474},
												val:        "=>",
												ignoreCase: false,
												want:       "\"=>\"",
											},
										},
										&actionExpr{
											pos: position{line: 2583, col: 20, offset: 82544},
											run: (*parser).callonSymbol51,
											expr: &litMatcher{
												pos:        position{line: 2583, col: 20, offset: 82544},
												val:        "<=",
												ignoreCase: false,
												want:       "\"<=\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2506, col: 7, offset: 80714},
						name: "QuotationMark",
					},
					&actionExpr{
						pos: position{line: 2531, col: 14, offset: 81563},
						run: (*parser).callonSymbol54,
						expr: &litMatcher{
							pos:        position{line: 2531, col: 14, offset: 81563},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2535, col: 14, offset: 81629},
						run: (*parser).callonSymbol56,
						expr: &litMatcher{
							pos:        position{line: 2535, col: 14, offset: 81629},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2539, col: 15, offset: 81698},
						run: (*parser).callonSymbol58,
						expr: &litMatcher{
							pos:        position{line: 2539, col: 15, offset: 81698},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2543, col: 13, offset: 81763},
						run: (*parser).callonSymbol60,
						expr: &litMatcher{
							pos:        position{line: 2543, col: 13, offset: 81763},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2550, col: 5, offset: 81919},
						run: (*parser).callonSymbol62,
						expr: &seqExpr{
							pos: position{line: 2550, col: 5, offset: 81919},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2550, col: 5, offset: 81919},
									val:        "--",
									ignoreCase: false,
									want:       "\"--\"",
								},
								&andCodeExpr{
									pos: position{line: 2551, col: 5, offset: 81929},
									run: (*parser).callonSymbol65,
								},
								&choiceExpr{
									pos: position{line: 2555, col: 6, offset: 82016},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 2897, col: 10, offset: 91732},
											run: (*parser).callonSymbol67,
											expr: &charClassMatcher{
												pos:        position{line: 2897, col: 10, offset: 91732},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&andExpr{
											pos: position{line: 2555, col: 14, offset: 82024},
											expr: &choiceExpr{
												pos: position{line: 2919, col: 8, offset: 92130},
												alternatives: []any{
													&actionExpr{
														pos: position{line: 2906, col: 12, offset: 91903},
														run: (*parser).callonSymbol71,
														expr: &choiceExpr{
															pos: position{line: 2906, col: 13, offset: 91904},
															alternatives: []any{
																&litMatcher{
																	pos:        position{line: 2906, col: 13, offset: 91904},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2906, col: 20, offset: 91911},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2906, col: 29, offset: 91920},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2916, col: 8, offset: 92080},
														expr: &anyMatcher{
															line: 2916, col: 9, offset: 92081,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2560, col: 5, offset: 82144},
						run: (*parser).callonSymbol78,
						expr: &seqExpr{
							pos: position{line: 2560, col: 5, offset: 82144},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2560, col: 5, offset: 82144},
									val:        "--",
									ignoreCase: false,
									want:       "\"--\"",
								},
								&andCodeExpr{
									pos: position{line: 2561, col: 5, offset: 82154},
									run: (*parser).callonSymbol81,
								},
								&andExpr{
									pos: position{line: 2565, col: 5, offset: 82243},
									expr: &choiceExpr{
										pos: position{line: 2565, col: 7, offset: 82245},
										alternatives: []any{
											&charClassMatcher{
												pos:        position{line: 2787, col: 13, offset: 88827},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
											&actionExpr{
												pos: position{line: 2906, col: 12, offset: 91903},
												run: (*parser).callonSymbol85,
												expr: &choiceExpr{
													pos: position{line: 2906, col: 13, offset: 91904},
													alternatives: []any{
														&litMatcher{
															pos:        position{line: 2906, col: 13, offset: 91904},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2906, col: 20, offset: 91911},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2906, col: 29, offset: 91920},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2916, col: 8, offset: 92080},
												expr: &anyMatcher{
													line: 2916, col: 9, offset: 92081,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2571, col: 21, offset: 82333},
						run: (*parser).callonSymbol92,
						expr: &litMatcher{
							pos:        position{line: 2571, col: 21, offset: 82333},
							val:        "->",
							ignoreCase: false,
							want:       "\"->\"",
						},
					},
					&actionExpr{
						pos: position{line: 2575, col: 20, offset: 82403},
						run: (*parser).callonSymbol94,
						expr: &litMatcher{
							pos:        position{line: 2575, col: 20, offset: 82403},
							val:        "<-",
							ignoreCase: false,
							want:       "\"<-\"",
						},
					},
					&actionExpr{
						pos: position{line: 2579, col: 21, offset: 82474},
						run: (*parser).callonSymbol96,
						expr: &litMatcher{
							pos:        position{line: 2579, col: 21, offset: 82474},
							val:        "=>",
							ignoreCase: false,
							want:       "\"=>\"",
						},
					},
					&actionExpr{
						pos: position{line: 2583, col: 20, offset: 82544},
						run: (*parser).callonSymbol98,
						expr: &litMatcher{
							pos:        position{line: 2583, col: 20, offset: 82544},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
				},
			},
		},
		{
			name: "QuotationMark",
			pos:  position{line: 2517, col: 1, offset: 80904},
			expr: &choiceExpr{
				pos: position{line: 2518, col: 5, offset: 80926},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2518, col: 5, offset: 80926},
						run: (*parser).callonQuotationMark2,
						expr: &seqExpr{
							pos: position{line: 2518, col: 5, offset: 80926},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2518, col: 5, offset: 80926},
									val:        "`\"",
									ignoreCase: false,
									want:       "\"`\\\"\"",
								},
								&notExpr{
									pos: position{line: 2518, col: 11, offset: 80932},
									expr: &seqExpr{
										pos: position{line: 2081, col: 5, offset: 67136},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2081, col: 5, offset: 67136},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&andCodeExpr{
												pos: position{line: 2082, col: 5, offset: 67145},
												run: (*parser).callonQuotationMark8,
											},
											&andExpr{
												pos: position{line: 2086, col: 5, offset: 67268},
												expr: &notExpr{
													pos: position{line: 2086, col: 7, offset: 67270},
													expr: &litMatcher{
														pos:        position{line: 2086, col: 8, offset: 67271},
														val:        "`",
														ignoreCase: false,
														want:       "\"`\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2521, col: 7, offset: 81085},
						run: (*parser).callonQuotationMark12,
						expr: &seqExpr{
							pos: position{line: 2521, col: 7, offset: 81085},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2521, col: 7, offset: 81085},
									val:        "\"`",
									ignoreCase: false,
									want:       "\"\\\"`\"",
								},
								&notExpr{
									pos: position{line: 2521, col: 13, offset: 81091},
									expr: &ruleRefExpr{
										pos:  position{line: 2521, col: 14, offset: 81092},
										name: "SingleQuoteMonospaceTextEndDelimiter",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2524, col: 7, offset: 81242},
						run: (*parser).callonQuotationMark17,
						expr: &seqExpr{
							pos: position{line: 2524, col: 7, offset: 81242},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2524, col: 7, offset: 81242},
									val:        "`'",
									ignoreCase: false,
									want:       "\"`'\"",
								},
								&notExpr{
									pos: position{line: 2524, col: 12, offset: 81247},
									expr: &seqExpr{
										pos: position{line: 2081, col: 5, offset: 67136},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 2081, col: 5, offset: 67136},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&andCodeExpr{
												pos: position{line: 2082, col: 5, offset: 67145},
												run: (*parser).callonQuotationMark23,
											},
											&andExpr{
												pos: position{line: 2086, col: 5, offset: 67268},
												expr: &notExpr{
													pos: position{line: 2086, col: 7, offset: 67270},
													expr: &litMatcher{
														pos:        position{line: 2086, col: 8, offset: 67271},
														val:        "`",
														ignoreCase: false,
														want:       "\"`\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2527, col: 7, offset: 81400},
						run: (*parser).callonQuotationMark27,
						expr: &seqExpr{
							pos: position{line: 2527, col: 7, offset: 81400},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 2527, col: 7, offset: 81400},
									val:        "'`",
									ignoreCase: false,
									want:       "\"'`\"",
								},
								&notExpr{
									pos: position{line: 2527, col: 12, offset: 81405},
									expr: &ruleRefExpr{
										pos:  position{line: 2527, col: 13, offset: 81406},
										name: "SingleQuoteMonospaceTextEndDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableColumnsAttribute",
			pos:  position{line: 2701, col: 1, offset: 85880},
			expr: &actionExpr{
				pos: position{line: 2701, col: 26, offset: 85905},
				run: (*parser).callonTableColumnsAttribute1,
				expr: &seqExpr{
					pos: position{line: 2701, col: 26, offset: 85905},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 2701, col: 26, offset: 85905},
							expr: &litMatcher{
								pos:        position{line: 2701, col: 26, offset: 85905},
								val:        "\"",
								ignoreCase: false,
								want:       "\"\\\"\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2701, col: 32, offset: 85911},
							label: "cols",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2701, col: 37, offset: 85916},
								expr: &actionExpr{
									pos: position{line: 2706, col: 5, offset: 85989},
									run: (*parser).callonTableColumnsAttribute7,
									expr: &seqExpr{
										pos: position{line: 2706, col: 5, offset: 85989},
										exprs: []any{
											&andExpr{
												pos: position{line: 2914, col: 11, offset: 92066},
												expr: &anyMatcher{
													line: 2914, col: 13, offset: 92068,
												},
											},
											&labeledExpr{
												pos:   position{line: 2709, col: 5, offset: 86115},
												label: "multiplier",
												expr: &zeroOrOneExpr{
													pos: position{line: 2709, col: 16, offset: 86126},
													expr: &actionExpr{
														pos: position{line: 2709, col: 17, offset: 86127},
														run: (*parser).callonTableColumnsAttribute13,
														expr: &seqExpr{
															pos: position{line: 2709, col: 17, offset: 86127},
															exprs: []any{
																&labeledExpr{
																	pos:   position{line: 2709, col: 17, offset: 86127},
																	label: "n",
																	expr: &actionExpr{
																		pos: position{line: 2889, col: 12, offset: 91559},
																		run: (*parser).callonTableColumnsAttribute16,
																		expr: &seqExpr{
																			pos: position{line: 2889, col: 13, offset: 91560},
																			exprs: []any{
																				&zeroOrOneExpr{
																					pos: position{line: 2889, col: 13, offset: 91560},
																					expr: &litMatcher{
																						pos:        position{line: 2889, col: 13, offset: 91560},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2889, col: 18, offset: 91565},
																					expr: &charClassMatcher{
																						pos:        position{line: 2889, col: 18, offset: 91565},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2709, col: 27, offset: 86137},
																	val:        "*",
																	ignoreCase: false,
																	want:       "\"*\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2710, col: 5, offset: 86165},
												label: "halign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2710, col: 12, offset: 86172},
													expr: &choiceExpr{
														pos: position{line: 2711, col: 9, offset: 86182},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2711, col: 9, offset: 86182},
																run: (*parser).callonTableColumnsAttribute26,
																expr: &litMatcher{
																	pos:        position{line: 2711, col: 9, offset: 86182},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2712, col: 11, offset: 86229},
																run: (*parser).callonTableColumnsAttribute28,
																expr: &litMatcher{
																	pos:        position{line: 2712, col: 11, offset: 86229},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 2713, col: 11, offset: 86277},
																run: (*parser).callonTableColumnsAttribute30,
																expr: &litMatcher{
																	pos:        position{line: 2713, col: 11, offset: 86277},
																	val:        "^",
																	ignoreCase: false,
																	want:       "\"^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2715, col: 5, offset: 86327},
												label: "valign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2715, col: 12, offset: 86334},
													expr: &choiceExpr{
														pos: position{line: 2716, col: 9, offset: 86344},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2716, col: 9, offset: 86344},
																run: (*parser).callonTableColumnsAttribute35,
																expr: &litMatcher{
																	pos:        position{line: 2716, col: 9, offset: 86344},
																	val:        ".<",
																	ignoreCase: false,
																	want:       "\".<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2717, col: 11, offset: 86391},
																run: (*parser).callonTableColumnsAttribute37,
																expr: &litMatcher{
																	pos:        position{line: 2717, col: 11, offset: 86391},
																	val:        ".>",
																	ignoreCase: false,
																	want:       "\".>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2718, col: 11, offset: 86441},
																run: (*parser).callonTableColumnsAttribute39,
																expr: &litMatcher{
																	pos:        position{line: 2718, col: 11, offset: 86441},
																	val:        ".^",
																	ignoreCase: false,
																	want:       "\".^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2720, col: 5, offset: 86492},
												label: "weight",
												expr: &zeroOrOneExpr{
													pos: position{line: 2720, col: 12, offset: 86499},
													expr: &choiceExpr{
														pos: position{line: 2720, col: 13, offset: 86500},
														alternatives: []any{
															&actionExpr{
																pos: position{line: 2889, col: 12, offset: 91559},
																run: (*parser).callonTableColumnsAttribute44,
																expr: &seqExpr{
																	pos: position{line: 2889, col: 13, offset: 91560},
																	exprs: []any{
																		&zeroOrOneExpr{
																			pos: position{line: 2889, col: 13, offset: 91560},
																			expr: &litMatcher{
																				pos:        position{line: 2889, col: 13, offset: 91560},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2889, col: 18, offset: 91565},
																			expr: &charClassMatcher{
																				pos:        position{line: 2889, col: 18, offset: 91565},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2720, col: 24, offset: 86511},
																run: (*parser).callonTableColumnsAttribute50,
																expr: &litMatcher{
																	pos:        position{line: 2720, col: 24, offset: 86511},
																	val:        "~",
																	ignoreCase: false,
																	want:       "\"~\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2721, col: 5, offset: 86553},
												label: "style",
												expr: &zeroOrOneExpr{
													pos: position{line: 2721, col: 11, offset: 86559},
													expr: &actionExpr{
														pos: position{line: 2721, col: 12, offset: 86560},
														run: (*parser).callonTableColumnsAttribute54,
														expr: &charClassMatcher{
															pos:        position{line: 2721, col: 12, offset: 86560},
															val:        "[adehlms]",
															chars:      []rune{'a', 'd', 'e', 'h', 'l', 'm', 's'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2723, col: 5, offset: 86690},
												label: "comma",
												expr: &choiceExpr{
													pos: position{line: 2723, col: 12, offset: 86697},
													alternatives: []any{
														&zeroOrOneExpr{
															pos: position{line: 2723, col: 12, offset: 86697},
															expr: &litMatcher{
																pos:        position{line: 2723, col: 13, offset: 86698},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
														},
														&andExpr{
															pos: position{line: 2723, col: 21, offset: 86706},
															expr: &litMatcher{
																pos:        position{line: 2723, col: 22, offset: 86707},
																val:        "\"",
																ignoreCase: false,
																want:       "\"\\\"\"",
															},
														},
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 2724, col: 5, offset: 86717},
												run: (*parser).callonTableColumnsAttribute62,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2701, col: 48, offset: 85927},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 2701, col: 48, offset: 85927},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&notExpr{
									pos: position{line: 2916, col: 8, offset: 92080},
									expr: &anyMatcher{
										line: 2916, col: 9, offset: 92081,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 2752, col: 1, offset: 87727},
			expr: &actionExpr{
				pos: position{line: 2753, col: 5, offset: 87750},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 2753, col: 5, offset: 87750},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2753, col: 5, offset: 87750},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2776, col: 18, offset: 88491},
								run: (*parser).callonUserMacroBlock4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2776, col: 19, offset: 88492},
									expr: &charClassMatcher{
										pos:        position{line: 2776, col: 19, offset: 88492},
										val:        "[_-\\pL\\pN]",
										chars:      []rune{'_', '-'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2754, col: 5, offset: 87776},
							run: (*parser).callonUserMacroBlock7,
						},
						&litMatcher{
							pos:        position{line: 2758, col: 5, offset: 87904},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 2759, col: 5, offset: 87914},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2780, col: 19, offset: 88567},
								run: (*parser).callonUserMacroBlock10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2780, col: 19, offset: 88567},
									expr: &charClassMatcher{
										pos:        position{line: 2780, col: 19, offset: 88567},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2760, col: 5, offset: 87942},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2760, col: 17, offset: 87954},
								name: "InlineAttributes",
							},
						},
						&choiceExpr{
							pos: position{line: 2919, col: 8, offset: 92130},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 2906, col: 12, offset: 91903},
									run: (*parser).callonUserMacroBlock16,
									expr: &choiceExpr{
										pos: position{line: 2906, col: 13, offset: 91904},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 2906, col: 13, offset: 91904},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 20, offset: 91911},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2906, col: 29, offset: 91920},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2916, col: 8, offset: 92080},
									expr: &anyMatcher{
										line: 2916, col: 9, offset: 92081,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2764, col: 1, offset: 88102},
			expr: &actionExpr{
				pos: position{line: 2765, col: 5, offset: 88126},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2765, col: 5, offset: 88126},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2765, col: 5, offset: 88126},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2776, col: 18, offset: 88491},
								run: (*parser).callonInlineUserMacro4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2776, col: 19, offset: 88492},
									expr: &charClassMatcher{
										pos:        position{line: 2776, col: 19, offset: 88492},
										val:        "[_-\\pL\\pN]",
										chars:      []rune{'_', '-'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2766, col: 5, offset: 88152},
							run: (*parser).callonInlineUserMacro7,
						},
						&litMatcher{
							pos:        position{line: 2770, col: 5, offset: 88280},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2771, col: 5, offset: 88289},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2780, col: 19, offset: 88567},
								run: (*parser).callonInlineUserMacro10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2780, col: 19, offset: 88567},
									expr: &charClassMatcher{
										pos:        position{line: 2780, col: 19, offset: 88567},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2772, col: 5, offset: 88317},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2772, col: 17, offset: 88329},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2851, col: 1, offset: 90379},
			expr: &actionExpr{
				pos: position{line: 2851, col: 17, offset: 90395},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2851, col: 17, offset: 90395},
					label: "path",
					expr: &actionExpr{
						pos: position{line: 2868, col: 5, offset: 90849},
						run: (*parser).callonFileLocation3,
						expr: &labeledExpr{
							pos:   position{line: 2868, col: 5, offset: 90849},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2868, col: 14, offset: 90858},
								expr: &choiceExpr{
									pos: position{line: 2869, col: 9, offset: 90868},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 2869, col: 9, offset: 90868},
											run: (*parser).callonFileLocation7,
											expr: &seqExpr{
												pos: position{line: 2869, col: 9, offset: 90868},
												exprs: []any{
													&notExpr{
														pos: position{line: 2869, col: 9, offset: 90868},
														expr: &litMatcher{
															pos:        position{line: 2869, col: 10, offset: 90869},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 2870, col: 9, offset: 90897},
														expr: &charClassMatcher{
															pos:        position{line: 2870, col: 10, offset: 90898},
															val:        "[^\\r\\n[]�{,;?!.<> ]",
															chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '.', '<', '>', ' '},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
										&seqExpr{
											pos: position{line: 2873, col: 11, offset: 91110},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 2873, col: 11, offset: 91110},
													val:        "[,;?!.]",
													chars:      []rune{',', ';', '?', '!', '.'},
													ignoreCase: false,
													inverted:   false,
												},
												&andExpr{
													pos: position{line: 2873, col: 19, offset: 91118},
													expr: &seqExpr{
														pos: position{line: 2873, col: 21, offset: 91120},
														exprs: []any{
															&notExpr{
																pos: position{line: 2873, col: 21, offset: 91120},
																expr: &actionExpr{
																	pos: position{line: 2897, col: 10, offset: 91732},
																	run: (*parser).callonFileLocation18,
																	expr: &charClassMatcher{
																		pos:        position{line: 2897, col: 10, offset: 91732},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&notExpr{
																pos: position{line: 2873, col: 28, offset: 91127},
																expr: &notExpr{
																	pos: position{line: 2916, col: 8, offset: 92080},
																	expr: &anyMatcher{
																		line: 2916, col: 9, offset: 92081,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 639, col: 5, offset: 20141},
											run: (*parser).callonFileLocation23,
											expr: &seqExpr{
												pos: position{line: 639, col: 5, offset: 20141},
												exprs: []any{
													&andCodeExpr{
														pos: position{line: 639, col: 5, offset: 20141},
														run: (*parser).callonFileLocation25,
													},
													&labeledExpr{
														pos:   position{line: 642, col: 5, offset: 20213},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 642, col: 14, offset: 20222},
															alternatives: []any{
																&actionExpr{
																	pos: position{line: 648, col: 5, offset: 20351},
																	run: (*parser).callonFileLocation28,
																	expr: &seqExpr{
																		pos: position{line: 648, col: 5, offset: 20351},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 648, col: 5, offset: 20351},
																				val:        "\\{",
																				ignoreCase: false,
																				want:       "\"\\\\{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 648, col: 13, offset: 20359},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					run: (*parser).callonFileLocation32,
																					expr: &seqExpr{
																						pos: position{line: 321, col: 18, offset: 9768},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 321, col: 18, offset: 9768},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 321, col: 28, offset: 9778},
																								expr: &charClassMatcher{
																									pos:        position{line: 321, col: 29, offset: 9779},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 648, col: 32, offset: 20378},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 655, col: 5, offset: 20619},
																	run: (*parser).callonFileLocation38,
																	expr: &seqExpr{
																		pos: position{line: 655, col: 5, offset: 20619},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 655, col: 5, offset: 20619},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 655, col: 9, offset: 20623},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					run: (*parser).callonFileLocation42,
																					expr: &seqExpr{
																						pos: position{line: 321, col: 18, offset: 9768},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 321, col: 18, offset: 9768},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 321, col: 28, offset: 9778},
																								expr: &charClassMatcher{
																									pos:        position{line: 321, col: 29, offset: 9779},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 655, col: 28, offset: 20642},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 661, col: 25, offset: 20823},
																	run: (*parser).callonFileLocation48,
																	expr: &seqExpr{
																		pos: position{line: 661, col: 25, offset: 20823},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 661, col: 25, offset: 20823},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 661, col: 37, offset: 20835},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					run: (*parser).callonFileLocation52,
																					expr: &seqExpr{
																						pos: position{line: 321, col: 18, offset: 9768},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 321, col: 18, offset: 9768},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 321, col: 28, offset: 9778},
																								expr: &charClassMatcher{
																									pos:        position{line: 321, col: 29, offset: 9779},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 661, col: 56, offset: 20854},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 661, col: 62, offset: 20860},
																					expr: &actionExpr{
																						pos: position{line: 669, col: 17, offset: 21155},
																						run: (*parser).callonFileLocation59,
																						expr: &seqExpr{
																							pos: position{line: 669, col: 17, offset: 21155},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 669, col: 17, offset: 21155},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 669, col: 21, offset: 21159},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 669, col: 28, offset: 21166},
																										alternatives: []any{
																											&actionExpr{
																												pos: position{line: 669, col: 28, offset: 21166},
																												run: (*parser).callonFileLocation64,
																												expr: &charClassMatcher{
																													pos:        position{line: 669, col: 28, offset: 21166},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 671, col: 9, offset: 21220},
																												run: (*parser).callonFileLocation66,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 671, col: 9, offset: 21220},
																													expr: &charClassMatcher{
																														pos:        position{line: 671, col: 9, offset: 21220},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 661, col: 78, offset: 20876},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 665, col: 25, offset: 20994},
																	run: (*parser).callonFileLocation70,
																	expr: &seqExpr{
																		pos: position{line: 665, col: 25, offset: 20994},
																		exprs: []any{
																			&litMatcher{
																				pos:        position{line: 665, col: 25, offset: 20994},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 665, col: 38, offset: 21007},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 321, col: 18, offset: 9768},
																					run: (*parser).callonFileLocation74,
																					expr: &seqExpr{
																						pos: position{line: 321, col: 18, offset: 9768},
																						exprs: []any{
																							&charClassMatcher{
																								pos:        position{line: 321, col: 18, offset: 9768},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 321, col: 28, offset: 9778},
																								expr: &charClassMatcher{
																									pos:        position{line: 321, col: 29, offset: 9779},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 665, col: 57, offset: 21026},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 665, col: 63, offset: 21032},
																					expr: &actionExpr{
																						pos: position{line: 669, col: 17, offset: 21155},
																						run: (*parser).callonFileLocation81,
																						expr: &seqExpr{
																							pos: position{line: 669, col: 17, offset: 21155},
																							exprs: []any{
																								&litMatcher{
																									pos:        position{line: 669, col: 17, offset: 21155},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 669, col: 21, offset: 21159},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 669, col: 28, offset: 21166},
																										alternatives: []any{
																											&actionExpr{
																												pos: position{line: 669, col: 28, offset: 21166},
																												run: (*parser).callonFileLocation86,
																												expr: &charClassMatcher{
																													pos:        position{line: 669, col: 28, offset: 21166},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 671, col: 9, offset: 21220},
																												run: (*parser).callonFileLocation88,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 671, col: 9, offset: 21220},
																													expr: &charClassMatcher{
																														pos:        position{line: 671, col: 9, offset: 21220},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 665, col: 79, offset: 21048},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1201, col: 23, offset: 37004},
											run: (*parser).callonFileLocation92,
											expr: &seqExpr{
												pos: position{line: 1201, col: 23, offset: 37004},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 1199, col: 32, offset: 36972},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 1201, col: 51, offset: 37032},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 1201, col: 56, offset: 37037},
															run: (*parser).callonFileLocation96,
															expr: &oneOrMoreExpr{
																pos: position{line: 1201, col: 56, offset: 37037},
																expr: &charClassMatcher{
																	pos:        position{line: 1201, col: 56, offset: 37037},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1199, col: 32, offset: 36972},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2876, col: 11, offset: 91247},
											run: (*parser).callonFileLocation100,
											expr: &litMatcher{
												pos:        position{line: 2876, col: 11, offset: 91247},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDocumentRawLine10() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine10()
}

func (c *current) onDocumentRawLine17() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine17()
}

func (c *current) onDocumentRawLine20() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine20()
}

func (c *current) onDocumentRawLine6(name any) (any, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine6(stack["name"])
}

func (c *current) onDocumentRawLine31() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine31()
}

func (c *current) onDocumentRawLine38() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine38()
}

func (c *current) onDocumentRawLine41() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine41()
}

func (c *current) onDocumentRawLine27(name any) (any, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine27(stack["name"])
}

func (c *current) onDocumentRawLine53() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine53()
}

func (c *current) onDocumentRawLine59() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine59()
}

func (c *current) onDocumentRawLine64() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine64()
}

func (c *current) onDocumentRawLine49(name, attr any) (any, error) {
	return types.NewIfdefCondition(name.(string), attr)

}

func (p *parser) callonDocumentRawLine49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine49(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine72() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine72()
}

func (c *current) onDocumentRawLine78() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine78()
}

func (c *current) onDocumentRawLine83() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine83() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine83()
}

func (c *current) onDocumentRawLine68(name, attr any) (any, error) {
	return types.NewIfndefCondition(name.(string), attr)

}

func (p *parser) callonDocumentRawLine68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine68(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine101() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine101() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine101()
}

func (c *current) onDocumentRawLine97(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine97() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine97(stack["name"])
}

func (c *current) onDocumentRawLine111() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine111()
}

func (c *current) onDocumentRawLine107(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine107() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine107(stack["name"])
}

func (c *current) onDocumentRawLine92(s any) (any, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine92(stack["s"])
}

func (c *current) onDocumentRawLine127() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine127() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine127()
}

func (c *current) onDocumentRawLine123(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine123(stack["name"])
}

func (c *current) onDocumentRawLine137() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine137() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine137()
}

func (c *current) onDocumentRawLine133(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine133() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine133(stack["name"])
}

func (c *current) onDocumentRawLine118(s any) (any, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine118() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine118(stack["s"])
}

func (c *current) onDocumentRawLine151() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine151() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine151()
}

func (c *current) onDocumentRawLine147(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine147() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine147(stack["name"])
}

func (c *current) onDocumentRawLine161() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine161() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine161()
}

func (c *current) onDocumentRawLine157(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine157() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine157(stack["name"])
}

func (c *current) onDocumentRawLine144(s any) (any, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine144() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine144(stack["s"])
}

func (c *current) onDocumentRawLine171() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine171() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine171()
}

func (c *current) onDocumentRawLine167(w any) (any, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine167() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine167(stack["w"])
}

func (c *current) onDocumentRawLine179() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine179() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine179()
}

func (c *current) onDocumentRawLine175(w any) (any, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine175() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine175(stack["w"])
}

func (c *current) onDocumentRawLine183() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentRawLine183() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine183()
}

func (c *current) onDocumentRawLine190() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine190() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine190()
}

func (c *current) onDocumentRawLine194() (any, error) {
	return types.NewEqualOperand()

}

func (p *parser) callonDocumentRawLine194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine194()
}

func (c *current) onDocumentRawLine196() (any, error) {
	return types.NewNotEqualOperand()

}

func (p *parser) callonDocumentRawLine196() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine196()
}

func (c *current) onDocumentRawLine198() (any, error) {
	return types.NewLessThanOperand()

}

func (p *parser) callonDocumentRawLine198() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine198()
}

func (c *current) onDocumentRawLine200() (any, error) {
	return types.NewLessOrEqualOperand()

}

func (p *parser) callonDocumentRawLine200() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine200()
}

func (c *current) onDocumentRawLine202() (any, error) {
	return types.NewGreaterThanOperand()

}

func (p *parser) callonDocumentRawLine202() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine202()
}

func (c *current) onDocumentRawLine204() (any, error) {
	return types.NewGreaterOrEqualOperand()

}

func (p *parser) callonDocumentRawLine204() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine204()
}

func (c *current) onDocumentRawLine207() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine207() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine207()
}

func (c *current) onDocumentRawLine220() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine220()
}

func (c *current) onDocumentRawLine216(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine216() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine216(stack["name"])
}

func (c *current) onDocumentRawLine230() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine230() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine230()
}

func (c *current) onDocumentRawLine226(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine226() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine226(stack["name"])
}

func (c *current) onDocumentRawLine211(s any) (any, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine211() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine211(stack["s"])
}

func (c *current) onDocumentRawLine246() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine246() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine246()
}

func (c *current) onDocumentRawLine242(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine242() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine242(stack["name"])
}

func (c *current) onDocumentRawLine256() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine256() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine256()
}

func (c *current) onDocumentRawLine252(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine252() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine252(stack["name"])
}

func (c *current) onDocumentRawLine237(s any) (any, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine237() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine237(stack["s"])
}

func (c *current) onDocumentRawLine270() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine270() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine270()
}

func (c *current) onDocumentRawLine266(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine266() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine266(stack["name"])
}

func (c *current) onDocumentRawLine280() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine280() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine280()
}

func (c *current) onDocumentRawLine276(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine276() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine276(stack["name"])
}

func (c *current) onDocumentRawLine263(s any) (any, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine263() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine263(stack["s"])
}

func (c *current) onDocumentRawLine290() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine290() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine290()
}

func (c *current) onDocumentRawLine286(w any) (any, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine286() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine286(stack["w"])
}

func (c *current) onDocumentRawLine298() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine298() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine298()
}

func (c *current) onDocumentRawLine294(w any) (any, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine294() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine294(stack["w"])
}

func (c *current) onDocumentRawLine302() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentRawLine302() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine302()
}

func (c *current) onDocumentRawLine310() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine310() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine310()
}

func (c *current) onDocumentRawLine87(left, operand, right any) (any, error) {
	return types.NewIfevalCondition(left, right, operand.(types.IfevalOperand))

}

func (p *parser) callonDocumentRawLine87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine87(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onDocumentRawLine319() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine319() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine319()
}

func (c *current) onDocumentRawLine325() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine325() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine325()
}

func (c *current) onDocumentRawLine330() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine330() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine330()
}

func (c *current) onDocumentRawLine314(name, attr any) (any, error) {
	return types.NewEndOfCondition() // name and attributes are parsed but ignored

}

func (p *parser) callonDocumentRawLine314() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine314(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine343() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine343() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine343()
}

func (c *current) onDocumentRawLine349() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine349() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine349()
}

func (c *current) onDocumentRawLine352() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine352() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine352()
}

func (c *current) onDocumentRawLine340(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine340() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine340(stack["delimiter"])
}

func (c *current) onDocumentRawLine362() (any, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine362() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine362()
}

func (c *current) onDocumentRawLine368() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine368() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine368()
}

func (c *current) onDocumentRawLine371() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine371() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine371()
}

func (c *current) onDocumentRawLine359(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine359() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine359(stack["delimiter"])
}

func (c *current) onDocumentRawLine382() (any, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine382() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine382()
}

func (c *current) onDocumentRawLine386() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine386() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine386()
}

func (c *current) onDocumentRawLine389() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine389() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine389()
}

func (c *current) onDocumentRawLine378(language any) (any, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonDocumentRawLine378() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine378(stack["language"])
}

func (c *current) onDocumentRawLine399() (any, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine399() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine399()
}

func (c *current) onDocumentRawLine405() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine405() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine405()
}

func (c *current) onDocumentRawLine408() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine408() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine408()
}

func (c *current) onDocumentRawLine396(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine396() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine396(stack["delimiter"])
}

func (c *current) onDocumentRawLine418() (any, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine418() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine418()
}

func (c *current) onDocumentRawLine424() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine424() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine424()
}

func (c *current) onDocumentRawLine427() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine427() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine427()
}

func (c *current) onDocumentRawLine415(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine415() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine415(stack["delimiter"])
}

func (c *current) onDocumentRawLine437() (any, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine437() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine437()
}

func (c *current) onDocumentRawLine443() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine443() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine443()
}

func (c *current) onDocumentRawLine446() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine446() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine446()
}

func (c *current) onDocumentRawLine434(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine434() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine434(stack["delimiter"])
}

func (c *current) onDocumentRawLine456() (any, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine456() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine456()
}

func (c *current) onDocumentRawLine462() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine462() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine462()
}

func (c *current) onDocumentRawLine465() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine465() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine465()
}

func (c *current) onDocumentRawLine453(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine453() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine453(stack["delimiter"])
}

func (c *current) onDocumentRawLine475() (any, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine475() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine475()
}

func (c *current) onDocumentRawLine481() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine481() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine481()
}

func (c *current) onDocumentRawLine484() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine484() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine484()
}

func (c *current) onDocumentRawLine472(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine472() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine472(stack["delimiter"])
}

func (c *current) onDocumentRawLine494() (any, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine494() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine494()
}

func (c *current) onDocumentRawLine500() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine500() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine500()
}

func (c *current) onDocumentRawLine503() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine503() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine503()
}

func (c *current) onDocumentRawLine491(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine491() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine491(stack["delimiter"])
}

func (c *current) onDocumentRawLine334(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentRawLine334() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine334(stack["delimiter"])
}

func (c *current) onDocumentRawLine512() (bool, error) {
	// should only be enabled when reading files to include, not the main (root) file
	return c.isSectionEnabled(), nil

}

func (p *parser) callonDocumentRawLine512() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine512()
}

func (c *current) onDocumentRawLine513() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonDocumentRawLine513() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine513()
}

func (c *current) onDocumentRawLine515() (any, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentRawLine515() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine515()
}

func (c *current) onDocumentRawLine518(level any) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentRawLine518() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine518(stack["level"])
}

func (c *current) onDocumentRawLine519(level any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine519() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine519(stack["level"])
}

func (c *current) onDocumentRawLine522(level any) (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine522() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine522(stack["level"])
}

func (c *current) onDocumentRawLine510(level any) (any, error) {
	return types.NewRawSection(level.(int), string(c.text)) // just retain the raw content

}

func (p *parser) callonDocumentRawLine510() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine510(stack["level"])
}

func (c *current) onDocumentRawLine1(element any) (any, error) {
	// in case of parse error, we'll keep the rawline content as-is
	return element, nil

}

func (p *parser) callonDocumentRawLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine1(stack["element"])
}

func (c *current) onFileInclusion14() (any, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below
	return string(c.text), nil

}

func (p *parser) callonFileInclusion14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion14()
}

func (c *current) onFileInclusion25() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonFileInclusion25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion25()
}

func (c *current) onFileInclusion32() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonFileInclusion32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion32()
}

func (c *current) onFileInclusion39() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion39()
}

func (c *current) onFileInclusion35(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileInclusion35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion35(stack["name"])
}

func (c *current) onFileInclusion49() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion49()
}

func (c *current) onFileInclusion45(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonFileInclusion45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion45(stack["name"])
}

func (c *current) onFileInclusion59() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion59()
}

func (c *current) onFileInclusion71() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion71()
}

func (c *current) onFileInclusion73() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion73()
}

func (c *current) onFileInclusion66(start any) (any, error) {
	return start, nil

}

func (p *parser) callonFileInclusion66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion66(stack["start"])
}

func (c *current) onFileInclusion55(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFileInclusion55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion55(stack["name"], stack["start"])
}

func (c *current) onFileInclusion81() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion81() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion81()
}

func (c *current) onFileInclusion93() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion93() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion93()
}

func (c *current) onFileInclusion95() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion95()
}

func (c *current) onFileInclusion88(start any) (any, error) {
	return start, nil

}

func (p *parser) callonFileInclusion88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion88(stack["start"])
}

func (c *current) onFileInclusion77(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFileInclusion77() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion77(stack["name"], stack["start"])
}

func (c *current) onFileInclusion30(element any) (any, error) {
	return element, nil

}

func (p *parser) callonFileInclusion30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion30(stack["element"])
}

func (c *current) onFileInclusion103() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion103() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion103()
}

func (c *current) onFileInclusion99(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileInclusion99() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion99(stack["ref"])
}

func (c *current) onFileInclusion107() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion107() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion107()
}

func (c *current) onFileInclusion10(elements any) (any, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileInclusion10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion10(stack["elements"])
}

func (c *current) onFileInclusion8(path any) (any, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileInclusion8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion8(stack["path"])
}

func (c *current) onFileInclusion4(path, attributes any) (any, error) {

	return types.NewFileInclusion(path.(*types.Location), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["attributes"])
}

func (c *current) onFileInclusion112() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonFileInclusion112() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion112()
}

func (c *current) onFileInclusion115() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFileInclusion115() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion115()
}

func (c *current) onFileInclusion1(incl any) (any, error) {
	return incl.(*types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges12() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges12()
}

func (c *current) onLineRanges20() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges20()
}

func (c *current) onLineRanges9(start, end any) (any, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges9(stack["start"], stack["end"])
}

func (c *current) onLineRanges28() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges28()
}

func (c *current) onLineRanges26(singleline any) (any, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges26(stack["singleline"])
}

func (c *current) onLineRanges44() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges44()
}

func (c *current) onLineRanges52() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges52()
}

func (c *current) onLineRanges41(start, end any) (any, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges41(stack["start"], stack["end"])
}

func (c *current) onLineRanges60() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges60()
}

func (c *current) onLineRanges58(singleline any) (any, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges58(stack["singleline"])
}

func (c *current) onLineRanges36(other any) (any, error) {
	return other, nil

}

func (p *parser) callonLineRanges36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges36(stack["other"])
}

func (c *current) onLineRanges5(first, others any) (any, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonLineRanges5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges5(stack["first"], stack["others"])
}

func (c *current) onLineRanges69() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges69() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges69()
}

func (c *current) onLineRanges77() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges77() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges77()
}

func (c *current) onLineRanges66(start, end any) (any, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges66(stack["start"], stack["end"])
}

func (c *current) onLineRanges85() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges85()
}

func (c *current) onLineRanges83(singleline any) (any, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges83() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges83(stack["singleline"])
}

func (c *current) onLineRanges1(value any) (any, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onTagRanges11() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges11()
}

func (c *current) onTagRanges17() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges17()
}

func (c *current) onTagRanges20(stars any) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges20(stack["stars"])
}

func (c *current) onTagRanges14(stars any) (any, error) {
	return stars, nil

}

func (p *parser) callonTagRanges14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges14(stack["stars"])
}

func (c *current) onTagRanges8(tag any) (any, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges8(stack["tag"])
}

func (c *current) onTagRanges26() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges26()
}

func (c *current) onTagRanges32() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges32()
}

func (c *current) onTagRanges35(stars any) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges35(stack["stars"])
}

func (c *current) onTagRanges29(stars any) (any, error) {
	return stars, nil

}

func (p *parser) callonTagRanges29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges29(stack["stars"])
}

func (c *current) onTagRanges21(tag any) (any, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges21(stack["tag"])
}

func (c *current) onTagRanges46() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges46()
}

func (c *current) onTagRanges52() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges52()
}

func (c *current) onTagRanges55(stars any) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges55(stack["stars"])
}

func (c *current) onTagRanges49(stars any) (any, error) {
	return stars, nil

}

func (p *parser) callonTagRanges49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges49(stack["stars"])
}

func (c *current) onTagRanges43(tag any) (any, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges43(stack["tag"])
}

func (c *current) onTagRanges61() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges61()
}

func (c *current) onTagRanges67() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges67() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges67()
}

func (c *current) onTagRanges70(stars any) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges70(stack["stars"])
}

func (c *current) onTagRanges64(stars any) (any, error) {
	return stars, nil

}

func (p *parser) callonTagRanges64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges64(stack["stars"])
}

func (c *current) onTagRanges56(tag any) (any, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges56(stack["tag"])
}

func (c *current) onTagRanges38(other any) (any, error) {
	return other, nil

}

func (p *parser) callonTagRanges38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges38(stack["other"])
}

func (c *current) onTagRanges4(first, others any) (any, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonTagRanges4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges4(stack["first"], stack["others"])
}

func (c *current) onTagRanges1(value any) (any, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onIncludedFileLine11() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine11()
}

func (c *current) onIncludedFileLine10() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine10()
}

func (c *current) onIncludedFileLine6(tag any) (any, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileLine6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine6(stack["tag"])
}

func (c *current) onIncludedFileLine20() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine20()
}

func (c *current) onIncludedFileLine19() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine19()
}

func (c *current) onIncludedFileLine15(tag any) (any, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileLine15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine15(stack["tag"])
}

func (c *current) onIncludedFileLine24() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine24()
}

func (c *current) onIncludedFileLine27() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine27()
}

func (c *current) onIncludedFileLine1(content any) (any, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onDocumentFragment8(attributes any) error {
	if attributes, ok := attributes.(types.Attributes); ok {
		c.storeBlockAttributes(attributes)
	}
	return nil

}

func (p *parser) callonDocumentFragment8() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment8(stack["attributes"])
}

func (c *current) onDocumentFragment20() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment20()
}

func (c *current) onDocumentFragment27() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment27()
}

func (c *current) onDocumentFragment30() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment30()
}

func (c *current) onDocumentFragment16(name any) (any, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentFragment16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment16(stack["name"])
}

func (c *current) onDocumentFragment41() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment41()
}

func (c *current) onDocumentFragment48() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment48()
}

func (c *current) onDocumentFragment51() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment51()
}

func (c *current) onDocumentFragment37(name any) (any, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentFragment37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment37(stack["name"])
}

func (c *current) onDocumentFragment63() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment63()
}

func (c *current) onDocumentFragment66() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment66()
}

func (c *current) onDocumentFragment58() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment58()
}

func (c *current) onDocumentFragment80() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment80() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment80()
}

func (c *current) onDocumentFragment86() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment86() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment86()
}

func (c *current) onDocumentFragment89() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment89() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment89()
}

func (c *current) onDocumentFragment77(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment77() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment77(stack["delimiter"])
}

func (c *current) onDocumentFragment105() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment105() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment105()
}

func (c *current) onDocumentFragment111() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment111()
}

func (c *current) onDocumentFragment114() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment114()
}

func (c *current) onDocumentFragment102(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment102(stack["delimiter"])
}

func (c *current) onDocumentFragment129() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment129() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment129()
}

func (c *current) onDocumentFragment133() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment133() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment133()
}

func (c *current) onDocumentFragment124(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment124() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment124(stack["content"])
}

func (c *current) onDocumentFragment98(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment98() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment98(stack["line"])
}

func (c *current) onDocumentFragment145() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment145() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment145()
}

func (c *current) onDocumentFragment151() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment151() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment151()
}

func (c *current) onDocumentFragment154() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment154() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment154()
}

func (c *current) onDocumentFragment142(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment142() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment142(stack["delimiter"])
}

func (c *current) onDocumentFragment75(delimiter, content any) (any, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentFragment75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment75(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentFragment169() (any, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment169() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment169()
}

func (c *current) onDocumentFragment175() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment175() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment175()
}

func (c *current) onDocumentFragment178() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment178() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment178()
}

func (c *current) onDocumentFragment166(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment166() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment166(stack["delimiter"])
}

func (c *current) onDocumentFragment185(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment185() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment185(stack["start"])
}

func (c *current) onDocumentFragment197() (any, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment197() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment197()
}

func (c *current) onDocumentFragment203() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment203() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment203()
}

func (c *current) onDocumentFragment206() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment206() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment206()
}

func (c *current) onDocumentFragment194(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment194(stack["delimiter"])
}

func (c *current) onDocumentFragment213(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment213() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment213(stack["end"])
}

func (c *current) onDocumentFragment222() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment222() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment222()
}

func (c *current) onDocumentFragment226() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment226() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment226()
}

func (c *current) onDocumentFragment217(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment217() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment217(stack["content"])
}

func (c *current) onDocumentFragment188(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment188() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment188(stack["line"])
}

func (c *current) onDocumentFragment241() (any, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment241() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment241()
}

func (c *current) onDocumentFragment247() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment247() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment247()
}

func (c *current) onDocumentFragment250() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment250() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment250()
}

func (c *current) onDocumentFragment238(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment238() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment238(stack["delimiter"])
}

func (c *current) onDocumentFragment257(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment257() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment257(stack["end"])
}

func (c *current) onDocumentFragment163(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonDocumentFragment163() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment163(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment267() (any, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment267() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment267()
}

func (c *current) onDocumentFragment271() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment271() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment271()
}

func (c *current) onDocumentFragment274() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment274() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment274()
}

func (c *current) onDocumentFragment263(language any) (any, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonDocumentFragment263() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment263(stack["language"])
}

func (c *current) onDocumentFragment289() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment289() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment289()
}

func (c *current) onDocumentFragment292() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment292() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment292()
}

func (c *current) onDocumentFragment305() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment305() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment305()
}

func (c *current) onDocumentFragment309() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment309() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment309()
}

func (c *current) onDocumentFragment300(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment300() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment300(stack["content"])
}

func (c *current) onDocumentFragment283(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment283() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment283(stack["line"])
}

func (c *current) onDocumentFragment320() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment320() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment320()
}

func (c *current) onDocumentFragment323() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment323() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment323()
}

func (c *current) onDocumentFragment260(delimiter, content any) (any, error) {
	// Markdown code with fences is a "listing/source" block in Asciidoc
	b, err := types.NewDelimitedBlock(types.Listing, content.([]interface{}))
	b.AddAttributes(delimiter.(*types.BlockDelimiter).Attributes)
	return b, err

}

func (p *parser) callonDocumentFragment260() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment260(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentFragment336() (any, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment336() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment336()
}

func (c *current) onDocumentFragment342() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment342() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment342()
}

func (c *current) onDocumentFragment345() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment345() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment345()
}

func (c *current) onDocumentFragment333(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment333() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment333(stack["delimiter"])
}

func (c *current) onDocumentFragment352(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment352() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment352(stack["start"])
}

func (c *current) onDocumentFragment364() (any, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment364() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment364()
}

func (c *current) onDocumentFragment370() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment370() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment370()
}

func (c *current) onDocumentFragment373() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment373() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment373()
}

func (c *current) onDocumentFragment361(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment361() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment361(stack["delimiter"])
}

func (c *current) onDocumentFragment380(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment380() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment380(stack["end"])
}

func (c *current) onDocumentFragment389() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment389() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment389()
}

func (c *current) onDocumentFragment393() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment393() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment393()
}

func (c *current) onDocumentFragment384(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment384() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment384(stack["content"])
}

func (c *current) onDocumentFragment355(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment355() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment355(stack["line"])
}

func (c *current) onDocumentFragment408() (any, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment408() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment408()
}

func (c *current) onDocumentFragment414() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment414() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment414()
}

func (c *current) onDocumentFragment417() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment417() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment417()
}

func (c *current) onDocumentFragment405(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment405() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment405(stack["delimiter"])
}

func (c *current) onDocumentFragment424(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment424() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment424(stack["end"])
}

func (c *current) onDocumentFragment330(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonDocumentFragment330() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment330(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment433() (any, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment433() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment433()
}

func (c *current) onDocumentFragment439() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment439() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment439()
}

func (c *current) onDocumentFragment442() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment442() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment442()
}

func (c *current) onDocumentFragment430(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment430() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment430(stack["delimiter"])
}

func (c *current) onDocumentFragment449(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment449() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment449(stack["start"])
}

func (c *current) onDocumentFragment461() (any, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment461() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment461()
}

func (c *current) onDocumentFragment467() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment467() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment467()
}

func (c *current) onDocumentFragment470() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment470() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment470()
}

func (c *current) onDocumentFragment458(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment458() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment458(stack["delimiter"])
}

func (c *current) onDocumentFragment477(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment477() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment477(stack["end"])
}

func (c *current) onDocumentFragment486() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment486() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment486()
}

func (c *current) onDocumentFragment490() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment490() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment490()
}

func (c *current) onDocumentFragment481(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment481() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment481(stack["content"])
}

func (c *current) onDocumentFragment452(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment452() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment452(stack["line"])
}

func (c *current) onDocumentFragment505() (any, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment505() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment505()
}

func (c *current) onDocumentFragment511() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment511() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment511()
}

func (c *current) onDocumentFragment514() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment514() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment514()
}

func (c *current) onDocumentFragment502(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment502() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment502(stack["delimiter"])
}

func (c *current) onDocumentFragment521(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment521() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment521(stack["end"])
}

func (c *current) onDocumentFragment427(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonDocumentFragment427() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment427(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment530() (any, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment530() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment530()
}

func (c *current) onDocumentFragment536() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment536() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment536()
}

func (c *current) onDocumentFragment539() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment539() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment539()
}

func (c *current) onDocumentFragment527(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment527() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment527(stack["delimiter"])
}

func (c *current) onDocumentFragment546(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment546() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment546(stack["start"])
}

func (c *current) onDocumentFragment558() (any, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment558() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment558()
}

func (c *current) onDocumentFragment564() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment564() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment564()
}

func (c *current) onDocumentFragment567() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment567() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment567()
}

func (c *current) onDocumentFragment555(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment555() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment555(stack["delimiter"])
}

func (c *current) onDocumentFragment574(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment574() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment574(stack["end"])
}

func (c *current) onDocumentFragment583() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment583() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment583()
}

func (c *current) onDocumentFragment587() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment587() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment587()
}

func (c *current) onDocumentFragment578(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment578() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment578(stack["content"])
}

func (c *current) onDocumentFragment549(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment549() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment549(stack["line"])
}

func (c *current) onDocumentFragment602() (any, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment602() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment602()
}

func (c *current) onDocumentFragment608() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment608() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment608()
}

func (c *current) onDocumentFragment611() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment611() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment611()
}

func (c *current) onDocumentFragment599(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment599() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment599(stack["delimiter"])
}

func (c *current) onDocumentFragment618(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment618() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment618(stack["end"])
}

func (c *current) onDocumentFragment524(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonDocumentFragment524() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment524(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment632() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment632() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment632()
}

func (c *current) onDocumentFragment635() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment635() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment635()
}

func (c *current) onDocumentFragment627() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment627() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment627()
}

func (c *current) onDocumentFragment644() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment644() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment644()
}

func (c *current) onDocumentFragment648() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment648() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment648()
}

func (c *current) onDocumentFragment624(content any) (any, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment624() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment624(stack["content"])
}

func (c *current) onDocumentFragment666() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment666() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment666()
}

func (c *current) onDocumentFragment669() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment669() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment669()
}

func (c *current) onDocumentFragment661() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment661() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment661()
}

func (c *current) onDocumentFragment678() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment678() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment678()
}

func (c *current) onDocumentFragment682() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment682() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment682()
}

func (c *current) onDocumentFragment658(content any) (any, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment658() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment658(stack["content"])
}

func (c *current) onDocumentFragment692() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment692() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment692()
}

func (c *current) onDocumentFragment695(content any) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonDocumentFragment695() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment695(stack["content"])
}

func (c *current) onDocumentFragment697() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment697() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment697()
}

func (c *current) onDocumentFragment689(content any) (any, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment689() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment689(stack["content"])
}

func (c *current) onDocumentFragment621(firstLine, otherLines any) (any, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment621() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment621(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment710() (any, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment710() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment710()
}

func (c *current) onDocumentFragment713() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment713() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment713()
}

func (c *current) onDocumentFragment716() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment716() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment716()
}

func (c *current) onDocumentFragment707(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment707() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment707(stack["delimiter"])
}

func (c *current) onDocumentFragment732() (any, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment732() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment732()
}

func (c *current) onDocumentFragment735() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment735() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment735()
}

func (c *current) onDocumentFragment738() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment738() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment738()
}

func (c *current) onDocumentFragment729(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment729() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment729(stack["delimiter"])
}

func (c *current) onDocumentFragment753() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment753() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment753()
}

func (c *current) onDocumentFragment757() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment757() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment757()
}

func (c *current) onDocumentFragment748(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment748() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment748(stack["content"])
}

func (c *current) onDocumentFragment725(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment725() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment725(stack["line"])
}

func (c *current) onDocumentFragment770() (any, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment770() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment770()
}

func (c *current) onDocumentFragment773() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment773() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment773()
}

func (c *current) onDocumentFragment776() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment776() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment776()
}

func (c *current) onDocumentFragment767(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment767() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment767(stack["delimiter"])
}

func (c *current) onDocumentFragment704(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Open, content.([]interface{}))

}

func (p *parser) callonDocumentFragment704() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment704(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment791() (any, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment791() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment791()
}

func (c *current) onDocumentFragment797() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment797() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment797()
}

func (c *current) onDocumentFragment800() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment800() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment800()
}

func (c *current) onDocumentFragment788(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment788() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment788(stack["delimiter"])
}

func (c *current) onDocumentFragment807(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment807() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment807(stack["start"])
}

func (c *current) onDocumentFragment819() (any, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment819() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment819()
}

func (c *current) onDocumentFragment825() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment825() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment825()
}

func (c *current) onDocumentFragment828() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment828() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment828()
}

func (c *current) onDocumentFragment816(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment816() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment816(stack["delimiter"])
}

func (c *current) onDocumentFragment835(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment835() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment835(stack["end"])
}

func (c *current) onDocumentFragment844() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment844() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment844()
}

func (c *current) onDocumentFragment848() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment848() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment848()
}

func (c *current) onDocumentFragment839(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment839() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment839(stack["content"])
}

func (c *current) onDocumentFragment810(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment810() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment810(stack["line"])
}

func (c *current) onDocumentFragment863() (any, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment863() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment863()
}

func (c *current) onDocumentFragment869() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment869() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment869()
}

func (c *current) onDocumentFragment872() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment872() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment872()
}

func (c *current) onDocumentFragment860(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment860() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment860(stack["delimiter"])
}

func (c *current) onDocumentFragment879(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment879() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment879(stack["end"])
}

func (c *current) onDocumentFragment785(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonDocumentFragment785() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment785(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment888() (any, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment888() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment888()
}

func (c *current) onDocumentFragment894() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment894() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment894()
}

func (c *current) onDocumentFragment897() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment897() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment897()
}

func (c *current) onDocumentFragment885(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment885() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment885(stack["delimiter"])
}

func (c *current) onDocumentFragment904(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment904() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment904(stack["start"])
}

func (c *current) onDocumentFragment916() (any, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment916() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment916()
}

func (c *current) onDocumentFragment922() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment922() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment922()
}

func (c *current) onDocumentFragment925() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment925() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment925()
}

func (c *current) onDocumentFragment913(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment913() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment913(stack["delimiter"])
}

func (c *current) onDocumentFragment932(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment932() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment932(stack["end"])
}

func (c *current) onDocumentFragment941() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment941() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment941()
}

func (c *current) onDocumentFragment945() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment945() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment945()
}

func (c *current) onDocumentFragment936(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment936() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment936(stack["content"])
}

func (c *current) onDocumentFragment907(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment907() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment907(stack["line"])
}

func (c *current) onDocumentFragment960() (any, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment960() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment960()
}

func (c *current) onDocumentFragment966() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment966() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment966()
}

func (c *current) onDocumentFragment969() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment969() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment969()
}

func (c *current) onDocumentFragment957(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment957() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment957(stack["delimiter"])
}

func (c *current) onDocumentFragment976(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment976() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment976(stack["end"])
}

func (c *current) onDocumentFragment882(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonDocumentFragment882() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment882(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment985() (any, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment985() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment985()
}

func (c *current) onDocumentFragment991() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment991() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment991()
}

func (c *current) onDocumentFragment994() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment994() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment994()
}

func (c *current) onDocumentFragment982(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment982() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment982(stack["delimiter"])
}

func (c *current) onDocumentFragment1001(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment1001() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1001(stack["start"])
}

func (c *current) onDocumentFragment1013() (any, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1013() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1013()
}

func (c *current) onDocumentFragment1019() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1019() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1019()
}

func (c *current) onDocumentFragment1022() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1022() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1022()
}

func (c *current) onDocumentFragment1010(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment1010() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1010(stack["delimiter"])
}

func (c *current) onDocumentFragment1029(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment1029() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1029(stack["end"])
}

func (c *current) onDocumentFragment1038() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1038() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1038()
}

func (c *current) onDocumentFragment1042() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1042() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1042()
}

func (c *current) onDocumentFragment1033(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1033() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1033(stack["content"])
}

func (c *current) onDocumentFragment1004(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1004() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1004(stack["line"])
}

func (c *current) onDocumentFragment1057() (any, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1057() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1057()
}

func (c *current) onDocumentFragment1063() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1063() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1063()
}

func (c *current) onDocumentFragment1066() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1066() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1066()
}

func (c *current) onDocumentFragment1054(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment1054() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1054(stack["delimiter"])
}

func (c *current) onDocumentFragment1073(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment1073() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1073(stack["end"])
}

func (c *current) onDocumentFragment979(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonDocumentFragment979() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment979(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment1087() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1087() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1087()
}

func (c *current) onDocumentFragment1090() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1090() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1090()
}

func (c *current) onDocumentFragment1098() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1098() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1098()
}

func (c *current) onDocumentFragment1076() (any, error) {

	return types.NewThematicBreak()

}

func (p *parser) callonDocumentFragment1076() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1076()
}

func (c *current) onDocumentFragment1110() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1110() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1110()
}

func (c *current) onDocumentFragment1113() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1113() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1113()
}

func (c *current) onDocumentFragment1128() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1128() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1128()
}

func (c *current) onDocumentFragment1131() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1131() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1131()
}

func (c *current) onDocumentFragment1123() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1123()
}

func (c *current) onDocumentFragment1145() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1145() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1145()
}

func (c *current) onDocumentFragment1148() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1148() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1148()
}

func (c *current) onDocumentFragment1171() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1171() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1171()
}

func (c *current) onDocumentFragment1174() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1174() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1174()
}

func (c *current) onDocumentFragment1189() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1189() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1189()
}

func (c *current) onDocumentFragment1192() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1192() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1192()
}

func (c *current) onDocumentFragment1184() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1184() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1184()
}

func (c *current) onDocumentFragment1200() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1200() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1200()
}

func (c *current) onDocumentFragment1204() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1204() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1204()
}

func (c *current) onDocumentFragment1211() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1211() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1211()
}

func (c *current) onDocumentFragment1215() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1215()
}

func (c *current) onDocumentFragment1229() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1229() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1229()
}

func (c *current) onDocumentFragment1232() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1232()
}

func (c *current) onDocumentFragment1247() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1247() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1247()
}

func (c *current) onDocumentFragment1250() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1250() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1250()
}

func (c *current) onDocumentFragment1242() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1242() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1242()
}

func (c *current) onDocumentFragment1261() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1261() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1261()
}

func (c *current) onDocumentFragment1264() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1264() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1264()
}

func (c *current) onDocumentFragment1271() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1271() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1271()
}

func (c *current) onDocumentFragment1284() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1284() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1284()
}

func (c *current) onDocumentFragment1292() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1292() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1292()
}

func (c *current) onDocumentFragment1294() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1294() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1294()
}

func (c *current) onDocumentFragment1222(content, eol any) (any, error) {
	rl, err := types.NewRawLine(content.(string))
	if err != nil {
		return nil, err
	}
	if eol != nil {
		rl.EOL = true
	}
	return rl, nil

}

func (p *parser) callonDocumentFragment1222() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1222(stack["content"], stack["eol"])
}

func (c *current) onDocumentFragment1164(format, eol, content any) (any, error) {
	cl := content.([]interface{})
	if len(cl) == 0 && eol != nil {
		rl, _ := types.NewRawLine("")
		rl.EOL = true
		cl = append(cl, rl)
	}
	return types.NewMultilineTableCell(cl, format)

}

func (p *parser) callonDocumentFragment1164() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1164(stack["format"], stack["eol"], stack["content"])
}

func (c *current) onDocumentFragment1161(cells any) (any, error) {
	return cells, nil
}

func (p *parser) callonDocumentFragment1161() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1161(stack["cells"])
}

func (c *current) onDocumentFragment1159(cells any) (any, error) {
	var rows []*types.TableRow
	var cs []interface{}
	ci := cells.([]interface{})

	for _, c := range ci {
		cs = append(cs, c)
		switch mlc := c.(type) {
		case *types.TableCell:
			if len(mlc.Elements) == 0 {
				continue
			}
			switch rl := mlc.Elements[len(mlc.Elements)-1].(type) {
			case *types.RawLine:
				if rl.EOL {
					tr, err := types.NewTableRow(cs)
					if err != nil {
						return nil, err
					}
					rows = append(rows, tr)
					cs = make([]interface{}, 0)
					continue
				}

			}
		}

	}
	if len(cs) > 0 {
		tr, err := types.NewTableRow(cs)
		if err != nil {
			return nil, err
		}
		rows = append(rows, tr)
	}
	if len(rows) == 1 {
		return rows[0], nil
	}

	return rows, nil

}

func (p *parser) callonDocumentFragment1159() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1159(stack["cells"])
}

func (c *current) onDocumentFragment1306() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1306() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1306()
}

func (c *current) onDocumentFragment1309() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1309() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1309()
}

func (c *current) onDocumentFragment1301() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1301() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1301()
}

func (c *current) onDocumentFragment1138(content any) (any, error) {
	return content, nil

}

func (p *parser) callonDocumentFragment1138() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1138(stack["content"])
}

func (c *current) onDocumentFragment1320() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1320() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1320()
}

func (c *current) onDocumentFragment1323() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1323() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1323()
}

func (c *current) onDocumentFragment1106(lines any) (any, error) {
	return types.NewTable(lines.([]interface{}))

}

func (p *parser) callonDocumentFragment1106() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1106(stack["lines"])
}

func (c *current) onDocumentFragment1338() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1338() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1338()
}

func (c *current) onDocumentFragment1342() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1342() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1342()
}

func (c *current) onDocumentFragment1332(content any) (any, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentFragment1332() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1332(stack["content"])
}

func (c *current) onDocumentFragment1351() (bool, error) {
	return c.isFrontMatterAllowed(), nil

}

func (p *parser) callonDocumentFragment1351() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1351()
}

func (c *current) onDocumentFragment1357() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1357() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1357()
}

func (c *current) onDocumentFragment1360() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1360() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1360()
}

func (c *current) onDocumentFragment1377() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1377() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1377()
}

func (c *current) onDocumentFragment1380() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1380() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1380()
}

func (c *current) onDocumentFragment1369() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1369() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1369()
}

func (c *current) onDocumentFragment1390() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1390() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1390()
}

func (c *current) onDocumentFragment1393() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1393() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1393()
}

func (c *current) onDocumentFragment1353(content any) (any, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonDocumentFragment1353() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1353(stack["content"])
}

func (c *current) onDocumentFragment1349(frontmatter any) (any, error) {
	return frontmatter, nil

}

func (p *parser) callonDocumentFragment1349() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1349(stack["frontmatter"])
}

func (c *current) onDocumentFragment1401(attributes, element any) (bool, error) {
	// there must be at least `attributes` or `element`
	return attributes != nil || element != nil, nil

}

func (p *parser) callonDocumentFragment1401() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1401(stack["attributes"], stack["element"])
}

func (c *current) onDocumentFragment1(attributes, element any) (any, error) {
	c.disableFrontMatterRule()           // not allowed as soon as a single element is found
	c.disableDocumentHeaderRule(element) // not allowed anymore, based on element that was found

	if attributes != nil {
		if wa, ok := element.(types.WithAttributes); ok {
			wa.AddAttributes(attributes.(types.Attributes))
		}
	}

	return element, nil

}

func (p *parser) callonDocumentFragment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1(stack["attributes"], stack["element"])
}

func (c *current) onDelimitedBlockElements3() error {
	c.globalStore[withinDelimitedBlockKey] = true
	return nil

}

func (p *parser) callonDelimitedBlockElements3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements3()
}

func (c *current) onDelimitedBlockElements11() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlockElements11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements11()
}

func (c *current) onDelimitedBlockElements7(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDelimitedBlockElements7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements7(stack["ref"])
}

func (c *current) onDelimitedBlockElements1(elements any) (any, error) {
	return elements, nil

}

func (p *parser) callonDelimitedBlockElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements1(stack["elements"])
}

func (c *current) onAttributeDeclaration5() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclaration5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration5()
}

func (c *current) onAttributeDeclaration15() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclaration15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration15()
}

func (c *current) onAttributeDeclaration13(value any) (any, error) {
	return value, nil

}

func (p *parser) callonAttributeDeclaration13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration13(stack["value"])
}

func (c *current) onAttributeDeclaration21() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclaration21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration21()
}

func (c *current) onAttributeDeclaration1(name, value any) (any, error) {
	return types.NewAttributeDeclaration(name.(string), value, string(c.text))

}

func (p *parser) callonAttributeDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeDeclarationValue10() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue10()
}

func (c *current) onAttributeDeclarationValue16() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue16()
}

func (c *current) onAttributeDeclarationValue7(elements any) (any, error) {

	return elements, nil

}

func (p *parser) callonAttributeDeclarationValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue7(stack["elements"])
}

func (c *current) onAttributeDeclarationValue1(elements, otherElements any) (any, error) {
	if otherElements, ok := otherElements.([]interface{}); ok {
		elements = append(elements.([]interface{}), otherElements...)
	}
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"], stack["otherElements"])
}

func (c *current) onAttributeDeclarationValueElements1(elements any) (any, error) {
	return elements.([]interface{}), nil

}

func (p *parser) callonAttributeDeclarationValueElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElements1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement8() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement8()
}

func (c *current) onAttributeDeclarationValueElement11() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValueElement11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement21() (any, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement21()
}

func (c *current) onAttributeDeclarationValueElement26() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonAttributeDeclarationValueElement26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement26()
}

func (c *current) onAttributeDeclarationValueElement28() (any, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement28()
}

func (c *current) onAttributeDeclarationValueElement24(element any) (any, error) {
	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement24(stack["element"])
}

func (c *current) onAttributeDeclarationValueElement30() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement30()
}

func (c *current) onAttributeDeclarationValueElement34() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonAttributeDeclarationValueElement34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement34()
}

func (c *current) onAttributeDeclarationValueElement41() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement41()
}

func (c *current) onAttributeDeclarationValueElement37(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonAttributeDeclarationValueElement37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement37(stack["name"])
}

func (c *current) onAttributeDeclarationValueElement51() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement51()
}

func (c *current) onAttributeDeclarationValueElement47(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement47(stack["name"])
}

func (c *current) onAttributeDeclarationValueElement61() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement61()
}

func (c *current) onAttributeDeclarationValueElement73() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement73()
}

func (c *current) onAttributeDeclarationValueElement75() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement75()
}

func (c *current) onAttributeDeclarationValueElement68(start any) (any, error) {
	return start, nil

}

func (p *parser) callonAttributeDeclarationValueElement68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement68(stack["start"])
}

func (c *current) onAttributeDeclarationValueElement57(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonAttributeDeclarationValueElement57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement57(stack["name"], stack["start"])
}

func (c *current) onAttributeDeclarationValueElement83() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement83() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement83()
}

func (c *current) onAttributeDeclarationValueElement95() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement95()
}

func (c *current) onAttributeDeclarationValueElement97() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement97() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement97()
}

func (c *current) onAttributeDeclarationValueElement90(start any) (any, error) {
	return start, nil

}

func (p *parser) callonAttributeDeclarationValueElement90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement90(stack["start"])
}

func (c *current) onAttributeDeclarationValueElement79(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonAttributeDeclarationValueElement79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement79(stack["name"], stack["start"])
}

func (c *current) onAttributeDeclarationValueElement32(element any) (any, error) {
	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement32(stack["element"])
}

func (c *current) onAttributeDeclarationValueElement1(element any) (any, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("new AttributeDeclarationValueElement: %s", spew.Sdump(element))
	}
	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onBlockAttributes16() (any, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes16()
}

func (c *current) onBlockAttributes23() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23()
}

func (c *current) onBlockAttributes19(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["ref"])
}

func (c *current) onBlockAttributes29() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonBlockAttributes29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes29()
}

func (c *current) onBlockAttributes36() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes36()
}

func (c *current) onBlockAttributes32(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonBlockAttributes32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes32(stack["name"])
}

func (c *current) onBlockAttributes46() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes46()
}

func (c *current) onBlockAttributes42(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonBlockAttributes42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes42(stack["name"])
}

func (c *current) onBlockAttributes56() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes56()
}

func (c *current) onBlockAttributes68() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes68()
}

func (c *current) onBlockAttributes70() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes70()
}

func (c *current) onBlockAttributes63(start any) (any, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes63(stack["start"])
}

func (c *current) onBlockAttributes52(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonBlockAttributes52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes52(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes78() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes78()
}

func (c *current) onBlockAttributes90() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes90()
}

func (c *current) onBlockAttributes92() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes92()
}

func (c *current) onBlockAttributes85(start any) (any, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes85(stack["start"])
}

func (c *current) onBlockAttributes74(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonBlockAttributes74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes74(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes27(element any) (any, error) {
	return element, nil

}

func (p *parser) callonBlockAttributes27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes27(stack["element"])
}

func (c *current) onBlockAttributes96() (any, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes96()
}

func (c *current) onBlockAttributes12(elements any) (any, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["elements"])
}

func (c *current) onBlockAttributes8(id any) (any, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonBlockAttributes8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes8(stack["id"])
}

func (c *current) onBlockAttributes100() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes100()
}

func (c *current) onBlockAttributes103() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes103() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes103()
}

func (c *current) onBlockAttributes116() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes116() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes116()
}

func (c *current) onBlockAttributes119() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes119() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes119()
}

func (c *current) onBlockAttributes111() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes111()
}

func (c *current) onBlockAttributes5(anchor any) (any, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes137() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes137() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes137()
}

func (c *current) onBlockAttributes140() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes140() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes140()
}

func (c *current) onBlockAttributes146() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes), nil

}

func (p *parser) callonBlockAttributes146() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes146()
}

func (c *current) onBlockAttributes150() (bool, error) {

	return c.isSubstitutionDisabled(Quotes), nil

}

func (p *parser) callonBlockAttributes150() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes150()
}

func (c *current) onBlockAttributes142() (any, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes142() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes142()
}

func (c *current) onBlockAttributes160() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes160() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes160()
}

func (c *current) onBlockAttributes156(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonBlockAttributes156() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes156(stack["name"])
}

func (c *current) onBlockAttributes170() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes170() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes170()
}

func (c *current) onBlockAttributes166(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonBlockAttributes166() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes166(stack["name"])
}

func (c *current) onBlockAttributes176() (any, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("matching anychar '%s' at position %v", string(c.text), c.pos.String())
	}
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes176() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes176()
}

func (c *current) onBlockAttributes129(elements any) (any, error) {
	return types.NewTitleAttribute(types.Reduce(elements, strings.TrimSpace))

}

func (p *parser) callonBlockAttributes129() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes129(stack["elements"])
}

func (c *current) onBlockAttributes179() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes179() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes179()
}

func (c *current) onBlockAttributes182() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes182() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes182()
}

func (c *current) onBlockAttributes195() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes195()
}

func (c *current) onBlockAttributes198() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes198() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes198()
}

func (c *current) onBlockAttributes190() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes190() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes190()
}

func (c *current) onBlockAttributes126(title any) (any, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes126() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes126(stack["title"])
}

func (c *current) onBlockAttributes210() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes210() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes210()
}

func (c *current) onBlockAttributes213() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes213() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes213()
}

func (c *current) onBlockAttributes226() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes226() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes226()
}

func (c *current) onBlockAttributes229() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes229() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes229()
}

func (c *current) onBlockAttributes221() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes221() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes221()
}

func (c *current) onBlockAttributes205(attributes any) (any, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes205() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes205(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes any) (any, error) {
	// c.unsetCurrentSubstitution()
	return types.MergeAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute any) (any, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes any) (any, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes any) (any, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes8(extra any) (any, error) {
	return extra, nil

}

func (p *parser) callonFirstPositionalAttributes8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes8(stack["extra"])
}

func (c *current) onFirstPositionalAttributes23() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonFirstPositionalAttributes23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes23()
}

func (c *current) onFirstPositionalAttributes25(main, extras any) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes25(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras any) (any, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id any) (any, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value any) (any, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role any) (any, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option any) (any, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue10() (any, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue10()
}

func (c *current) onShortHandAttributeValue15() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonShortHandAttributeValue15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue22() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue22()
}

func (c *current) onShortHandAttributeValue18(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonShortHandAttributeValue18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue18(stack["name"])
}

func (c *current) onShortHandAttributeValue32() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue32()
}

func (c *current) onShortHandAttributeValue28(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonShortHandAttributeValue28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue28(stack["name"])
}

func (c *current) onShortHandAttributeValue42() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue42()
}

func (c *current) onShortHandAttributeValue54() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue54()
}

func (c *current) onShortHandAttributeValue56() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonShortHandAttributeValue56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue56()
}

func (c *current) onShortHandAttributeValue49(start any) (any, error) {
	return start, nil

}

func (p *parser) callonShortHandAttributeValue49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue49(stack["start"])
}

func (c *current) onShortHandAttributeValue38(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonShortHandAttributeValue38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue38(stack["name"], stack["start"])
}

func (c *current) onShortHandAttributeValue64() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue64()
}

func (c *current) onShortHandAttributeValue76() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue76() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue76()
}

func (c *current) onShortHandAttributeValue78() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonShortHandAttributeValue78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue78()
}

func (c *current) onShortHandAttributeValue71(start any) (any, error) {
	return start, nil

}

func (p *parser) callonShortHandAttributeValue71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue71(stack["start"])
}

func (c *current) onShortHandAttributeValue60(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonShortHandAttributeValue60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue60(stack["name"], stack["start"])
}

func (c *current) onShortHandAttributeValue13(element any) (any, error) {
	return element, nil

}

func (p *parser) callonShortHandAttributeValue13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue13(stack["element"])
}

func (c *current) onShortHandAttributeValue82() (any, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue82() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue82()
}

func (c *current) onShortHandAttributeValue88() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue88()
}

func (c *current) onShortHandAttributeValue4(elements any) (any, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute11() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute11()
}

func (c *current) onPositionalAttribute2(value any) (any, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute20() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute20()
}

func (c *current) onPositionalAttribute26() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute26()
}

func (c *current) onPositionalAttribute30(value any) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute30(stack["value"])
}

func (c *current) onPositionalAttribute15(value any) (any, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute15(stack["value"])
}

func (c *current) onNamedAttribute7() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonNamedAttribute7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute7()
}

func (c *current) onNamedAttribute4() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute4()
}

func (c *current) onNamedAttribute13() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonNamedAttribute13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute13()
}

func (c *current) onNamedAttribute21() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonNamedAttribute21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute21()
}

func (c *current) onNamedAttribute1(key, value any) (any, error) {
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeValue12() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeValue12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue12()
}

func (c *current) onAttributeValue1(value any) (any, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue1(content any) (any, error) {
	return content, nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["content"])
}

func (c *current) onSingleQuotedAttributeValueContent5() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent5()
}

func (c *current) onSingleQuotedAttributeValueContent8() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent8()
}

func (c *current) onSingleQuotedAttributeValueContent13() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent13()
}

func (c *current) onSingleQuotedAttributeValueContent20() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent20()
}

func (c *current) onSingleQuotedAttributeValueContent16(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuotedAttributeValueContent16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent16(stack["name"])
}

func (c *current) onSingleQuotedAttributeValueContent30() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent30()
}

func (c *current) onSingleQuotedAttributeValueContent26(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent26(stack["name"])
}

func (c *current) onSingleQuotedAttributeValueContent40() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent40()
}

func (c *current) onSingleQuotedAttributeValueContent52() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent52()
}

func (c *current) onSingleQuotedAttributeValueContent54() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent54()
}

func (c *current) onSingleQuotedAttributeValueContent47(start any) (any, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent47(stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent36(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuotedAttributeValueContent36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent36(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent62() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent62()
}

func (c *current) onSingleQuotedAttributeValueContent74() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent74()
}

func (c *current) onSingleQuotedAttributeValueContent76() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent76() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent76()
}

func (c *current) onSingleQuotedAttributeValueContent69(start any) (any, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent69() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent69(stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent58(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuotedAttributeValueContent58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent58(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent11(element any) (any, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent11(stack["element"])
}

func (c *current) onSingleQuotedAttributeValueContent80() (any, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonSingleQuotedAttributeValueContent80() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent80()
}

func (c *current) onSingleQuotedAttributeValueContent84() (any, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonSingleQuotedAttributeValueContent84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent84()
}

func (c *current) onSingleQuotedAttributeValueContent86() (any, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent86() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent86()
}

func (c *current) onSingleQuotedAttributeValueContent1(elements any) (any, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue13() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue13()
}

func (c *current) onDoubleQuotedAttributeValue1(content any) (any, error) {
	return content, nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["content"])
}

func (c *current) onDoubleQuotedAttributeValueContent5() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent5()
}

func (c *current) onDoubleQuotedAttributeValueContent8() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent8()
}

func (c *current) onDoubleQuotedAttributeValueContent13() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent13()
}

func (c *current) onDoubleQuotedAttributeValueContent20() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent20()
}

func (c *current) onDoubleQuotedAttributeValueContent16(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuotedAttributeValueContent16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent16(stack["name"])
}

func (c *current) onDoubleQuotedAttributeValueContent30() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent30()
}

func (c *current) onDoubleQuotedAttributeValueContent26(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent26(stack["name"])
}

func (c *current) onDoubleQuotedAttributeValueContent40() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent40()
}

func (c *current) onDoubleQuotedAttributeValueContent52() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent52()
}

func (c *current) onDoubleQuotedAttributeValueContent54() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent54()
}

func (c *current) onDoubleQuotedAttributeValueContent47(start any) (any, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent47(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent36(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuotedAttributeValueContent36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent62() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent62()
}

func (c *current) onDoubleQuotedAttributeValueContent74() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent74()
}

func (c *current) onDoubleQuotedAttributeValueContent76() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent76() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent76()
}

func (c *current) onDoubleQuotedAttributeValueContent69(start any) (any, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent69() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent69(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent58(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuotedAttributeValueContent58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent11(element any) (any, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent11(stack["element"])
}

func (c *current) onDoubleQuotedAttributeValueContent80() (any, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonDoubleQuotedAttributeValueContent80() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent80()
}

func (c *current) onDoubleQuotedAttributeValueContent85() (any, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonDoubleQuotedAttributeValueContent85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent85()
}

func (c *current) onDoubleQuotedAttributeValueContent87() (any, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent87()
}

func (c *current) onDoubleQuotedAttributeValueContent1(elements any) (any, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue4() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue4()
}

func (c *current) onUnquotedAttributeValue15() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonUnquotedAttributeValue15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue15()
}

func (c *current) onUnquotedAttributeValue22() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue22()
}

func (c *current) onUnquotedAttributeValue18(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonUnquotedAttributeValue18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue18(stack["name"])
}

func (c *current) onUnquotedAttributeValue32() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue32()
}

func (c *current) onUnquotedAttributeValue28(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonUnquotedAttributeValue28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue28(stack["name"])
}

func (c *current) onUnquotedAttributeValue42() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue42()
}

func (c *current) onUnquotedAttributeValue54() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue54()
}

func (c *current) onUnquotedAttributeValue56() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue56()
}

func (c *current) onUnquotedAttributeValue49(start any) (any, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue49(stack["start"])
}

func (c *current) onUnquotedAttributeValue38(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonUnquotedAttributeValue38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue38(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue64() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue64()
}

func (c *current) onUnquotedAttributeValue76() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue76() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue76()
}

func (c *current) onUnquotedAttributeValue78() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue78()
}

func (c *current) onUnquotedAttributeValue71(start any) (any, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue71(stack["start"])
}

func (c *current) onUnquotedAttributeValue60(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonUnquotedAttributeValue60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue60(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue13(element any) (any, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue13(stack["element"])
}

func (c *current) onUnquotedAttributeValue83() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue83() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue83()
}

func (c *current) onUnquotedAttributeValue85() (any, error) {
	// not within brackets and stop on space and quotation marks (`"')
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue85()
}

func (c *current) onUnquotedAttributeValue1(elements any) (any, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onCrossReference6() (any, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference6()
}

func (c *current) onCrossReference10() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonCrossReference10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference10()
}

func (c *current) onCrossReference16() (any, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference16()
}

func (c *current) onCrossReference25() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference25()
}

func (c *current) onCrossReference21(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonCrossReference21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference21(stack["name"])
}

func (c *current) onCrossReference35() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference35()
}

func (c *current) onCrossReference31(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonCrossReference31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference31(stack["name"])
}

func (c *current) onCrossReference41() (any, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference41()
}

func (c *current) onCrossReference2(id, label any) (any, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonCrossReference2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference48() (any, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference48()
}

func (c *current) onCrossReference44(id any) (any, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonCrossReference44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference44(stack["id"])
}

func (c *current) onExternalCrossReference11() (any, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference11()
}

func (c *current) onExternalCrossReference22() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference22()
}

func (c *current) onExternalCrossReference29() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonExternalCrossReference29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference29()
}

func (c *current) onExternalCrossReference36() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference36()
}

func (c *current) onExternalCrossReference32(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalCrossReference32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference32(stack["name"])
}

func (c *current) onExternalCrossReference46() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference46()
}

func (c *current) onExternalCrossReference42(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonExternalCrossReference42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference42(stack["name"])
}

func (c *current) onExternalCrossReference56() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference56()
}

func (c *current) onExternalCrossReference68() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference68()
}

func (c *current) onExternalCrossReference70() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference70()
}

func (c *current) onExternalCrossReference63(start any) (any, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference63(stack["start"])
}

func (c *current) onExternalCrossReference52(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalCrossReference52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference52(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference78() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference78()
}

func (c *current) onExternalCrossReference90() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference90()
}

func (c *current) onExternalCrossReference92() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference92()
}

func (c *current) onExternalCrossReference85(start any) (any, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference85(stack["start"])
}

func (c *current) onExternalCrossReference74(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalCrossReference74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference74(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference27(element any) (any, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference27(stack["element"])
}

func (c *current) onExternalCrossReference100() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference100()
}

func (c *current) onExternalCrossReference96(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalCrossReference96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference96(stack["ref"])
}

func (c *current) onExternalCrossReference104() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference104() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference104()
}

func (c *current) onExternalCrossReference7(elements any) (any, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalCrossReference7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference7(stack["elements"])
}

func (c *current) onExternalCrossReference5(path any) (any, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonExternalCrossReference5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference5(stack["path"])
}

func (c *current) onExternalCrossReference1(url, attributes any) (any, error) {
	return types.NewExternalCrossReference(url.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["attributes"])
}

func (c *current) onMarkdownQuoteAttribution5() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution9() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonMarkdownQuoteAttribution9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution9()
}

func (c *current) onMarkdownQuoteAttribution1(author any) (any, error) {
	return author, nil

}

func (p *parser) callonMarkdownQuoteAttribution1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onDocumentHeader3() (bool, error) {
	return c.isDocumentHeaderAllowed(), nil

}

func (p *parser) callonDocumentHeader3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader3()
}

func (c *current) onDocumentHeader12() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader12()
}

func (c *current) onDocumentHeader16() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader16()
}

func (c *current) onDocumentHeader6(content any) (any, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentHeader6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader6(stack["content"])
}

func (c *current) onDocumentHeader28() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader28()
}

func (c *current) onDocumentHeader34() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader34()
}

func (c *current) onDocumentHeader37() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader37()
}

func (c *current) onDocumentHeader25(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader25(stack["delimiter"])
}

func (c *current) onDocumentHeader53() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader53()
}

func (c *current) onDocumentHeader59() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader59()
}

func (c *current) onDocumentHeader62() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader62()
}

func (c *current) onDocumentHeader50(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader50(stack["delimiter"])
}

func (c *current) onDocumentHeader77() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader77() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader77()
}

func (c *current) onDocumentHeader81() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader81() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader81()
}

func (c *current) onDocumentHeader72(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader72(stack["content"])
}

func (c *current) onDocumentHeader46(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader46(stack["line"])
}

func (c *current) onDocumentHeader93() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader93() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader93()
}

func (c *current) onDocumentHeader99() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader99() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader99()
}

func (c *current) onDocumentHeader102() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader102()
}

func (c *current) onDocumentHeader90(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader90(stack["delimiter"])
}

func (c *current) onDocumentHeader23(delimiter, content any) (any, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader23(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader121() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader121() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader121()
}

func (c *current) onDocumentHeader125() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader125() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader125()
}

func (c *current) onDocumentHeader115(content any) (any, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentHeader115() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader115(stack["content"])
}

func (c *current) onDocumentHeader137() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader137() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader137()
}

func (c *current) onDocumentHeader143() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader143() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader143()
}

func (c *current) onDocumentHeader146() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader146() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader146()
}

func (c *current) onDocumentHeader134(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader134(stack["delimiter"])
}

func (c *current) onDocumentHeader162() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader162() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader162()
}

func (c *current) onDocumentHeader168() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader168() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader168()
}

func (c *current) onDocumentHeader171() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader171() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader171()
}

func (c *current) onDocumentHeader159(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader159() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader159(stack["delimiter"])
}

func (c *current) onDocumentHeader186() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader186() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader186()
}

func (c *current) onDocumentHeader190() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader190() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader190()
}

func (c *current) onDocumentHeader181(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader181() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader181(stack["content"])
}

func (c *current) onDocumentHeader155(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader155(stack["line"])
}

func (c *current) onDocumentHeader202() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader202() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader202()
}

func (c *current) onDocumentHeader208() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader208() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader208()
}

func (c *current) onDocumentHeader211() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader211() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader211()
}

func (c *current) onDocumentHeader199(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader199() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader199(stack["delimiter"])
}

func (c *current) onDocumentHeader132(delimiter, content any) (any, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader132() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader132(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader230() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader230() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader230()
}

func (c *current) onDocumentHeader241() (any, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader241() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader241()
}

func (c *current) onDocumentHeader245() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader245() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader245()
}

func (c *current) onDocumentHeader249() (any, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader249() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader249()
}

func (c *current) onDocumentHeader253() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader253() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader253()
}

func (c *current) onDocumentHeader257() (any, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader257() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader257()
}

func (c *current) onDocumentHeader261() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader261() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader261()
}

func (c *current) onDocumentHeader238(part1, part2, part3 any) (any, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentHeader238() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader238(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentHeader271() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader271() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader271()
}

func (c *current) onDocumentHeader265(email any) (any, error) {
	return email, nil

}

func (p *parser) callonDocumentHeader265() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader265(stack["email"])
}

func (c *current) onDocumentHeader276() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader276() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader276()
}

func (c *current) onDocumentHeader281() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader281() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader281()
}

func (c *current) onDocumentHeader283(fullName, email any) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentHeader283() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader283(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader234(fullName, email any) (any, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentHeader234() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader234(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader285() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader285() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader285()
}

func (c *current) onDocumentHeader227(authors any) (any, error) {
	return types.NewDocumentAuthors(authors.([]interface{})...)
}

func (p *parser) callonDocumentHeader227() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader227(stack["authors"])
}

func (c *current) onDocumentHeader300() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader300() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader300()
}

func (c *current) onDocumentHeader304() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader304() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader304()
}

func (c *current) onDocumentHeader294(content any) (any, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentHeader294() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader294(stack["content"])
}

func (c *current) onDocumentHeader316() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader316() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader316()
}

func (c *current) onDocumentHeader322() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader322() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader322()
}

func (c *current) onDocumentHeader325() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader325() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader325()
}

func (c *current) onDocumentHeader313(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader313() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader313(stack["delimiter"])
}

func (c *current) onDocumentHeader341() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader341() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader341()
}

func (c *current) onDocumentHeader347() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader347() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader347()
}

func (c *current) onDocumentHeader350() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader350() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader350()
}

func (c *current) onDocumentHeader338(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader338() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader338(stack["delimiter"])
}

func (c *current) onDocumentHeader365() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader365() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader365()
}

func (c *current) onDocumentHeader369() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader369() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader369()
}

func (c *current) onDocumentHeader360(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader360() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader360(stack["content"])
}

func (c *current) onDocumentHeader334(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader334() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader334(stack["line"])
}

func (c *current) onDocumentHeader381() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader381() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader381()
}

func (c *current) onDocumentHeader387() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader387() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader387()
}

func (c *current) onDocumentHeader390() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader390() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader390()
}

func (c *current) onDocumentHeader378(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader378() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader378(stack["delimiter"])
}

func (c *current) onDocumentHeader311(delimiter, content any) (any, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader311() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader311(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader404() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader404() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader404()
}

func (c *current) onDocumentHeader414() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader414() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader414()
}

func (c *current) onDocumentHeader428() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader428() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader428()
}

func (c *current) onDocumentHeader420() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader420() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader420()
}

func (c *current) onDocumentHeader436() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader436() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader436()
}

func (c *current) onDocumentHeader443() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader443() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader443()
}

func (c *current) onDocumentHeader410(revnumber, revdate, revremark any) (any, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentHeader410() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader410(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentHeader449() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader449() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader449()
}

func (c *current) onDocumentHeader456() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader456() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader456()
}

func (c *current) onDocumentHeader446(revdate, revremark any) (any, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentHeader446() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader446(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentHeader460() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader460() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader460()
}

func (c *current) onDocumentHeader401(revision any) (any, error) {
	return revision, nil
}

func (p *parser) callonDocumentHeader401() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader401(stack["revision"])
}

func (c *current) onDocumentHeader222(authors, revision any) (any, error) {
	return types.NewDocumentAuthorsAndRevision(authors.(types.DocumentAuthors), revision)

}

func (p *parser) callonDocumentHeader222() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader222(stack["authors"], stack["revision"])
}

func (c *current) onDocumentHeader475() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader475() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader475()
}

func (c *current) onDocumentHeader482() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader482() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader482()
}

func (c *current) onDocumentHeader485() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader485() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader485()
}

func (c *current) onDocumentHeader471(name any) (any, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentHeader471() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader471(stack["name"])
}

func (c *current) onDocumentHeader496() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader496() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader496()
}

func (c *current) onDocumentHeader503() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader503() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader503()
}

func (c *current) onDocumentHeader506() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader506() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader506()
}

func (c *current) onDocumentHeader492(name any) (any, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentHeader492() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader492(stack["name"])
}

func (c *current) onDocumentHeader519() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader519() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader519()
}

func (c *current) onDocumentHeader523() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader523() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader523()
}

func (c *current) onDocumentHeader513(content any) (any, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentHeader513() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader513(stack["content"])
}

func (c *current) onDocumentHeader535() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader535() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader535()
}

func (c *current) onDocumentHeader541() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader541() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader541()
}

func (c *current) onDocumentHeader544() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader544() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader544()
}

func (c *current) onDocumentHeader532(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader532() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader532(stack["delimiter"])
}

func (c *current) onDocumentHeader560() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader560() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader560()
}

func (c *current) onDocumentHeader566() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader566() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader566()
}

func (c *current) onDocumentHeader569() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader569() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader569()
}

func (c *current) onDocumentHeader557(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader557() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader557(stack["delimiter"])
}

func (c *current) onDocumentHeader584() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader584() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader584()
}

func (c *current) onDocumentHeader588() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader588() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader588()
}

func (c *current) onDocumentHeader579(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader579() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader579(stack["content"])
}

func (c *current) onDocumentHeader553(line any) (any, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader553() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader553(stack["line"])
}

func (c *current) onDocumentHeader600() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader600() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader600()
}

func (c *current) onDocumentHeader606() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader606() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader606()
}

func (c *current) onDocumentHeader609() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader609() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader609()
}

func (c *current) onDocumentHeader597(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader597() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader597(stack["delimiter"])
}

func (c *current) onDocumentHeader530(delimiter, content any) (any, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader530() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader530(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader1(title, authorsAndRevision, extraElements any) (any, error) {
	return types.NewDocumentHeader(title.([]interface{}), authorsAndRevision, extraElements.([]interface{}))

}

func (p *parser) callonDocumentHeader1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["authorsAndRevision"], stack["extraElements"])
}

func (c *current) onDocumentTitle4() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentTitle4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle4()
}

func (c *current) onDocumentTitle10() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentTitle10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle10()
}

func (c *current) onDocumentTitle1(title any) (any, error) {
	return title, nil

}

func (p *parser) callonDocumentTitle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"])
}

func (c *current) onDocumentAuthorFullName4() (any, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName4()
}

func (c *current) onDocumentAuthorFullName8() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName8()
}

func (c *current) onDocumentAuthorFullName12() (any, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName12()
}

func (c *current) onDocumentAuthorFullName16() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName16()
}

func (c *current) onDocumentAuthorFullName20() (any, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName20()
}

func (c *current) onDocumentAuthorFullName24() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName24()
}

func (c *current) onDocumentAuthorFullName1(part1, part2, part3 any) (any, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentAuthorFullName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName1(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onInlineButton3() (bool, error) {
	return c.isExperimentalEnabled(), nil

}

func (p *parser) callonInlineButton3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineButton3()
}

func (c *current) onInlineButton1(attributes any) (any, error) {
	return types.NewInlineButton(attributes.(types.Attributes))

}

func (p *parser) callonInlineButton1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineButton1(stack["attributes"])
}

func (c *current) onInlineMenu3() (bool, error) {
	return c.isExperimentalEnabled(), nil

}

func (p *parser) callonInlineMenu3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMenu3()
}

func (c *current) onInlineMenu6() (any, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMenu6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMenu6()
}

func (c *current) onInlineMenu1(id, attributes any) (any, error) {
	return types.NewInlineMenu(id.(string), attributes.(types.Attributes))

}

func (p *parser) callonInlineMenu1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMenu1(stack["id"], stack["attributes"])
}

func (c *current) onIndexTerm1(term any) (any, error) {
	return types.NewIndexTerm(term.([]interface{}))

}

func (p *parser) callonIndexTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent5() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent5()
}

func (c *current) onIndexTermContent9() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonIndexTermContent9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent13() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonIndexTermContent13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent13()
}

func (c *current) onIndexTermContent15() (any, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonIndexTermContent15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent15()
}

func (c *current) onIndexTermContent11(element any) (any, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11(stack["element"])
}

func (c *current) onIndexTermContent21() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent21()
}

func (c *current) onIndexTermContent17(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonIndexTermContent17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent17(stack["ref"])
}

func (c *current) onIndexTermContent25() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent25()
}

func (c *current) onIndexTermContent1(elements any) (any, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onImageBlock9() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock9()
}

func (c *current) onImageBlock21() (any, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below
	return string(c.text), nil

}

func (p *parser) callonImageBlock21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock21()
}

func (c *current) onImageBlock32() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonImageBlock32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock32()
}

func (c *current) onImageBlock39() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonImageBlock39() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock39()
}

func (c *current) onImageBlock46() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock46()
}

func (c *current) onImageBlock42(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonImageBlock42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock42(stack["name"])
}

func (c *current) onImageBlock56() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock56()
}

func (c *current) onImageBlock52(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonImageBlock52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock52(stack["name"])
}

func (c *current) onImageBlock66() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock66()
}

func (c *current) onImageBlock78() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock78()
}

func (c *current) onImageBlock80() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock80() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock80()
}

func (c *current) onImageBlock73(start any) (any, error) {
	return start, nil

}

func (p *parser) callonImageBlock73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock73(stack["start"])
}

func (c *current) onImageBlock62(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonImageBlock62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock62(stack["name"], stack["start"])
}

func (c *current) onImageBlock88() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock88()
}

func (c *current) onImageBlock100() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock100()
}

func (c *current) onImageBlock102() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock102()
}

func (c *current) onImageBlock95(start any) (any, error) {
	return start, nil

}

func (p *parser) callonImageBlock95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock95(stack["start"])
}

func (c *current) onImageBlock84(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonImageBlock84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock84(stack["name"], stack["start"])
}

func (c *current) onImageBlock37(element any) (any, error) {
	return element, nil

}

func (p *parser) callonImageBlock37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock37(stack["element"])
}

func (c *current) onImageBlock110() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock110() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock110()
}

func (c *current) onImageBlock106(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonImageBlock106() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock106(stack["ref"])
}

func (c *current) onImageBlock114() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock114()
}

func (c *current) onImageBlock17(elements any) (any, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonImageBlock17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock17(stack["elements"])
}

func (c *current) onImageBlock5(scheme, path any) (any, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonImageBlock5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock5(stack["scheme"], stack["path"])
}

func (c *current) onImageBlock119() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonImageBlock119() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock119()
}

func (c *current) onImageBlock122() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonImageBlock122() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock122()
}

func (c *current) onImageBlock1(path, attributes any) (any, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonImageBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage11() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage11()
}

func (c *current) onInlineImage23() (any, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below
	return string(c.text), nil

}

func (p *parser) callonInlineImage23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage23()
}

func (c *current) onInlineImage34() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineImage34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage34()
}

func (c *current) onInlineImage41() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonInlineImage41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage41()
}

func (c *current) onInlineImage48() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage48()
}

func (c *current) onInlineImage44(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineImage44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage44(stack["name"])
}

func (c *current) onInlineImage58() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage58()
}

func (c *current) onInlineImage54(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonInlineImage54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage54(stack["name"])
}

func (c *current) onInlineImage68() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage68()
}

func (c *current) onInlineImage80() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage80() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage80()
}

func (c *current) onInlineImage82() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage82() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage82()
}

func (c *current) onInlineImage75(start any) (any, error) {
	return start, nil

}

func (p *parser) callonInlineImage75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage75(stack["start"])
}

func (c *current) onInlineImage64(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonInlineImage64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage64(stack["name"], stack["start"])
}

func (c *current) onInlineImage90() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage90()
}

func (c *current) onInlineImage102() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage102()
}

func (c *current) onInlineImage104() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage104() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage104()
}

func (c *current) onInlineImage97(start any) (any, error) {
	return start, nil

}

func (p *parser) callonInlineImage97() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage97(stack["start"])
}

func (c *current) onInlineImage86(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonInlineImage86() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage86(stack["name"], stack["start"])
}

func (c *current) onInlineImage39(element any) (any, error) {
	return element, nil

}

func (p *parser) callonInlineImage39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage39(stack["element"])
}

func (c *current) onInlineImage112() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage112() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage112()
}

func (c *current) onInlineImage108(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineImage108() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage108(stack["ref"])
}

func (c *current) onInlineImage116() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage116() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage116()
}

func (c *current) onInlineImage19(elements any) (any, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineImage19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage19(stack["elements"])
}

func (c *current) onInlineImage7(scheme, path any) (any, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonInlineImage7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage7(stack["scheme"], stack["path"])
}

func (c *current) onInlineImage1(path, attributes any) (any, error) {
	return types.NewInlineImage(path.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonInlineImage1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineIcon5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes any) (any, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote6() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineFootnote6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote6()
}

func (c *current) onInlineFootnote1(ref, elements any) (any, error) {
	// TODO: use only this rule with `ref:(FootnoteRef)?`
	return types.NewFootnote(ref, elements.([]interface{}))

}

func (p *parser) callonInlineFootnote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote1(stack["ref"], stack["elements"])
}

func (c *current) onFootnoteElements1(elements any) (any, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElements1(stack["elements"])
}

func (c *current) onFootnoteElement10() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement10()
}

func (c *current) onFootnoteElement16() (bool, error) {
	return c.isInlineMacro(string(c.text)), nil

}

func (p *parser) callonFootnoteElement16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement16()
}

func (c *current) onFootnoteElement7(text any) (any, error) {
	log.Debugf("new text: '%v'", string(c.text))
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFootnoteElement7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement7(stack["text"])
}

func (c *current) onFootnoteElement21() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement21()
}

func (c *current) onFootnoteElement24() (any, error) {
	//log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonFootnoteElement24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement24()
}

func (c *current) onFootnoteElement31() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonFootnoteElement31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement31()
}

func (c *current) onFootnoteElement32() (bool, error) {
	//log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonFootnoteElement32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement32()
}

func (c *current) onFootnoteElement29() (any, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonFootnoteElement29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement29()
}

func (c *current) onFootnoteElement42() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes), nil

}

func (p *parser) callonFootnoteElement42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement42()
}

func (c *current) onFootnoteElement46() (bool, error) {

	return c.isSubstitutionDisabled(Quotes), nil

}

func (p *parser) callonFootnoteElement46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement46()
}

func (c *current) onFootnoteElement38() (any, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement38()
}

func (c *current) onFootnoteElement55() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements), nil

}

func (p *parser) callonFootnoteElement55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement55()
}

func (c *current) onFootnoteElement57() (bool, error) {

	log.Debug("LineBreak")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonFootnoteElement57() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement57()
}

func (c *current) onFootnoteElement59() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonFootnoteElement59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement59()
}

func (c *current) onFootnoteElement63() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFootnoteElement63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement63()
}

func (c *current) onFootnoteElement53() (any, error) {
	return types.NewLineBreak()

}

func (p *parser) callonFootnoteElement53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement53()
}

func (c *current) onFootnoteElement72() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonFootnoteElement72() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement72()
}

func (c *current) onFootnoteElement79() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement79()
}

func (c *current) onFootnoteElement75(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFootnoteElement75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement75(stack["name"])
}

func (c *current) onFootnoteElement89() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement89() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement89()
}

func (c *current) onFootnoteElement85(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonFootnoteElement85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement85(stack["name"])
}

func (c *current) onFootnoteElement99() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement99() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement99()
}

func (c *current) onFootnoteElement111() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement111()
}

func (c *current) onFootnoteElement113() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFootnoteElement113() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement113()
}

func (c *current) onFootnoteElement106(start any) (any, error) {
	return start, nil

}

func (p *parser) callonFootnoteElement106() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement106(stack["start"])
}

func (c *current) onFootnoteElement95(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFootnoteElement95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement95(stack["name"], stack["start"])
}

func (c *current) onFootnoteElement121() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement121() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement121()
}

func (c *current) onFootnoteElement133() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement133() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement133()
}

func (c *current) onFootnoteElement135() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFootnoteElement135() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement135()
}

func (c *current) onFootnoteElement128(start any) (any, error) {
	return start, nil

}

func (p *parser) callonFootnoteElement128() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement128(stack["start"])
}

func (c *current) onFootnoteElement117(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFootnoteElement117() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement117(stack["name"], stack["start"])
}

func (c *current) onFootnoteElement70(element any) (any, error) {
	return element, nil

}

func (p *parser) callonFootnoteElement70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement70(stack["element"])
}

func (c *current) onFootnoteElement141() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonFootnoteElement141() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement141()
}

func (c *current) onFootnoteElement143() (any, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFootnoteElement143() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement143()
}

func (c *current) onFootnoteElement139(element any) (any, error) {
	return element, nil

}

func (p *parser) callonFootnoteElement139() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement139(stack["element"])
}

func (c *current) onFootnoteElement145() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFootnoteElement145() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement145()
}

func (c *current) onFootnoteElement150() (any, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("matching anychar '%s' at position %v", string(c.text), c.pos.String())
	}
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement150() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement150()
}

func (c *current) onFootnoteElement1(element any) (any, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonFootnoteElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement1(stack["element"])
}

func (c *current) onPassthroughMacro7() (any, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro7()
}

func (c *current) onPassthroughMacro2(content any) (any, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro17() (any, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro17()
}

func (c *current) onPassthroughMacro10(content any) (any, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro10(stack["content"])
}

func (c *current) onLink11() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLink11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink11()
}

func (c *current) onLink23() (any, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below
	return string(c.text), nil

}

func (p *parser) callonLink23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink23()
}

func (c *current) onLink34() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonLink34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink34()
}

func (c *current) onLink41() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonLink41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink41()
}

func (c *current) onLink48() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonLink48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink48()
}

func (c *current) onLink44(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLink44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink44(stack["name"])
}

func (c *current) onLink58() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonLink58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink58()
}

func (c *current) onLink54(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLink54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink54(stack["name"])
}

func (c *current) onLink68() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonLink68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink68()
}

func (c *current) onLink80() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonLink80() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink80()
}

func (c *current) onLink82() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLink82() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink82()
}

func (c *current) onLink75(start any) (any, error) {
	return start, nil

}

func (p *parser) callonLink75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink75(stack["start"])
}

func (c *current) onLink64(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLink64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink64(stack["name"], stack["start"])
}

func (c *current) onLink90() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonLink90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink90()
}

func (c *current) onLink102() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonLink102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink102()
}

func (c *current) onLink104() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLink104() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink104()
}

func (c *current) onLink97(start any) (any, error) {
	return start, nil

}

func (p *parser) callonLink97() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink97(stack["start"])
}

func (c *current) onLink86(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLink86() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink86(stack["name"], stack["start"])
}

func (c *current) onLink39(element any) (any, error) {
	return element, nil

}

func (p *parser) callonLink39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink39(stack["element"])
}

func (c *current) onLink112() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLink112() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink112()
}

func (c *current) onLink108(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonLink108() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink108(stack["ref"])
}

func (c *current) onLink116() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonLink116() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink116()
}

func (c *current) onLink19(elements any) (any, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLink19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink19(stack["elements"])
}

func (c *current) onLink6(scheme, path any) (any, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLink6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink6(stack["scheme"], stack["path"])
}

func (c *current) onLink2(url any) (any, error) {

	return types.NewInlineLink(url.(*types.Location), nil)

}

func (p *parser) callonLink2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink2(stack["url"])
}

func (c *current) onLink127() (any, error) {
	// `'
	return string(c.text), nil

}

func (p *parser) callonLink127() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink127()
}

func (c *current) onLink130(local any) (bool, error) {
	// must not start or end with `.` nor contain `..`
	return !strings.HasPrefix(local.(string), ".") &&
		!strings.HasSuffix(local.(string), ".") &&
		!strings.Contains(local.(string), ".."), nil

}

func (p *parser) callonLink130() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink130(stack["local"])
}

func (c *current) onLink124(local any) (any, error) {
	return local, nil

}

func (p *parser) callonLink124() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink124(stack["local"])
}

func (c *current) onLink136() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonLink136() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink136()
}

func (c *current) onLink145(domain any) (bool, error) {
	// must not end with `-`
	return !strings.HasSuffix(domain.(string), "-"), nil

}

func (p *parser) callonLink145() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink145(stack["domain"])
}

func (c *current) onLink133(domain any) (any, error) {
	return domain, nil

}

func (p *parser) callonLink133() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink133(stack["domain"])
}

func (c *current) onLink121(local, domain any) (any, error) {
	return types.NewEmailAddressLink(local.(string) + "@" + domain.(string))
}

func (p *parser) callonLink121() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink121(stack["local"], stack["domain"])
}

func (c *current) onRelativeLink10() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink10()
}

func (c *current) onRelativeLink22() (any, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below
	return string(c.text), nil

}

func (p *parser) callonRelativeLink22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink22()
}

func (c *current) onRelativeLink33() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonRelativeLink33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink33()
}

func (c *current) onRelativeLink40() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonRelativeLink40() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink40()
}

func (c *current) onRelativeLink47() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink47()
}

func (c *current) onRelativeLink43(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink43(stack["name"])
}

func (c *current) onRelativeLink57() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink57()
}

func (c *current) onRelativeLink53(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink53(stack["name"])
}

func (c *current) onRelativeLink67() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink67() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink67()
}

func (c *current) onRelativeLink79() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink79()
}

func (c *current) onRelativeLink81() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink81() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink81()
}

func (c *current) onRelativeLink74(start any) (any, error) {
	return start, nil

}

func (p *parser) callonRelativeLink74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink74(stack["start"])
}

func (c *current) onRelativeLink63(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonRelativeLink63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink63(stack["name"], stack["start"])
}

func (c *current) onRelativeLink89() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink89() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink89()
}

func (c *current) onRelativeLink101() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink101() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink101()
}

func (c *current) onRelativeLink103() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink103() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink103()
}

func (c *current) onRelativeLink96(start any) (any, error) {
	return start, nil

}

func (p *parser) callonRelativeLink96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink96(stack["start"])
}

func (c *current) onRelativeLink85(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonRelativeLink85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink85(stack["name"], stack["start"])
}

func (c *current) onRelativeLink38(element any) (any, error) {
	return element, nil

}

func (p *parser) callonRelativeLink38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink38(stack["element"])
}

func (c *current) onRelativeLink111() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink111()
}

func (c *current) onRelativeLink107(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink107() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink107(stack["ref"])
}

func (c *current) onRelativeLink115() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink115() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink115()
}

func (c *current) onRelativeLink18(elements any) (any, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink18(stack["elements"])
}

func (c *current) onRelativeLink6(scheme, path any) (any, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink6(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink2(url, attributes any) (any, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink2(stack["url"], stack["attributes"])
}

func (c *current) onRelativeLink127() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink127() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink127()
}

func (c *current) onRelativeLink139() (any, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below
	return string(c.text), nil

}

func (p *parser) callonRelativeLink139() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink139()
}

func (c *current) onRelativeLink150() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonRelativeLink150() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink150()
}

func (c *current) onRelativeLink157() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonRelativeLink157() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink157()
}

func (c *current) onRelativeLink164() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink164() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink164()
}

func (c *current) onRelativeLink160(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink160() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink160(stack["name"])
}

func (c *current) onRelativeLink174() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink174() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink174()
}

func (c *current) onRelativeLink170(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink170() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink170(stack["name"])
}

func (c *current) onRelativeLink184() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink184() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink184()
}

func (c *current) onRelativeLink196() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink196() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink196()
}

func (c *current) onRelativeLink198() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink198() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink198()
}

func (c *current) onRelativeLink191(start any) (any, error) {
	return start, nil

}

func (p *parser) callonRelativeLink191() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink191(stack["start"])
}

func (c *current) onRelativeLink180(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonRelativeLink180() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink180(stack["name"], stack["start"])
}

func (c *current) onRelativeLink206() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink206() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink206()
}

func (c *current) onRelativeLink218() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink218() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink218()
}

func (c *current) onRelativeLink220() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink220()
}

func (c *current) onRelativeLink213(start any) (any, error) {
	return start, nil

}

func (p *parser) callonRelativeLink213() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink213(stack["start"])
}

func (c *current) onRelativeLink202(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonRelativeLink202() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink202(stack["name"], stack["start"])
}

func (c *current) onRelativeLink155(element any) (any, error) {
	return element, nil

}

func (p *parser) callonRelativeLink155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink155(stack["element"])
}

func (c *current) onRelativeLink228() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink228() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink228()
}

func (c *current) onRelativeLink224(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink224() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink224(stack["ref"])
}

func (c *current) onRelativeLink232() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink232()
}

func (c *current) onRelativeLink135(elements any) (any, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink135() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink135(stack["elements"])
}

func (c *current) onRelativeLink123(scheme, path any) (any, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink123(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink119(url, attributes any) (any, error) {
	return types.NewInlineLink(url.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonRelativeLink119() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink119(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink11() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink11()
}

func (c *current) onExternalLink23() (any, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below
	return string(c.text), nil

}

func (p *parser) callonExternalLink23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink23()
}

func (c *current) onExternalLink34() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExternalLink34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink34()
}

func (c *current) onExternalLink41() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonExternalLink41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink41()
}

func (c *current) onExternalLink48() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink48()
}

func (c *current) onExternalLink44(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink44(stack["name"])
}

func (c *current) onExternalLink58() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink58()
}

func (c *current) onExternalLink54(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonExternalLink54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink54(stack["name"])
}

func (c *current) onExternalLink68() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink68()
}

func (c *current) onExternalLink80() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink80() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink80()
}

func (c *current) onExternalLink82() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink82() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink82()
}

func (c *current) onExternalLink75(start any) (any, error) {
	return start, nil

}

func (p *parser) callonExternalLink75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink75(stack["start"])
}

func (c *current) onExternalLink64(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalLink64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink64(stack["name"], stack["start"])
}

func (c *current) onExternalLink90() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink90()
}

func (c *current) onExternalLink102() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink102()
}

func (c *current) onExternalLink104() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink104() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink104()
}

func (c *current) onExternalLink97(start any) (any, error) {
	return start, nil

}

func (p *parser) callonExternalLink97() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink97(stack["start"])
}

func (c *current) onExternalLink86(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalLink86() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink86(stack["name"], stack["start"])
}

func (c *current) onExternalLink39(element any) (any, error) {
	return element, nil

}

func (p *parser) callonExternalLink39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink39(stack["element"])
}

func (c *current) onExternalLink112() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink112() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink112()
}

func (c *current) onExternalLink108(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalLink108() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink108(stack["ref"])
}

func (c *current) onExternalLink116() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink116() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink116()
}

func (c *current) onExternalLink19(elements any) (any, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink19(stack["elements"])
}

func (c *current) onExternalLink6(scheme, path any) (any, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink6(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink2(url, attributes any) (any, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink2(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink129() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink129() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink129()
}

func (c *current) onExternalLink141() (any, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below
	return string(c.text), nil

}

func (p *parser) callonExternalLink141() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink141()
}

func (c *current) onExternalLink152() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExternalLink152() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink152()
}

func (c *current) onExternalLink159() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonExternalLink159() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink159()
}

func (c *current) onExternalLink166() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink166() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink166()
}

func (c *current) onExternalLink162(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink162() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink162(stack["name"])
}

func (c *current) onExternalLink176() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink176() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink176()
}

func (c *current) onExternalLink172(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonExternalLink172() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink172(stack["name"])
}

func (c *current) onExternalLink186() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink186() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink186()
}

func (c *current) onExternalLink198() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink198() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink198()
}

func (c *current) onExternalLink200() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink200() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink200()
}

func (c *current) onExternalLink193(start any) (any, error) {
	return start, nil

}

func (p *parser) callonExternalLink193() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink193(stack["start"])
}

func (c *current) onExternalLink182(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalLink182() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink182(stack["name"], stack["start"])
}

func (c *current) onExternalLink208() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink208() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink208()
}

func (c *current) onExternalLink220() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink220()
}

func (c *current) onExternalLink222() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink222() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink222()
}

func (c *current) onExternalLink215(start any) (any, error) {
	return start, nil

}

func (p *parser) callonExternalLink215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink215(stack["start"])
}

func (c *current) onExternalLink204(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalLink204() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink204(stack["name"], stack["start"])
}

func (c *current) onExternalLink157(element any) (any, error) {
	return element, nil

}

func (p *parser) callonExternalLink157() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink157(stack["element"])
}

func (c *current) onExternalLink230() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink230() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink230()
}

func (c *current) onExternalLink226(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalLink226() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink226(stack["ref"])
}

func (c *current) onExternalLink234() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink234() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink234()
}

func (c *current) onExternalLink137(elements any) (any, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink137() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink137(stack["elements"])
}

func (c *current) onExternalLink124(scheme, path any) (any, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink124() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink124(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink121(url, attributes any) (any, error) {
	return types.NewInlineLink(url.(*types.Location), attributes)

}

func (p *parser) callonExternalLink121() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink121(stack["url"], stack["attributes"])
}

func (c *current) onListElements11() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements11()
}

func (c *current) onListElements18() (any, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements18()
}

func (c *current) onListElements21(depth any) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements21(stack["depth"])
}

func (c *current) onListElements15(depth any) (any, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements15(stack["depth"])
}

func (c *current) onListElements22() (any, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements22()
}

func (c *current) onListElements27() (any, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements27()
}

func (c *current) onListElements31() (any, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements31()
}

func (c *current) onListElements35() (any, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements35()
}

func (c *current) onListElements40() (any, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements40()
}

func (c *current) onListElements45(prefix any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements45(stack["prefix"])
}

func (c *current) onListElements8(prefix any) (any, error) {
	return prefix, nil
}

func (p *parser) callonListElements8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements8(stack["prefix"])
}

func (c *current) onListElements53() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements53()
}

func (c *current) onListElements57() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements57()
}

func (c *current) onListElements49(rawLines any) (any, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListElements49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements49(stack["rawLines"])
}

func (c *current) onListElements5(prefix, content any) (any, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElements5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements5(stack["prefix"], stack["content"])
}

func (c *current) onListElements70() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements70()
}

func (c *current) onListElements73() (any, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonListElements73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements73()
}

func (c *current) onListElements78(style any) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonListElements78() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements78(stack["style"])
}

func (c *current) onListElements79(style any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements79(stack["style"])
}

func (c *current) onListElements67(style any) (any, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonListElements67() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements67(stack["style"])
}

func (c *current) onListElements90() (any, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElements90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements90()
}

func (c *current) onListElements92() (any, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements92()
}

func (c *current) onListElements94() (any, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements94() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements94()
}

func (c *current) onListElements96(style any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements96(stack["style"])
}

func (c *current) onListElements84(style any) (any, error) {
	return style, nil

}

func (p *parser) callonListElements84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements84(stack["style"])
}

func (c *current) onListElements104() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements104() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements104()
}

func (c *current) onListElements108() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements108() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements108()
}

func (c *current) onListElements100(rawLines any) (any, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListElements100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements100(stack["rawLines"])
}

func (c *current) onListElements64(prefix, checkstyle, content any) (any, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElements64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements64(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElements122() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements122() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements122()
}

func (c *current) onListElements126(ref any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements126() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements126(stack["ref"])
}

func (c *current) onListElements118(ref any) (any, error) {
	return ref, nil

}

func (p *parser) callonListElements118() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements118(stack["ref"])
}

func (c *current) onListElements134() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements134()
}

func (c *current) onListElements138() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements138() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements138()
}

func (c *current) onListElements130(rawLines any) (any, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListElements130() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements130(stack["rawLines"])
}

func (c *current) onListElements115(ref, description any) (any, error) {
	return types.NewCalloutListElement(ref.(int), description.(*types.Paragraph))

}

func (p *parser) callonListElements115() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements115(stack["ref"], stack["description"])
}

func (c *current) onListElements155() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements155() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements155()
}

func (c *current) onListElements158(separator any) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements158() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements158(stack["separator"])
}

func (c *current) onListElements152(separator any) (any, error) {
	return separator, nil

}

func (p *parser) callonListElements152() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements152(stack["separator"])
}

func (c *current) onListElements161() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements161() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements161()
}

func (c *current) onListElements148() (any, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElements148() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements148()
}

func (c *current) onListElements173() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements173() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements173()
}

func (c *current) onListElements176(separator any) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements176() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements176(stack["separator"])
}

func (c *current) onListElements170(separator any) (any, error) {
	return separator, nil

}

func (p *parser) callonListElements170() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements170(stack["separator"])
}

func (c *current) onListElements182() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements182() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements182()
}

func (c *current) onListElements185() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements185() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements185()
}

func (c *current) onListElements198() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements198() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements198()
}

func (c *current) onListElements201() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements201() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements201()
}

func (c *current) onListElements193() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements193() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements193()
}

func (c *current) onListElements179() (any, error) {
	return nil, nil

}

func (p *parser) callonListElements179() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements179()
}

func (c *current) onListElements210() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements210() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements210()
}

func (c *current) onListElements214() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements214() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements214()
}

func (c *current) onListElements218() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements218() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements218()
}

func (c *current) onListElements208(content any) (any, error) {
	return types.NewParagraph(nil, content)

}

func (p *parser) callonListElements208() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements208(stack["content"])
}

func (c *current) onListElements145(term, separator, description any) (any, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElements145() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements145(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElements1(firstElement, extraElements any) (any, error) {
	return types.NewListElements(append([]interface{}{firstElement}, extraElements.([]interface{})...))

}

func (p *parser) callonListElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements1(stack["firstElement"], stack["extraElements"])
}

func (c *current) onExtraListElements1(elements any) (any, error) {
	return types.Flatten(elements.([]interface{})), nil
}

func (p *parser) callonExtraListElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElements1(stack["elements"])
}

func (c *current) onExtraListElement15() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement15()
}

func (c *current) onExtraListElement18() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement18()
}

func (c *current) onExtraListElement10() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement10()
}

func (c *current) onExtraListElement33() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement33()
}

func (c *current) onExtraListElement40() (any, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement40()
}

func (c *current) onExtraListElement43(depth any) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement43() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement43(stack["depth"])
}

func (c *current) onExtraListElement37(depth any) (any, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement37(stack["depth"])
}

func (c *current) onExtraListElement44() (any, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement44()
}

func (c *current) onExtraListElement49() (any, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement49()
}

func (c *current) onExtraListElement53() (any, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement53()
}

func (c *current) onExtraListElement57() (any, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement57() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement57()
}

func (c *current) onExtraListElement62() (any, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement62()
}

func (c *current) onExtraListElement67(prefix any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement67() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement67(stack["prefix"])
}

func (c *current) onExtraListElement30(prefix any) (any, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement30(stack["prefix"])
}

func (c *current) onExtraListElement75() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement75()
}

func (c *current) onExtraListElement79() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement79()
}

func (c *current) onExtraListElement71(rawLines any) (any, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement71(stack["rawLines"])
}

func (c *current) onExtraListElement27(prefix, content any) (any, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement27(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement92() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement92()
}

func (c *current) onExtraListElement95() (any, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonExtraListElement95() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement95()
}

func (c *current) onExtraListElement100(style any) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonExtraListElement100() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement100(stack["style"])
}

func (c *current) onExtraListElement101(style any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement101() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement101(stack["style"])
}

func (c *current) onExtraListElement89(style any) (any, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonExtraListElement89() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement89(stack["style"])
}

func (c *current) onExtraListElement112() (any, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement112() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement112()
}

func (c *current) onExtraListElement114() (any, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement114()
}

func (c *current) onExtraListElement116() (any, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement116() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement116()
}

func (c *current) onExtraListElement118(style any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement118() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement118(stack["style"])
}

func (c *current) onExtraListElement106(style any) (any, error) {
	return style, nil

}

func (p *parser) callonExtraListElement106() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement106(stack["style"])
}

func (c *current) onExtraListElement126() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement126() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement126()
}

func (c *current) onExtraListElement130() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement130() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement130()
}

func (c *current) onExtraListElement122(rawLines any) (any, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement122() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement122(stack["rawLines"])
}

func (c *current) onExtraListElement86(prefix, checkstyle, content any) (any, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement86() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement86(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement144() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement144() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement144()
}

func (c *current) onExtraListElement148(ref any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement148() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement148(stack["ref"])
}

func (c *current) onExtraListElement140(ref any) (any, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement140() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement140(stack["ref"])
}

func (c *current) onExtraListElement156() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement156() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement156()
}

func (c *current) onExtraListElement160() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement160() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement160()
}

func (c *current) onExtraListElement152(rawLines any) (any, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement152() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement152(stack["rawLines"])
}

func (c *current) onExtraListElement137(ref, description any) (any, error) {
	return types.NewCalloutListElement(ref.(int), description.(*types.Paragraph))

}

func (p *parser) callonExtraListElement137() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement137(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement177() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement177() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement177()
}

func (c *current) onExtraListElement180(separator any) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement180() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement180(stack["separator"])
}

func (c *current) onExtraListElement174(separator any) (any, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement174() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement174(stack["separator"])
}

func (c *current) onExtraListElement183() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement183() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement183()
}

func (c *current) onExtraListElement170() (any, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement170() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement170()
}

func (c *current) onExtraListElement195() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement195()
}

func (c *current) onExtraListElement198(separator any) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement198() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement198(stack["separator"])
}

func (c *current) onExtraListElement192(separator any) (any, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement192() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement192(stack["separator"])
}

func (c *current) onExtraListElement204() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement204() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement204()
}

func (c *current) onExtraListElement207() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement207() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement207()
}

func (c *current) onExtraListElement220() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement220()
}

func (c *current) onExtraListElement223() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement223() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement223()
}

func (c *current) onExtraListElement215() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement215()
}

func (c *current) onExtraListElement201() (any, error) {
	return nil, nil

}

func (p *parser) callonExtraListElement201() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement201()
}

func (c *current) onExtraListElement232() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement232()
}

func (c *current) onExtraListElement236() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement236() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement236()
}

func (c *current) onExtraListElement240() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement240() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement240()
}

func (c *current) onExtraListElement230(content any) (any, error) {
	return types.NewParagraph(nil, content)

}

func (p *parser) callonExtraListElement230() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement230(stack["content"])
}

func (c *current) onExtraListElement167(term, separator, description any) (any, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement167() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement167(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement7(element any) (any, error) {

	return element, nil

}

func (p *parser) callonExtraListElement7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement7(stack["element"])
}

func (c *current) onExtraListElement260() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement260() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement260()
}

func (c *current) onExtraListElement267() (any, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement267() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement267()
}

func (c *current) onExtraListElement270(depth any) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement270() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement270(stack["depth"])
}

func (c *current) onExtraListElement264(depth any) (any, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement264() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement264(stack["depth"])
}

func (c *current) onExtraListElement271() (any, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement271() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement271()
}

func (c *current) onExtraListElement276() (any, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement276() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement276()
}

func (c *current) onExtraListElement280() (any, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement280() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement280()
}

func (c *current) onExtraListElement284() (any, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement284() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement284()
}

func (c *current) onExtraListElement289() (any, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement289() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement289()
}

func (c *current) onExtraListElement294(prefix any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement294() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement294(stack["prefix"])
}

func (c *current) onExtraListElement257(prefix any) (any, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement257() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement257(stack["prefix"])
}

func (c *current) onExtraListElement302() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement302() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement302()
}

func (c *current) onExtraListElement306() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement306() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement306()
}

func (c *current) onExtraListElement298(rawLines any) (any, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement298() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement298(stack["rawLines"])
}

func (c *current) onExtraListElement254(prefix, content any) (any, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement254() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement254(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement319() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement319() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement319()
}

func (c *current) onExtraListElement322() (any, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonExtraListElement322() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement322()
}

func (c *current) onExtraListElement327(style any) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonExtraListElement327() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement327(stack["style"])
}

func (c *current) onExtraListElement328(style any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement328() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement328(stack["style"])
}

func (c *current) onExtraListElement316(style any) (any, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonExtraListElement316() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement316(stack["style"])
}

func (c *current) onExtraListElement339() (any, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement339() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement339()
}

func (c *current) onExtraListElement341() (any, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement341() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement341()
}

func (c *current) onExtraListElement343() (any, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement343() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement343()
}

func (c *current) onExtraListElement345(style any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement345() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement345(stack["style"])
}

func (c *current) onExtraListElement333(style any) (any, error) {
	return style, nil

}

func (p *parser) callonExtraListElement333() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement333(stack["style"])
}

func (c *current) onExtraListElement353() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement353() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement353()
}

func (c *current) onExtraListElement357() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement357() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement357()
}

func (c *current) onExtraListElement349(rawLines any) (any, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement349() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement349(stack["rawLines"])
}

func (c *current) onExtraListElement313(prefix, checkstyle, content any) (any, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement313() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement313(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement371() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement371() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement371()
}

func (c *current) onExtraListElement375(ref any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement375() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement375(stack["ref"])
}

func (c *current) onExtraListElement367(ref any) (any, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement367() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement367(stack["ref"])
}

func (c *current) onExtraListElement383() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement383() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement383()
}

func (c *current) onExtraListElement387() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement387() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement387()
}

func (c *current) onExtraListElement379(rawLines any) (any, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement379() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement379(stack["rawLines"])
}

func (c *current) onExtraListElement364(ref, description any) (any, error) {
	return types.NewCalloutListElement(ref.(int), description.(*types.Paragraph))

}

func (p *parser) callonExtraListElement364() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement364(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement404() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement404() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement404()
}

func (c *current) onExtraListElement407(separator any) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement407() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement407(stack["separator"])
}

func (c *current) onExtraListElement401(separator any) (any, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement401() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement401(stack["separator"])
}

func (c *current) onExtraListElement410() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement410() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement410()
}

func (c *current) onExtraListElement397() (any, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement397() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement397()
}

func (c *current) onExtraListElement422() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement422() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement422()
}

func (c *current) onExtraListElement425(separator any) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement425() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement425(stack["separator"])
}

func (c *current) onExtraListElement419(separator any) (any, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement419() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement419(stack["separator"])
}

func (c *current) onExtraListElement431() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement431() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement431()
}

func (c *current) onExtraListElement434() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement434() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement434()
}

func (c *current) onExtraListElement447() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement447() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement447()
}

func (c *current) onExtraListElement450() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement450() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement450()
}

func (c *current) onExtraListElement442() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement442() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement442()
}

func (c *current) onExtraListElement428() (any, error) {
	return nil, nil

}

func (p *parser) callonExtraListElement428() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement428()
}

func (c *current) onExtraListElement459() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement459() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement459()
}

func (c *current) onExtraListElement463() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement463() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement463()
}

func (c *current) onExtraListElement467() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement467() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement467()
}

func (c *current) onExtraListElement457(content any) (any, error) {
	return types.NewParagraph(nil, content)

}

func (p *parser) callonExtraListElement457() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement457(stack["content"])
}

func (c *current) onExtraListElement394(term, separator, description any) (any, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement394() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement394(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement247(attributes, element any) (any, error) {

	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement247() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement247(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement481() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement481() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement481()
}

func (c *current) onExtraListElement485() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement485() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement485()
}

func (c *current) onExtraListElement475(content any) (any, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonExtraListElement475() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement475(stack["content"])
}

func (c *current) onExtraListElement500() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement500() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement500()
}

func (c *current) onExtraListElement503() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement503() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement503()
}

func (c *current) onExtraListElement495() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement495() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement495()
}

func (c *current) onExtraListElement514() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement514() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement514()
}

func (c *current) onExtraListElement516() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement516() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement516()
}

func (c *current) onExtraListElement525() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement525() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement525()
}

func (c *current) onExtraListElement532() (any, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement532() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement532()
}

func (c *current) onExtraListElement535(depth any) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement535() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement535(stack["depth"])
}

func (c *current) onExtraListElement529(depth any) (any, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement529() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement529(stack["depth"])
}

func (c *current) onExtraListElement536() (any, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement536() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement536()
}

func (c *current) onExtraListElement541() (any, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement541() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement541()
}

func (c *current) onExtraListElement545() (any, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement545() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement545()
}

func (c *current) onExtraListElement549() (any, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement549() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement549()
}

func (c *current) onExtraListElement554() (any, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement554() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement554()
}

func (c *current) onExtraListElement559(prefix any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement559() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement559(stack["prefix"])
}

func (c *current) onExtraListElement522(prefix any) (any, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement522() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement522(stack["prefix"])
}

func (c *current) onExtraListElement566() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement566() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement566()
}

func (c *current) onExtraListElement569() (any, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonExtraListElement569() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement569()
}

func (c *current) onExtraListElement574(style any) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonExtraListElement574() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement574(stack["style"])
}

func (c *current) onExtraListElement575(style any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement575() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement575(stack["style"])
}

func (c *current) onExtraListElement563(style any) (any, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonExtraListElement563() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement563(stack["style"])
}

func (c *current) onExtraListElement583() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement583() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement583()
}

func (c *current) onExtraListElement587(ref any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement587() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement587(stack["ref"])
}

func (c *current) onExtraListElement579(ref any) (any, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement579() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement579(stack["ref"])
}

func (c *current) onExtraListElement599() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement599() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement599()
}

func (c *current) onExtraListElement602(separator any) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement602() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement602(stack["separator"])
}

func (c *current) onExtraListElement596(separator any) (any, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement596() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement596(stack["separator"])
}

func (c *current) onExtraListElement605() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement605() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement605()
}

func (c *current) onExtraListElement592() (any, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement592() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement592()
}

func (c *current) onExtraListElement616() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement616() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement616()
}

func (c *current) onExtraListElement619(separator any) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement619() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement619(stack["separator"])
}

func (c *current) onExtraListElement613(separator any) (any, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement613() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement613(stack["separator"])
}

func (c *current) onExtraListElement630() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement630() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement630()
}

func (c *current) onExtraListElement636() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement636() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement636()
}

func (c *current) onExtraListElement639() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement639() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement639()
}

func (c *current) onExtraListElement627(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement627() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement627(stack["delimiter"])
}

func (c *current) onExtraListElement649() (any, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement649() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement649()
}

func (c *current) onExtraListElement655() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement655() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement655()
}

func (c *current) onExtraListElement658() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement658() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement658()
}

func (c *current) onExtraListElement646(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement646() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement646(stack["delimiter"])
}

func (c *current) onExtraListElement669() (any, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonExtraListElement669() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement669()
}

func (c *current) onExtraListElement673() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement673() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement673()
}

func (c *current) onExtraListElement676() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement676() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement676()
}

func (c *current) onExtraListElement665(language any) (any, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonExtraListElement665() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement665(stack["language"])
}

func (c *current) onExtraListElement686() (any, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement686() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement686()
}

func (c *current) onExtraListElement692() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement692() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement692()
}

func (c *current) onExtraListElement695() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement695() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement695()
}

func (c *current) onExtraListElement683(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement683() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement683(stack["delimiter"])
}

func (c *current) onExtraListElement705() (any, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement705() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement705()
}

func (c *current) onExtraListElement711() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement711() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement711()
}

func (c *current) onExtraListElement714() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement714() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement714()
}

func (c *current) onExtraListElement702(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement702() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement702(stack["delimiter"])
}

func (c *current) onExtraListElement724() (any, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement724() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement724()
}

func (c *current) onExtraListElement730() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement730() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement730()
}

func (c *current) onExtraListElement733() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement733() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement733()
}

func (c *current) onExtraListElement721(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement721() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement721(stack["delimiter"])
}

func (c *current) onExtraListElement743() (any, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement743() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement743()
}

func (c *current) onExtraListElement749() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement749() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement749()
}

func (c *current) onExtraListElement752() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement752() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement752()
}

func (c *current) onExtraListElement740(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement740() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement740(stack["delimiter"])
}

func (c *current) onExtraListElement762() (any, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement762() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement762()
}

func (c *current) onExtraListElement768() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement768() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement768()
}

func (c *current) onExtraListElement771() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement771() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement771()
}

func (c *current) onExtraListElement759(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement759() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement759(stack["delimiter"])
}

func (c *current) onExtraListElement781() (any, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement781() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement781()
}

func (c *current) onExtraListElement787() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement787() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement787()
}

func (c *current) onExtraListElement790() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement790() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement790()
}

func (c *current) onExtraListElement778(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement778() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement778(stack["delimiter"])
}

func (c *current) onExtraListElement621(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement621() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement621(stack["delimiter"])
}

func (c *current) onExtraListElement798() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement798() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement798()
}

func (c *current) onExtraListElement802() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement802() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement802()
}

func (c *current) onExtraListElement492(content any) (any, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement492() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement492(stack["content"])
}

func (c *current) onExtraListElement1(element any) (any, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1(stack["element"])
}

func (c *current) onListContinuation7() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuation7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation7()
}

func (c *current) onListContinuation9() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuation9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation9()
}

func (c *current) onListContinuation16() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuation16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation16()
}

func (c *current) onListContinuation18(offset any) (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuation18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation18(stack["offset"])
}

func (c *current) onListContinuation1(offset, element any) (any, error) {
	return types.NewListContinuation(len(offset.([]interface{})), element)

}

func (p *parser) callonListContinuation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation1(stack["offset"], stack["element"])
}

func (c *current) onListContinuationElement13() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement13()
}

func (c *current) onListContinuationElement20() (any, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListContinuationElement20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement20()
}

func (c *current) onListContinuationElement23(depth any) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListContinuationElement23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement23(stack["depth"])
}

func (c *current) onListContinuationElement17(depth any) (any, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListContinuationElement17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement17(stack["depth"])
}

func (c *current) onListContinuationElement24() (any, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListContinuationElement24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement24()
}

func (c *current) onListContinuationElement29() (any, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListContinuationElement29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement29()
}

func (c *current) onListContinuationElement33() (any, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListContinuationElement33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement33()
}

func (c *current) onListContinuationElement37() (any, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListContinuationElement37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement37()
}

func (c *current) onListContinuationElement42() (any, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListContinuationElement42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement42()
}

func (c *current) onListContinuationElement47(prefix any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement47(stack["prefix"])
}

func (c *current) onListContinuationElement10(prefix any) (any, error) {
	return prefix, nil
}

func (p *parser) callonListContinuationElement10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement10(stack["prefix"])
}

func (c *current) onListContinuationElement55() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListContinuationElement55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement55()
}

func (c *current) onListContinuationElement59() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement59()
}

func (c *current) onListContinuationElement51(rawLines any) (any, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListContinuationElement51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement51(stack["rawLines"])
}

func (c *current) onListContinuationElement7(prefix, content any) (any, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListContinuationElement7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement7(stack["prefix"], stack["content"])
}

func (c *current) onListContinuationElement72() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement72()
}

func (c *current) onListContinuationElement75() (any, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement75()
}

func (c *current) onListContinuationElement80(style any) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonListContinuationElement80() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement80(stack["style"])
}

func (c *current) onListContinuationElement81(style any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement81() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement81(stack["style"])
}

func (c *current) onListContinuationElement69(style any) (any, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonListContinuationElement69() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement69(stack["style"])
}

func (c *current) onListContinuationElement92() (any, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListContinuationElement92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement92()
}

func (c *current) onListContinuationElement94() (any, error) {
	return types.Checked, nil
}

func (p *parser) callonListContinuationElement94() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement94()
}

func (c *current) onListContinuationElement96() (any, error) {
	return types.Checked, nil
}

func (p *parser) callonListContinuationElement96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement96()
}

func (c *current) onListContinuationElement98(style any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement98() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement98(stack["style"])
}

func (c *current) onListContinuationElement86(style any) (any, error) {
	return style, nil

}

func (p *parser) callonListContinuationElement86() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement86(stack["style"])
}

func (c *current) onListContinuationElement106() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListContinuationElement106() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement106()
}

func (c *current) onListContinuationElement110() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement110() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement110()
}

func (c *current) onListContinuationElement102(rawLines any) (any, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListContinuationElement102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement102(stack["rawLines"])
}

func (c *current) onListContinuationElement66(prefix, checkstyle, content any) (any, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListContinuationElement66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement66(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListContinuationElement124() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListContinuationElement124() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement124()
}

func (c *current) onListContinuationElement128(ref any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement128() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement128(stack["ref"])
}

func (c *current) onListContinuationElement120(ref any) (any, error) {
	return ref, nil

}

func (p *parser) callonListContinuationElement120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement120(stack["ref"])
}

func (c *current) onListContinuationElement136() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListContinuationElement136() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement136()
}

func (c *current) onListContinuationElement140() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement140() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement140()
}

func (c *current) onListContinuationElement132(rawLines any) (any, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListContinuationElement132() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement132(stack["rawLines"])
}

func (c *current) onListContinuationElement117(ref, description any) (any, error) {
	return types.NewCalloutListElement(ref.(int), description.(*types.Paragraph))

}

func (p *parser) callonListContinuationElement117() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement117(stack["ref"], stack["description"])
}

func (c *current) onListContinuationElement157() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement157() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement157()
}

func (c *current) onListContinuationElement160(separator any) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListContinuationElement160() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement160(stack["separator"])
}

func (c *current) onListContinuationElement154(separator any) (any, error) {
	return separator, nil

}

func (p *parser) callonListContinuationElement154() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement154(stack["separator"])
}

func (c *current) onListContinuationElement163() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement163() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement163()
}

func (c *current) onListContinuationElement150() (any, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListContinuationElement150() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement150()
}

func (c *current) onListContinuationElement175() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement175() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement175()
}

func (c *current) onListContinuationElement178(separator any) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListContinuationElement178() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement178(stack["separator"])
}

func (c *current) onListContinuationElement172(separator any) (any, error) {
	return separator, nil

}

func (p *parser) callonListContinuationElement172() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement172(stack["separator"])
}

func (c *current) onListContinuationElement184() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement184() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement184()
}

func (c *current) onListContinuationElement187() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement187() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement187()
}

func (c *current) onListContinuationElement200() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement200() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement200()
}

func (c *current) onListContinuationElement203() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement203() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement203()
}

func (c *current) onListContinuationElement195() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement195()
}

func (c *current) onListContinuationElement181() (any, error) {
	return nil, nil

}

func (p *parser) callonListContinuationElement181() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement181()
}

func (c *current) onListContinuationElement212() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement212() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement212()
}

func (c *current) onListContinuationElement216() (any, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListContinuationElement216() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement216()
}

func (c *current) onListContinuationElement220() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement220()
}

func (c *current) onListContinuationElement210(content any) (any, error) {
	return types.NewParagraph(nil, content)

}

func (p *parser) callonListContinuationElement210() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement210(stack["content"])
}

func (c *current) onListContinuationElement147(term, separator, description any) (any, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListContinuationElement147() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement147(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListContinuationElement237() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement237() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement237()
}

func (c *current) onListContinuationElement240() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement240() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement240()
}

func (c *current) onListContinuationElement232() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement232()
}

func (c *current) onListContinuationElement252() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement252() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement252()
}

func (c *current) onListContinuationElement259() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement259() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement259()
}

func (c *current) onListContinuationElement262() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement262() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement262()
}

func (c *current) onListContinuationElement248(name any) (any, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonListContinuationElement248() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement248(stack["name"])
}

func (c *current) onListContinuationElement273() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement273() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement273()
}

func (c *current) onListContinuationElement280() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement280() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement280()
}

func (c *current) onListContinuationElement283() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement283() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement283()
}

func (c *current) onListContinuationElement269(name any) (any, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonListContinuationElement269() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement269(stack["name"])
}

func (c *current) onListContinuationElement295() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement295() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement295()
}

func (c *current) onListContinuationElement301() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement301() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement301()
}

func (c *current) onListContinuationElement304() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement304() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement304()
}

func (c *current) onListContinuationElement292(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement292() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement292(stack["delimiter"])
}

func (c *current) onListContinuationElement320() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement320() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement320()
}

func (c *current) onListContinuationElement326() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement326() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement326()
}

func (c *current) onListContinuationElement329() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement329() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement329()
}

func (c *current) onListContinuationElement317(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement317() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement317(stack["delimiter"])
}

func (c *current) onListContinuationElement344() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement344() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement344()
}

func (c *current) onListContinuationElement348() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement348() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement348()
}

func (c *current) onListContinuationElement339(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement339() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement339(stack["content"])
}

func (c *current) onListContinuationElement313(line any) (any, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement313() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement313(stack["line"])
}

func (c *current) onListContinuationElement360() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement360() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement360()
}

func (c *current) onListContinuationElement366() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement366() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement366()
}

func (c *current) onListContinuationElement369() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement369() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement369()
}

func (c *current) onListContinuationElement357(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement357() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement357(stack["delimiter"])
}

func (c *current) onListContinuationElement290(delimiter, content any) (any, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonListContinuationElement290() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement290(stack["delimiter"], stack["content"])
}

func (c *current) onListContinuationElement384() (any, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement384() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement384()
}

func (c *current) onListContinuationElement390() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement390() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement390()
}

func (c *current) onListContinuationElement393() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement393() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement393()
}

func (c *current) onListContinuationElement381(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement381() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement381(stack["delimiter"])
}

func (c *current) onListContinuationElement400(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement400() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement400(stack["start"])
}

func (c *current) onListContinuationElement412() (any, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement412() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement412()
}

func (c *current) onListContinuationElement418() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement418() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement418()
}

func (c *current) onListContinuationElement421() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement421() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement421()
}

func (c *current) onListContinuationElement409(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement409() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement409(stack["delimiter"])
}

func (c *current) onListContinuationElement428(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement428() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement428(stack["end"])
}

func (c *current) onListContinuationElement437() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement437() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement437()
}

func (c *current) onListContinuationElement441() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement441() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement441()
}

func (c *current) onListContinuationElement432(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement432() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement432(stack["content"])
}

func (c *current) onListContinuationElement403(line any) (any, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement403() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement403(stack["line"])
}

func (c *current) onListContinuationElement456() (any, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement456() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement456()
}

func (c *current) onListContinuationElement462() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement462() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement462()
}

func (c *current) onListContinuationElement465() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement465() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement465()
}

func (c *current) onListContinuationElement453(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement453() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement453(stack["delimiter"])
}

func (c *current) onListContinuationElement472(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement472() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement472(stack["end"])
}

func (c *current) onListContinuationElement378(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonListContinuationElement378() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement378(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement482() (any, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement482() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement482()
}

func (c *current) onListContinuationElement486() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement486() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement486()
}

func (c *current) onListContinuationElement489() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement489() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement489()
}

func (c *current) onListContinuationElement478(language any) (any, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListContinuationElement478() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement478(stack["language"])
}

func (c *current) onListContinuationElement504() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement504() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement504()
}

func (c *current) onListContinuationElement507() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement507() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement507()
}

func (c *current) onListContinuationElement520() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement520() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement520()
}

func (c *current) onListContinuationElement524() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement524() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement524()
}

func (c *current) onListContinuationElement515(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement515() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement515(stack["content"])
}

func (c *current) onListContinuationElement498(line any) (any, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement498() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement498(stack["line"])
}

func (c *current) onListContinuationElement535() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement535() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement535()
}

func (c *current) onListContinuationElement538() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement538() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement538()
}

func (c *current) onListContinuationElement475(delimiter, content any) (any, error) {
	// Markdown code with fences is a "listing/source" block in Asciidoc
	b, err := types.NewDelimitedBlock(types.Listing, content.([]interface{}))
	b.AddAttributes(delimiter.(*types.BlockDelimiter).Attributes)
	return b, err

}

func (p *parser) callonListContinuationElement475() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement475(stack["delimiter"], stack["content"])
}

func (c *current) onListContinuationElement551() (any, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement551() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement551()
}

func (c *current) onListContinuationElement557() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement557() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement557()
}

func (c *current) onListContinuationElement560() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement560() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement560()
}

func (c *current) onListContinuationElement548(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement548() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement548(stack["delimiter"])
}

func (c *current) onListContinuationElement567(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement567() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement567(stack["start"])
}

func (c *current) onListContinuationElement579() (any, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement579() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement579()
}

func (c *current) onListContinuationElement585() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement585() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement585()
}

func (c *current) onListContinuationElement588() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement588() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement588()
}

func (c *current) onListContinuationElement576(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement576() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement576(stack["delimiter"])
}

func (c *current) onListContinuationElement595(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement595() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement595(stack["end"])
}

func (c *current) onListContinuationElement604() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement604() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement604()
}

func (c *current) onListContinuationElement608() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement608() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement608()
}

func (c *current) onListContinuationElement599(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement599() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement599(stack["content"])
}

func (c *current) onListContinuationElement570(line any) (any, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement570() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement570(stack["line"])
}

func (c *current) onListContinuationElement623() (any, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement623() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement623()
}

func (c *current) onListContinuationElement629() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement629() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement629()
}

func (c *current) onListContinuationElement632() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement632() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement632()
}

func (c *current) onListContinuationElement620(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement620() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement620(stack["delimiter"])
}

func (c *current) onListContinuationElement639(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement639() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement639(stack["end"])
}

func (c *current) onListContinuationElement545(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonListContinuationElement545() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement545(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement648() (any, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement648() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement648()
}

func (c *current) onListContinuationElement654() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement654() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement654()
}

func (c *current) onListContinuationElement657() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement657() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement657()
}

func (c *current) onListContinuationElement645(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement645() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement645(stack["delimiter"])
}

func (c *current) onListContinuationElement664(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement664() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement664(stack["start"])
}

func (c *current) onListContinuationElement676() (any, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement676() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement676()
}

func (c *current) onListContinuationElement682() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement682() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement682()
}

func (c *current) onListContinuationElement685() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement685() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement685()
}

func (c *current) onListContinuationElement673(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement673() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement673(stack["delimiter"])
}

func (c *current) onListContinuationElement692(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement692() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement692(stack["end"])
}

func (c *current) onListContinuationElement701() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement701() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement701()
}

func (c *current) onListContinuationElement705() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement705() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement705()
}

func (c *current) onListContinuationElement696(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement696() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement696(stack["content"])
}

func (c *current) onListContinuationElement667(line any) (any, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement667() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement667(stack["line"])
}

func (c *current) onListContinuationElement720() (any, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement720() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement720()
}

func (c *current) onListContinuationElement726() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement726() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement726()
}

func (c *current) onListContinuationElement729() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement729() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement729()
}

func (c *current) onListContinuationElement717(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement717() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement717(stack["delimiter"])
}

func (c *current) onListContinuationElement736(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement736() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement736(stack["end"])
}

func (c *current) onListContinuationElement642(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonListContinuationElement642() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement642(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement745() (any, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement745() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement745()
}

func (c *current) onListContinuationElement751() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement751() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement751()
}

func (c *current) onListContinuationElement754() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement754() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement754()
}

func (c *current) onListContinuationElement742(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement742() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement742(stack["delimiter"])
}

func (c *current) onListContinuationElement761(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement761() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement761(stack["start"])
}

func (c *current) onListContinuationElement773() (any, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement773() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement773()
}

func (c *current) onListContinuationElement779() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement779() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement779()
}

func (c *current) onListContinuationElement782() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement782() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement782()
}

func (c *current) onListContinuationElement770(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement770() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement770(stack["delimiter"])
}

func (c *current) onListContinuationElement789(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement789() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement789(stack["end"])
}

func (c *current) onListContinuationElement798() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement798() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement798()
}

func (c *current) onListContinuationElement802() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement802() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement802()
}

func (c *current) onListContinuationElement793(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement793() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement793(stack["content"])
}

func (c *current) onListContinuationElement764(line any) (any, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement764() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement764(stack["line"])
}

func (c *current) onListContinuationElement817() (any, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement817() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement817()
}

func (c *current) onListContinuationElement823() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement823() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement823()
}

func (c *current) onListContinuationElement826() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement826() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement826()
}

func (c *current) onListContinuationElement814(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement814() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement814(stack["delimiter"])
}

func (c *current) onListContinuationElement833(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement833() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement833(stack["end"])
}

func (c *current) onListContinuationElement739(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonListContinuationElement739() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement739(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement847() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement847() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement847()
}

func (c *current) onListContinuationElement850() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement850() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement850()
}

func (c *current) onListContinuationElement842() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement842() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement842()
}

func (c *current) onListContinuationElement859() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement859() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement859()
}

func (c *current) onListContinuationElement863() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement863() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement863()
}

func (c *current) onListContinuationElement839(content any) (any, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement839() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement839(stack["content"])
}

func (c *current) onListContinuationElement881() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement881() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement881()
}

func (c *current) onListContinuationElement884() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement884() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement884()
}

func (c *current) onListContinuationElement876() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement876() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement876()
}

func (c *current) onListContinuationElement893() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement893() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement893()
}

func (c *current) onListContinuationElement897() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement897() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement897()
}

func (c *current) onListContinuationElement873(content any) (any, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement873() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement873(stack["content"])
}

func (c *current) onListContinuationElement907() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement907() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement907()
}

func (c *current) onListContinuationElement910(content any) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonListContinuationElement910() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement910(stack["content"])
}

func (c *current) onListContinuationElement912() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement912() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement912()
}

func (c *current) onListContinuationElement904(content any) (any, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement904() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement904(stack["content"])
}

func (c *current) onListContinuationElement836(firstLine, otherLines any) (any, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListContinuationElement836() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement836(stack["firstLine"], stack["otherLines"])
}

func (c *current) onListContinuationElement925() (any, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement925() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement925()
}

func (c *current) onListContinuationElement928() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement928() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement928()
}

func (c *current) onListContinuationElement931() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement931() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement931()
}

func (c *current) onListContinuationElement922(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement922() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement922(stack["delimiter"])
}

func (c *current) onListContinuationElement947() (any, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement947() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement947()
}

func (c *current) onListContinuationElement950() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement950() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement950()
}

func (c *current) onListContinuationElement953() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement953() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement953()
}

func (c *current) onListContinuationElement944(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement944() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement944(stack["delimiter"])
}

func (c *current) onListContinuationElement968() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement968() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement968()
}

func (c *current) onListContinuationElement972() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement972() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement972()
}

func (c *current) onListContinuationElement963(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement963() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement963(stack["content"])
}

func (c *current) onListContinuationElement940(line any) (any, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement940() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement940(stack["line"])
}

func (c *current) onListContinuationElement985() (any, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement985() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement985()
}

func (c *current) onListContinuationElement988() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement988() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement988()
}

func (c *current) onListContinuationElement991() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement991() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement991()
}

func (c *current) onListContinuationElement982(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement982() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement982(stack["delimiter"])
}

func (c *current) onListContinuationElement919(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Open, content.([]interface{}))

}

func (p *parser) callonListContinuationElement919() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement919(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement1006() (any, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1006() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1006()
}

func (c *current) onListContinuationElement1012() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1012() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1012()
}

func (c *current) onListContinuationElement1015() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1015() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1015()
}

func (c *current) onListContinuationElement1003(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1003() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1003(stack["delimiter"])
}

func (c *current) onListContinuationElement1022(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1022() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1022(stack["start"])
}

func (c *current) onListContinuationElement1034() (any, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1034() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1034()
}

func (c *current) onListContinuationElement1040() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1040() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1040()
}

func (c *current) onListContinuationElement1043() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1043() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1043()
}

func (c *current) onListContinuationElement1031(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1031() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1031(stack["delimiter"])
}

func (c *current) onListContinuationElement1050(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1050() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1050(stack["end"])
}

func (c *current) onListContinuationElement1059() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1059() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1059()
}

func (c *current) onListContinuationElement1063() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1063() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1063()
}

func (c *current) onListContinuationElement1054(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1054() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1054(stack["content"])
}

func (c *current) onListContinuationElement1025(line any) (any, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement1025() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1025(stack["line"])
}

func (c *current) onListContinuationElement1078() (any, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1078() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1078()
}

func (c *current) onListContinuationElement1084() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1084() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1084()
}

func (c *current) onListContinuationElement1087() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1087() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1087()
}

func (c *current) onListContinuationElement1075(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1075() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1075(stack["delimiter"])
}

func (c *current) onListContinuationElement1094(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1094() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1094(stack["end"])
}

func (c *current) onListContinuationElement1000(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonListContinuationElement1000() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1000(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement1103() (any, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1103() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1103()
}

func (c *current) onListContinuationElement1109() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1109() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1109()
}

func (c *current) onListContinuationElement1112() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1112() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1112()
}

func (c *current) onListContinuationElement1100(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1100(stack["delimiter"])
}

func (c *current) onListContinuationElement1119(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1119() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1119(stack["start"])
}

func (c *current) onListContinuationElement1131() (any, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1131() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1131()
}

func (c *current) onListContinuationElement1137() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1137() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1137()
}

func (c *current) onListContinuationElement1140() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1140() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1140()
}

func (c *current) onListContinuationElement1128(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1128() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1128(stack["delimiter"])
}

func (c *current) onListContinuationElement1147(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1147() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1147(stack["end"])
}

func (c *current) onListContinuationElement1156() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1156() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1156()
}

func (c *current) onListContinuationElement1160() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1160() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1160()
}

func (c *current) onListContinuationElement1151(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1151() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1151(stack["content"])
}

func (c *current) onListContinuationElement1122(line any) (any, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement1122() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1122(stack["line"])
}

func (c *current) onListContinuationElement1175() (any, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1175() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1175()
}

func (c *current) onListContinuationElement1181() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1181() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1181()
}

func (c *current) onListContinuationElement1184() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1184() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1184()
}

func (c *current) onListContinuationElement1172(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1172() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1172(stack["delimiter"])
}

func (c *current) onListContinuationElement1191(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1191() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1191(stack["end"])
}

func (c *current) onListContinuationElement1097(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonListContinuationElement1097() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1097(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement1200() (any, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1200() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1200()
}

func (c *current) onListContinuationElement1206() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1206() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1206()
}

func (c *current) onListContinuationElement1209() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1209() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1209()
}

func (c *current) onListContinuationElement1197(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1197() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1197(stack["delimiter"])
}

func (c *current) onListContinuationElement1216(start any) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1216() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1216(stack["start"])
}

func (c *current) onListContinuationElement1228() (any, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1228() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1228()
}

func (c *current) onListContinuationElement1234() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1234() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1234()
}

func (c *current) onListContinuationElement1237() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1237() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1237()
}

func (c *current) onListContinuationElement1225(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1225() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1225(stack["delimiter"])
}

func (c *current) onListContinuationElement1244(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1244() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1244(stack["end"])
}

func (c *current) onListContinuationElement1253() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1253() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1253()
}

func (c *current) onListContinuationElement1257() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1257() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1257()
}

func (c *current) onListContinuationElement1248(content any) (any, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1248() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1248(stack["content"])
}

func (c *current) onListContinuationElement1219(line any) (any, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement1219() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1219(stack["line"])
}

func (c *current) onListContinuationElement1272() (any, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1272() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1272()
}

func (c *current) onListContinuationElement1278() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1278() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1278()
}

func (c *current) onListContinuationElement1281() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1281() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1281()
}

func (c *current) onListContinuationElement1269(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1269() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1269(stack["delimiter"])
}

func (c *current) onListContinuationElement1288(end any) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1288() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1288(stack["end"])
}

func (c *current) onListContinuationElement1194(start, content, end any) (any, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonListContinuationElement1194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1194(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement1302() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1302() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1302()
}

func (c *current) onListContinuationElement1305() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1305() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1305()
}

func (c *current) onListContinuationElement1313() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1313() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1313()
}

func (c *current) onListContinuationElement1291() (any, error) {

	return types.NewThematicBreak()

}

func (p *parser) callonListContinuationElement1291() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1291()
}

func (c *current) onListContinuationElement1325() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1325() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1325()
}

func (c *current) onListContinuationElement1328() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1328() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1328()
}

func (c *current) onListContinuationElement1343() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1343() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1343()
}

func (c *current) onListContinuationElement1346() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1346() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1346()
}

func (c *current) onListContinuationElement1338() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1338() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1338()
}

func (c *current) onListContinuationElement1360() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1360() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1360()
}

func (c *current) onListContinuationElement1363() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1363() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1363()
}

func (c *current) onListContinuationElement1386() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1386() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1386()
}

func (c *current) onListContinuationElement1389() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1389() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1389()
}

func (c *current) onListContinuationElement1404() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1404() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1404()
}

func (c *current) onListContinuationElement1407() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1407() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1407()
}

func (c *current) onListContinuationElement1399() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1399() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1399()
}

func (c *current) onListContinuationElement1415() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1415() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1415()
}

func (c *current) onListContinuationElement1419() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1419() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1419()
}

func (c *current) onListContinuationElement1426() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1426() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1426()
}

func (c *current) onListContinuationElement1430() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1430() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1430()
}

func (c *current) onListContinuationElement1444() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1444() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1444()
}

func (c *current) onListContinuationElement1447() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1447() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1447()
}

func (c *current) onListContinuationElement1462() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1462() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1462()
}

func (c *current) onListContinuationElement1465() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1465() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1465()
}

func (c *current) onListContinuationElement1457() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1457() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1457()
}

func (c *current) onListContinuationElement1476() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1476() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1476()
}

func (c *current) onListContinuationElement1479() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1479() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1479()
}

func (c *current) onListContinuationElement1486() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1486() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1486()
}

func (c *current) onListContinuationElement1499() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1499() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1499()
}

func (c *current) onListContinuationElement1507() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1507() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1507()
}

func (c *current) onListContinuationElement1509() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1509() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1509()
}

func (c *current) onListContinuationElement1437(content, eol any) (any, error) {
	rl, err := types.NewRawLine(content.(string))
	if err != nil {
		return nil, err
	}
	if eol != nil {
		rl.EOL = true
	}
	return rl, nil

}

func (p *parser) callonListContinuationElement1437() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1437(stack["content"], stack["eol"])
}

func (c *current) onListContinuationElement1379(format, eol, content any) (any, error) {
	cl := content.([]interface{})
	if len(cl) == 0 && eol != nil {
		rl, _ := types.NewRawLine("")
		rl.EOL = true
		cl = append(cl, rl)
	}
	return types.NewMultilineTableCell(cl, format)

}

func (p *parser) callonListContinuationElement1379() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1379(stack["format"], stack["eol"], stack["content"])
}

func (c *current) onListContinuationElement1376(cells any) (any, error) {
	return cells, nil
}

func (p *parser) callonListContinuationElement1376() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1376(stack["cells"])
}

func (c *current) onListContinuationElement1374(cells any) (any, error) {
	var rows []*types.TableRow
	var cs []interface{}
	ci := cells.([]interface{})

	for _, c := range ci {
		cs = append(cs, c)
		switch mlc := c.(type) {
		case *types.TableCell:
			if len(mlc.Elements) == 0 {
				continue
			}
			switch rl := mlc.Elements[len(mlc.Elements)-1].(type) {
			case *types.RawLine:
				if rl.EOL {
					tr, err := types.NewTableRow(cs)
					if err != nil {
						return nil, err
					}
					rows = append(rows, tr)
					cs = make([]interface{}, 0)
					continue
				}

			}
		}

	}
	if len(cs) > 0 {
		tr, err := types.NewTableRow(cs)
		if err != nil {
			return nil, err
		}
		rows = append(rows, tr)
	}
	if len(rows) == 1 {
		return rows[0], nil
	}

	return rows, nil

}

func (p *parser) callonListContinuationElement1374() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1374(stack["cells"])
}

func (c *current) onListContinuationElement1521() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1521() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1521()
}

func (c *current) onListContinuationElement1524() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1524() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1524()
}

func (c *current) onListContinuationElement1516() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1516() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1516()
}

func (c *current) onListContinuationElement1353(content any) (any, error) {
	return content, nil

}

func (p *parser) callonListContinuationElement1353() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1353(stack["content"])
}

func (c *current) onListContinuationElement1535() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1535() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1535()
}

func (c *current) onListContinuationElement1538() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1538() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1538()
}

func (c *current) onListContinuationElement1321(lines any) (any, error) {
	return types.NewTable(lines.([]interface{}))

}

func (p *parser) callonListContinuationElement1321() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1321(stack["lines"])
}

func (c *current) onListContinuationElement1553() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1553() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1553()
}

func (c *current) onListContinuationElement1557() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1557() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1557()
}

func (c *current) onListContinuationElement1547(content any) (any, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonListContinuationElement1547() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1547(stack["content"])
}

func (c *current) onListContinuationElement1570() (bool, error) {
	return !c.isWithinLiteralParagraph(), nil

}

func (p *parser) callonListContinuationElement1570() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1570()
}

func (c *current) onListContinuationElement1573() (any, error) {
	return types.Tip, nil

}

func (p *parser) callonListContinuationElement1573() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1573()
}

func (c *current) onListContinuationElement1575() (any, error) {
	return types.Note, nil

}

func (p *parser) callonListContinuationElement1575() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1575()
}

func (c *current) onListContinuationElement1577() (any, error) {
	return types.Important, nil

}

func (p *parser) callonListContinuationElement1577() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1577()
}

func (c *current) onListContinuationElement1579() (any, error) {
	return types.Warning, nil

}

func (p *parser) callonListContinuationElement1579() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1579()
}

func (c *current) onListContinuationElement1581() (any, error) {
	return types.Caution, nil

}

func (p *parser) callonListContinuationElement1581() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1581()
}

func (c *current) onListContinuationElement1585() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1585() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1585()
}

func (c *current) onListContinuationElement1583() (any, error) {
	// check
	return types.LiteralParagraph, nil

}

func (p *parser) callonListContinuationElement1583() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1583()
}

func (c *current) onListContinuationElement1568(style any) (any, error) {
	return style, nil

}

func (p *parser) callonListContinuationElement1568() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1568(stack["style"])
}

func (c *current) onListContinuationElement1597() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1597() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1597()
}

func (c *current) onListContinuationElement1600() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1600() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1600()
}

func (c *current) onListContinuationElement1592() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1592() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1592()
}

func (c *current) onListContinuationElement1611() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1611() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1611()
}

func (c *current) onListContinuationElement1613() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1613() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1613()
}

func (c *current) onListContinuationElement1622() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1622() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1622()
}

func (c *current) onListContinuationElement1629() (any, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListContinuationElement1629() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1629()
}

func (c *current) onListContinuationElement1632(depth any) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListContinuationElement1632() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1632(stack["depth"])
}

func (c *current) onListContinuationElement1626(depth any) (any, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListContinuationElement1626() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1626(stack["depth"])
}

func (c *current) onListContinuationElement1633() (any, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListContinuationElement1633() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1633()
}

func (c *current) onListContinuationElement1638() (any, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListContinuationElement1638() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1638()
}

func (c *current) onListContinuationElement1642() (any, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListContinuationElement1642() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1642()
}

func (c *current) onListContinuationElement1646() (any, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListContinuationElement1646() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1646()
}

func (c *current) onListContinuationElement1651() (any, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListContinuationElement1651() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1651()
}

func (c *current) onListContinuationElement1656(prefix any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1656() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1656(stack["prefix"])
}

func (c *current) onListContinuationElement1619(prefix any) (any, error) {
	return prefix, nil
}

func (p *parser) callonListContinuationElement1619() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1619(stack["prefix"])
}

func (c *current) onListContinuationElement1663() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1663() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1663()
}

func (c *current) onListContinuationElement1666() (any, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1666() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1666()
}

func (c *current) onListContinuationElement1671(style any) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonListContinuationElement1671() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1671(stack["style"])
}

func (c *current) onListContinuationElement1672(style any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1672() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1672(stack["style"])
}

func (c *current) onListContinuationElement1660(style any) (any, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonListContinuationElement1660() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1660(stack["style"])
}

func (c *current) onListContinuationElement1680() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListContinuationElement1680() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1680()
}

func (c *current) onListContinuationElement1684(ref any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1684() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1684(stack["ref"])
}

func (c *current) onListContinuationElement1676(ref any) (any, error) {
	return ref, nil

}

func (p *parser) callonListContinuationElement1676() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1676(stack["ref"])
}

func (c *current) onListContinuationElement1696() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1696() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1696()
}

func (c *current) onListContinuationElement1699(separator any) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListContinuationElement1699() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1699(stack["separator"])
}

func (c *current) onListContinuationElement1693(separator any) (any, error) {
	return separator, nil

}

func (p *parser) callonListContinuationElement1693() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1693(stack["separator"])
}

func (c *current) onListContinuationElement1702() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1702() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1702()
}

func (c *current) onListContinuationElement1689() (any, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListContinuationElement1689() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1689()
}

func (c *current) onListContinuationElement1713() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1713() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1713()
}

func (c *current) onListContinuationElement1716(separator any) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListContinuationElement1716() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1716(stack["separator"])
}

func (c *current) onListContinuationElement1710(separator any) (any, error) {
	return separator, nil

}

func (p *parser) callonListContinuationElement1710() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1710(stack["separator"])
}

func (c *current) onListContinuationElement1727() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1727() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1727()
}

func (c *current) onListContinuationElement1733() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1733() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1733()
}

func (c *current) onListContinuationElement1736() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1736() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1736()
}

func (c *current) onListContinuationElement1724(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1724() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1724(stack["delimiter"])
}

func (c *current) onListContinuationElement1746() (any, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1746() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1746()
}

func (c *current) onListContinuationElement1752() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1752() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1752()
}

func (c *current) onListContinuationElement1755() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1755() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1755()
}

func (c *current) onListContinuationElement1743(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1743() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1743(stack["delimiter"])
}

func (c *current) onListContinuationElement1766() (any, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1766() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1766()
}

func (c *current) onListContinuationElement1770() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1770() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1770()
}

func (c *current) onListContinuationElement1773() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1773() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1773()
}

func (c *current) onListContinuationElement1762(language any) (any, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListContinuationElement1762() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1762(stack["language"])
}

func (c *current) onListContinuationElement1783() (any, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1783() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1783()
}

func (c *current) onListContinuationElement1789() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1789() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1789()
}

func (c *current) onListContinuationElement1792() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1792() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1792()
}

func (c *current) onListContinuationElement1780(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1780() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1780(stack["delimiter"])
}

func (c *current) onListContinuationElement1802() (any, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1802() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1802()
}

func (c *current) onListContinuationElement1808() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1808() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1808()
}

func (c *current) onListContinuationElement1811() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1811() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1811()
}

func (c *current) onListContinuationElement1799(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1799() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1799(stack["delimiter"])
}

func (c *current) onListContinuationElement1821() (any, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1821() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1821()
}

func (c *current) onListContinuationElement1827() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1827() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1827()
}

func (c *current) onListContinuationElement1830() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1830() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1830()
}

func (c *current) onListContinuationElement1818(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1818() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1818(stack["delimiter"])
}

func (c *current) onListContinuationElement1840() (any, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1840() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1840()
}

func (c *current) onListContinuationElement1846() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1846() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1846()
}

func (c *current) onListContinuationElement1849() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1849() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1849()
}

func (c *current) onListContinuationElement1837(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1837() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1837(stack["delimiter"])
}

func (c *current) onListContinuationElement1859() (any, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1859() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1859()
}

func (c *current) onListContinuationElement1865() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1865() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1865()
}

func (c *current) onListContinuationElement1868() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1868() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1868()
}

func (c *current) onListContinuationElement1856(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1856() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1856(stack["delimiter"])
}

func (c *current) onListContinuationElement1878() (any, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1878() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1878()
}

func (c *current) onListContinuationElement1884() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1884() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1884()
}

func (c *current) onListContinuationElement1887() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1887() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1887()
}

func (c *current) onListContinuationElement1875(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1875() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1875(stack["delimiter"])
}

func (c *current) onListContinuationElement1718(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonListContinuationElement1718() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1718(stack["delimiter"])
}

func (c *current) onListContinuationElement1895() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1895() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1895()
}

func (c *current) onListContinuationElement1899() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1899() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1899()
}

func (c *current) onListContinuationElement1589(content any) (any, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1589() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1589(stack["content"])
}

func (c *current) onListContinuationElement1564(style, content any) (any, error) {
	return types.NewParagraph(style, content)

}

func (p *parser) callonListContinuationElement1564() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1564(stack["style"], stack["content"])
}

func (c *current) onListContinuationElement1(attributes, element any) (any, error) {
	if element, ok := element.(types.WithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	return element, nil

}

func (p *parser) callonListContinuationElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1(stack["attributes"], stack["element"])
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts), nil

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout11() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonCallout11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout11()
}

func (c *current) onCallout15() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonCallout15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout15()
}

func (c *current) onCallout1(ref any) (any, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onShortcutParagraph9() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph9()
}

func (c *current) onShortcutParagraph16() (bool, error) {
	return !c.isWithinLiteralParagraph(), nil

}

func (p *parser) callonShortcutParagraph16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph16()
}

func (c *current) onShortcutParagraph19() (any, error) {
	return types.Tip, nil

}

func (p *parser) callonShortcutParagraph19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph19()
}

func (c *current) onShortcutParagraph21() (any, error) {
	return types.Note, nil

}

func (p *parser) callonShortcutParagraph21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph21()
}

func (c *current) onShortcutParagraph23() (any, error) {
	return types.Important, nil

}

func (p *parser) callonShortcutParagraph23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph23()
}

func (c *current) onShortcutParagraph25() (any, error) {
	return types.Warning, nil

}

func (p *parser) callonShortcutParagraph25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph25()
}

func (c *current) onShortcutParagraph27() (any, error) {
	return types.Caution, nil

}

func (p *parser) callonShortcutParagraph27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph27()
}

func (c *current) onShortcutParagraph31() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph31()
}

func (c *current) onShortcutParagraph29() (any, error) {
	// check
	return types.LiteralParagraph, nil

}

func (p *parser) callonShortcutParagraph29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph29()
}

func (c *current) onShortcutParagraph14(style any) (any, error) {
	return style, nil

}

func (p *parser) callonShortcutParagraph14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph14(stack["style"])
}

func (c *current) onShortcutParagraph38() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph38()
}

func (c *current) onShortcutParagraph41(content any) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonShortcutParagraph41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph41(stack["content"])
}

func (c *current) onShortcutParagraph43() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph43()
}

func (c *current) onShortcutParagraph35(content any) (any, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph35(stack["content"])
}

func (c *current) onShortcutParagraph50(style, firstLine any) (bool, error) {
	// also, make sure that there is no LabeledListElement delimiter (`::` - `::::`)
	//   in the middle of the line (with space afterwards)
	//   or at the end of the line
	return !firstLine.(*types.RawLine).Contains(":: ") &&
		!firstLine.(*types.RawLine).HasSuffix("::"), nil

}

func (p *parser) callonShortcutParagraph50() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph50(stack["style"], stack["firstLine"])
}

func (c *current) onShortcutParagraph63() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph63() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph63()
}

func (c *current) onShortcutParagraph66() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph66()
}

func (c *current) onShortcutParagraph58() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonShortcutParagraph58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph58()
}

func (c *current) onShortcutParagraph85() (any, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph85()
}

func (c *current) onShortcutParagraph91() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph91() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph91()
}

func (c *current) onShortcutParagraph94() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph94() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph94()
}

func (c *current) onShortcutParagraph82(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph82() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph82(stack["delimiter"])
}

func (c *current) onShortcutParagraph104() (any, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph104() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph104()
}

func (c *current) onShortcutParagraph110() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph110() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph110()
}

func (c *current) onShortcutParagraph113() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph113() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph113()
}

func (c *current) onShortcutParagraph101(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph101() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph101(stack["delimiter"])
}

func (c *current) onShortcutParagraph124() (any, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph124() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph124()
}

func (c *current) onShortcutParagraph128() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph128() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph128()
}

func (c *current) onShortcutParagraph131() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph131() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph131()
}

func (c *current) onShortcutParagraph120(language any) (any, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonShortcutParagraph120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph120(stack["language"])
}

func (c *current) onShortcutParagraph141() (any, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph141() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph141()
}

func (c *current) onShortcutParagraph147() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph147() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph147()
}

func (c *current) onShortcutParagraph150() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph150() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph150()
}

func (c *current) onShortcutParagraph138(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph138() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph138(stack["delimiter"])
}

func (c *current) onShortcutParagraph160() (any, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph160() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph160()
}

func (c *current) onShortcutParagraph166() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph166() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph166()
}

func (c *current) onShortcutParagraph169() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph169() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph169()
}

func (c *current) onShortcutParagraph157(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph157() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph157(stack["delimiter"])
}

func (c *current) onShortcutParagraph179() (any, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph179() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph179()
}

func (c *current) onShortcutParagraph185() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph185() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph185()
}

func (c *current) onShortcutParagraph188() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph188() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph188()
}

func (c *current) onShortcutParagraph176(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph176() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph176(stack["delimiter"])
}

func (c *current) onShortcutParagraph198() (any, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph198() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph198()
}

func (c *current) onShortcutParagraph204() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph204() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph204()
}

func (c *current) onShortcutParagraph207() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph207() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph207()
}

func (c *current) onShortcutParagraph195(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph195() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph195(stack["delimiter"])
}

func (c *current) onShortcutParagraph217() (any, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph217() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph217()
}

func (c *current) onShortcutParagraph223() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph223() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph223()
}

func (c *current) onShortcutParagraph226() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph226() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph226()
}

func (c *current) onShortcutParagraph214(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph214() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph214(stack["delimiter"])
}

func (c *current) onShortcutParagraph236() (any, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph236() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph236()
}

func (c *current) onShortcutParagraph242() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph242() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph242()
}

func (c *current) onShortcutParagraph245() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph245() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph245()
}

func (c *current) onShortcutParagraph233(delimiter any) (any, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph233() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph233(stack["delimiter"])
}

func (c *current) onShortcutParagraph76(delimiter any) (any, error) {
	return delimiter, nil

}

func (p *parser) callonShortcutParagraph76() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph76(stack["delimiter"])
}

func (c *current) onShortcutParagraph256() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph256() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph256()
}

func (c *current) onShortcutParagraph258() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph258() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph258()
}

func (c *current) onShortcutParagraph271() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph271() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph271()
}

func (c *current) onShortcutParagraph275() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph275() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph275()
}

func (c *current) onShortcutParagraph265(content any) (any, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonShortcutParagraph265() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph265(stack["content"])
}

func (c *current) onShortcutParagraph285() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph285() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph285()
}

func (c *current) onShortcutParagraph288(content any) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonShortcutParagraph288() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph288(stack["content"])
}

func (c *current) onShortcutParagraph290() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph290() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph290()
}

func (c *current) onShortcutParagraph282(content any) (any, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph282() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph282(stack["content"])
}

func (c *current) onShortcutParagraph53(line any) (any, error) {
	return line, nil

}

func (p *parser) callonShortcutParagraph53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph53(stack["line"])
}

func (c *current) onShortcutParagraph1(style, firstLine, otherLines any) (any, error) {
	return types.NewParagraph(style, append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonShortcutParagraph1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph1(stack["style"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraph7() (bool, error) {
	return !c.isWithinLiteralParagraph(), nil

}

func (p *parser) callonParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph7()
}

func (c *current) onParagraph10() (any, error) {
	return types.Tip, nil

}

func (p *parser) callonParagraph10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph10()
}

func (c *current) onParagraph12() (any, error) {
	return types.Note, nil

}

func (p *parser) callonParagraph12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph12()
}

func (c *current) onParagraph14() (any, error) {
	return types.Important, nil

}

func (p *parser) callonParagraph14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph14()
}

func (c *current) onParagraph16() (any, error) {
	return types.Warning, nil

}

func (p *parser) callonParagraph16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph16()
}

func (c *current) onParagraph18() (any, error) {
	return types.Caution, nil

}

func (p *parser) callonParagraph18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18()
}

func (c *current) onParagraph22() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonParagraph22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph22()
}

func (c *current) onParagraph20() (any, error) {
	// check
	return types.LiteralParagraph, nil

}

func (p *parser) callonParagraph20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph20()
}

func (c *current) onParagraph5(style any) (any, error) {
	return style, nil

}

func (p *parser) callonParagraph5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph5(stack["style"])
}

func (c *current) onParagraph29() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraph29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph29()
}

func (c *current) onParagraph32(content any) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonParagraph32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph32(stack["content"])
}

func (c *current) onParagraph34() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph34()
}

func (c *current) onParagraph26(content any) (any, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["content"])
}

func (c *current) onParagraph53() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraph53() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph53()
}

func (c *current) onParagraph56() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph56()
}

func (c *current) onParagraph48() (any, error) {
	return types.NewBlankLine()

}

func (p *parser) callonParagraph48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph48()
}

func (c *current) onParagraph73() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraph73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph73()
}

func (c *current) onParagraph77() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph77() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph77()
}

func (c *current) onParagraph67(content any) (any, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonParagraph67() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph67(stack["content"])
}

func (c *current) onParagraph87() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraph87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph87()
}

func (c *current) onParagraph90(content any) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonParagraph90() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph90(stack["content"])
}

func (c *current) onParagraph92() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph92()
}

func (c *current) onParagraph84(content any) (any, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph84(stack["content"])
}

func (c *current) onParagraph43(line any) (any, error) {
	return line, nil

}

func (p *parser) callonParagraph43() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph43(stack["line"])
}

func (c *current) onParagraph1(style, firstLine, otherLines any) (any, error) {
	return types.NewParagraph(style, append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonParagraph1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph1(stack["style"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onEscapedQuotedText5() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedQuotedText5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText5()
}

func (c *current) onEscapedQuotedText1(attributes, element any) (any, error) {
	return append([]interface{}{attributes}, element.([]interface{})...), nil

}

func (p *parser) callonEscapedQuotedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["attributes"], stack["element"])
}

func (c *current) onUnescapedQuotedText1(attributes, element any) (any, error) {
	return element.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonUnescapedQuotedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnescapedQuotedText1(stack["attributes"], stack["element"])
}

func (c *current) onQuotedTextElement5() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement5()
}

func (c *current) onQuotedTextElement11() (bool, error) {
	return c.isInlineMacro(string(c.text)), nil

}

func (p *parser) callonQuotedTextElement11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement11()
}

func (c *current) onQuotedTextElement2(text any) (any, error) {
	log.Debugf("new text: '%v'", string(c.text))
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotedTextElement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement2(stack["text"])
}

func (c *current) onQuotedTextElement16() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement16()
}

func (c *current) onQuotedTextElement20() (any, error) {
	//log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonQuotedTextElement20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement20()
}

func (c *current) onQuotedTextElement27() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonQuotedTextElement27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement27()
}

func (c *current) onQuotedTextElement28() (bool, error) {
	//log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonQuotedTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement28()
}

func (c *current) onQuotedTextElement25() (any, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonQuotedTextElement25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement25()
}

func (c *current) onQuotedTextElement36() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes), nil

}

func (p *parser) callonQuotedTextElement36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement36()
}

func (c *current) onQuotedTextElement40() (bool, error) {

	return c.isSubstitutionDisabled(Quotes), nil

}

func (p *parser) callonQuotedTextElement40() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement40()
}

func (c *current) onQuotedTextElement32() (any, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement32()
}

func (c *current) onQuotedTextElement48() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonQuotedTextElement48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement48()
}

func (c *current) onQuotedTextElement55() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement55()
}

func (c *current) onQuotedTextElement51(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonQuotedTextElement51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement51(stack["name"])
}

func (c *current) onQuotedTextElement65() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement65()
}

func (c *current) onQuotedTextElement61(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonQuotedTextElement61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement61(stack["name"])
}

func (c *current) onQuotedTextElement75() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement75()
}

func (c *current) onQuotedTextElement87() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement87()
}

func (c *current) onQuotedTextElement89() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonQuotedTextElement89() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement89()
}

func (c *current) onQuotedTextElement82(start any) (any, error) {
	return start, nil

}

func (p *parser) callonQuotedTextElement82() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement82(stack["start"])
}

func (c *current) onQuotedTextElement71(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonQuotedTextElement71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement71(stack["name"], stack["start"])
}

func (c *current) onQuotedTextElement97() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement97() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement97()
}

func (c *current) onQuotedTextElement109() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement109() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement109()
}

func (c *current) onQuotedTextElement111() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonQuotedTextElement111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement111()
}

func (c *current) onQuotedTextElement104(start any) (any, error) {
	return start, nil

}

func (p *parser) callonQuotedTextElement104() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement104(stack["start"])
}

func (c *current) onQuotedTextElement93(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonQuotedTextElement93() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement93(stack["name"], stack["start"])
}

func (c *current) onQuotedTextElement46(element any) (any, error) {
	return element, nil

}

func (p *parser) callonQuotedTextElement46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement46(stack["element"])
}

func (c *current) onQuotedTextElement117() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuotedTextElement117() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement117()
}

func (c *current) onQuotedTextElement123() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuotedTextElement123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement123()
}

func (c *current) onQuotedTextElement115() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotedTextElement115() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement115()
}

func (c *current) onQuotedTextElement132() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonQuotedTextElement132() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement132()
}

func (c *current) onQuotedTextElement134() (any, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonQuotedTextElement134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement134()
}

func (c *current) onQuotedTextElement130(element any) (any, error) {
	return element, nil

}

func (p *parser) callonQuotedTextElement130() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement130(stack["element"])
}

func (c *current) onQuotedTextElement140() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotedTextElement140() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement140()
}

func (c *current) onQuotedTextElement136(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonQuotedTextElement136() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement136(stack["ref"])
}

func (c *current) onQuotedTextElement144() (any, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("matching anychar '%s' at position %v", string(c.text), c.pos.String())
	}
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement144() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement144()
}

func (c *current) onDoubleQuoteBoldText1(elements any) (any, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element any) (any, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onSingleQuoteBoldText4() (bool, error) {
	log.Debug("SingleQuoteBoldTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonSingleQuoteBoldText4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText4()
}

func (c *current) onSingleQuoteBoldText13(elements any) (bool, error) {
	log.Debug("SingleQuoteBoldTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteBoldText13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText13(stack["elements"])
}

func (c *current) onSingleQuoteBoldText1(elements any) (any, error) {
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements4() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElements4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements4()
}

func (c *current) onSingleQuoteBoldTextElements9(elements any) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteBoldTextElements9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements9(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements1(elements any) (any, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteBoldTextElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement10() (bool, error) {
	log.Debug("SingleQuoteBoldTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteBoldTextElement10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement10()
}

func (c *current) onSingleQuoteBoldTextElement1(element any) (any, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onEscapedBoldText5() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText5()
}

func (c *current) onEscapedBoldText2(backslashes, elements any) (any, error) {

	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText17() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText17()
}

func (c *current) onEscapedBoldText14(backslashes, elements any) (any, error) {

	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText27() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText27()
}

func (c *current) onEscapedBoldText24(backslashes, elements any) (any, error) {

	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements any) (any, error) {
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element any) (any, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onSingleQuoteItalicText4() (bool, error) {
	log.Debug("SingleQuoteItalicTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonSingleQuoteItalicText4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText4()
}

func (c *current) onSingleQuoteItalicText13(elements any) (bool, error) {
	log.Debug("SingleQuoteItalicTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteItalicText13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText13(stack["elements"])
}

func (c *current) onSingleQuoteItalicText1(elements any) (any, error) {

	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements4() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElements4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements4()
}

func (c *current) onSingleQuoteItalicTextElements9(elements any) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteItalicTextElements9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements9(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements any) (any, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteItalicTextElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement10() (bool, error) {
	log.Debug("SingleQuoteItalicTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteItalicTextElement10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement10()
}

func (c *current) onSingleQuoteItalicTextElement1(element any) (any, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onEscapedItalicText5() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText5()
}

func (c *current) onEscapedItalicText2(backslashes, elements any) (any, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText17() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText17()
}

func (c *current) onEscapedItalicText14(backslashes, elements any) (any, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText27() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText27()
}

func (c *current) onEscapedItalicText24(backslashes, elements any) (any, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements any) (any, error) {

	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element any) (any, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextEndDelimiter5() (bool, error) {
	log.Debug("SingleQuoteMonospaceTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMonospaceTextEndDelimiter5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextEndDelimiter5()
}

func (c *current) onSingleQuoteMonospaceText4() (bool, error) {
	log.Debug("SingleQuoteMonospaceTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonSingleQuoteMonospaceText4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText4()
}

func (c *current) onSingleQuoteMonospaceText1(elements any) (any, error) {

	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements4() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements4()
}

func (c *current) onSingleQuoteMonospaceTextElements9(elements any) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMonospaceTextElements9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements9(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements1(elements any) (any, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element any) (any, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onEscapedMonospaceText5() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText5()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements any) (any, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText17() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText17()
}

func (c *current) onEscapedMonospaceText14(backslashes, elements any) (any, error) {
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText27() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText27()
}

func (c *current) onEscapedMonospaceText24(backslashes, elements any) (any, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements any) (any, error) {

	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextElement1(element any) (any, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onSingleQuoteMarkedText4() (bool, error) {
	log.Debug("SingleQuoteMarkedTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonSingleQuoteMarkedText4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText4()
}

func (c *current) onSingleQuoteMarkedText13(elements any) (bool, error) {
	log.Debug("SingleQuoteMarkedTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMarkedText13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText13(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText1(elements any) (any, error) {

	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements4() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElements4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements4()
}

func (c *current) onSingleQuoteMarkedTextElements9(elements any) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMarkedTextElements9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements9(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements1(elements any) (any, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMarkedTextElements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElement10() (bool, error) {
	log.Debug("SingleQuoteMarkedTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement10()
}

func (c *current) onSingleQuoteMarkedTextElement1(element any) (any, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onEscapedMarkedText5() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText5()
}

func (c *current) onEscapedMarkedText2(backslashes, elements any) (any, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText17() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText17()
}

func (c *current) onEscapedMarkedText14(backslashes, elements any) (any, error) {
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText27() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText27()
}

func (c *current) onEscapedMarkedText24(backslashes, elements any) (any, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText24(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element any) (any, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onSubscriptTextElement3() (any, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonSubscriptTextElement3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement3()
}

func (c *current) onEscapedSubscriptText4() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSubscriptText4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText4()
}

func (c *current) onEscapedSubscriptText1(backslashes, element any) (any, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element any) (any, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onSuperscriptTextElement3() (any, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonSuperscriptTextElement3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement3()
}

func (c *current) onEscapedSuperscriptText4() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSuperscriptText4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText4()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element any) (any, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSection3() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonSection3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection3()
}

func (c *current) onSection5() (any, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection5()
}

func (c *current) onSection8(level any) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection8(stack["level"])
}

func (c *current) onSection9(level any) (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSection9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection9(stack["level"])
}

func (c *current) onSection15() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSection15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection15()
}

func (c *current) onSection1(level, title any) (any, error) {
	return types.NewSection(level.(int), title.([]interface{}))

}

func (p *parser) callonSection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onSectionTitle3() error {
	// enable substitutions
	c.withSubstitutions(headerSubstitutions())
	return nil

}

func (p *parser) callonSectionTitle3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitle3()
}

func (c *current) onSectionTitle1(elements any) (any, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonSectionTitle1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitle1(stack["elements"])
}

func (c *current) onSectionTitleElement5() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement5()
}

func (c *current) onSectionTitleElement17() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement17()
}

func (c *current) onSectionTitleElement23() (bool, error) {
	return c.isInlineMacro(string(c.text)), nil

}

func (p *parser) callonSectionTitleElement23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement23()
}

func (c *current) onSectionTitleElement14(text any) (any, error) {
	log.Debugf("new text: '%v'", string(c.text))
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSectionTitleElement14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement14(stack["text"])
}

func (c *current) onSectionTitleElement28() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement28()
}

func (c *current) onSectionTitleElement31() (any, error) {
	//log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSectionTitleElement31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement31()
}

func (c *current) onSectionTitleElement38() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonSectionTitleElement38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement38()
}

func (c *current) onSectionTitleElement39() (bool, error) {
	//log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSectionTitleElement39() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement39()
}

func (c *current) onSectionTitleElement36() (any, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonSectionTitleElement36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement36()
}

func (c *current) onSectionTitleElement48() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes), nil

}

func (p *parser) callonSectionTitleElement48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement48()
}

func (c *current) onSectionTitleElement52() (bool, error) {

	return c.isSubstitutionDisabled(Quotes), nil

}

func (p *parser) callonSectionTitleElement52() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement52()
}

func (c *current) onSectionTitleElement44() (any, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement44()
}

func (c *current) onSectionTitleElement63() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSectionTitleElement63() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement63()
}

func (c *current) onSectionTitleElement65() (any, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSectionTitleElement65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement65()
}

func (c *current) onSectionTitleElement61(element any) (any, error) {
	return element, nil

}

func (p *parser) callonSectionTitleElement61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement61(stack["element"])
}

func (c *current) onSectionTitleElement70() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonSectionTitleElement70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement70()
}

func (c *current) onSectionTitleElement77() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement77() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement77()
}

func (c *current) onSectionTitleElement73(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSectionTitleElement73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement73(stack["name"])
}

func (c *current) onSectionTitleElement87() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement87() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement87()
}

func (c *current) onSectionTitleElement83(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSectionTitleElement83() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement83(stack["name"])
}

func (c *current) onSectionTitleElement97() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement97() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement97()
}

func (c *current) onSectionTitleElement109() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement109() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement109()
}

func (c *current) onSectionTitleElement111() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSectionTitleElement111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement111()
}

func (c *current) onSectionTitleElement104(start any) (any, error) {
	return start, nil

}

func (p *parser) callonSectionTitleElement104() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement104(stack["start"])
}

func (c *current) onSectionTitleElement93(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSectionTitleElement93() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement93(stack["name"], stack["start"])
}

func (c *current) onSectionTitleElement119() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement119() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement119()
}

func (c *current) onSectionTitleElement131() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement131() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement131()
}

func (c *current) onSectionTitleElement133() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSectionTitleElement133() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement133()
}

func (c *current) onSectionTitleElement126(start any) (any, error) {
	return start, nil

}

func (p *parser) callonSectionTitleElement126() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement126(stack["start"])
}

func (c *current) onSectionTitleElement115(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSectionTitleElement115() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement115(stack["name"], stack["start"])
}

func (c *current) onSectionTitleElement68(element any) (any, error) {
	return element, nil

}

func (p *parser) callonSectionTitleElement68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement68(stack["element"])
}

func (c *current) onSectionTitleElement141() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement141() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement141()
}

func (c *current) onSectionTitleElement137(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSectionTitleElement137() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement137(stack["ref"])
}

func (c *current) onSectionTitleElement147() (bool, error) {
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSectionTitleElement147() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement147()
}

func (c *current) onSectionTitleElement157() (any, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSectionTitleElement157() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement157()
}

func (c *current) onSectionTitleElement164() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement164() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement164()
}

func (c *current) onSectionTitleElement160(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSectionTitleElement160() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement160(stack["ref"])
}

func (c *current) onSectionTitleElement170() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonSectionTitleElement170() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement170()
}

func (c *current) onSectionTitleElement177() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement177() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement177()
}

func (c *current) onSectionTitleElement173(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSectionTitleElement173() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement173(stack["name"])
}

func (c *current) onSectionTitleElement187() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement187() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement187()
}

func (c *current) onSectionTitleElement183(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSectionTitleElement183() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement183(stack["name"])
}

func (c *current) onSectionTitleElement197() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement197() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement197()
}

func (c *current) onSectionTitleElement209() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement209() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement209()
}

func (c *current) onSectionTitleElement211() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSectionTitleElement211() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement211()
}

func (c *current) onSectionTitleElement204(start any) (any, error) {
	return start, nil

}

func (p *parser) callonSectionTitleElement204() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement204(stack["start"])
}

func (c *current) onSectionTitleElement193(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSectionTitleElement193() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement193(stack["name"], stack["start"])
}

func (c *current) onSectionTitleElement219() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement219() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement219()
}

func (c *current) onSectionTitleElement231() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement231() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement231()
}

func (c *current) onSectionTitleElement233() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSectionTitleElement233() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement233()
}

func (c *current) onSectionTitleElement226(start any) (any, error) {
	return start, nil

}

func (p *parser) callonSectionTitleElement226() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement226(stack["start"])
}

func (c *current) onSectionTitleElement215(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSectionTitleElement215() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement215(stack["name"], stack["start"])
}

func (c *current) onSectionTitleElement168(element any) (any, error) {
	return element, nil

}

func (p *parser) callonSectionTitleElement168() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement168(stack["element"])
}

func (c *current) onSectionTitleElement237() (any, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSectionTitleElement237() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement237()
}

func (c *current) onSectionTitleElement153(elements any) (any, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonSectionTitleElement153() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement153(stack["elements"])
}

func (c *current) onSectionTitleElement149(id any) (any, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonSectionTitleElement149() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement149(stack["id"])
}

func (c *current) onSectionTitleElement241() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement241() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement241()
}

func (c *current) onSectionTitleElement245() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement245() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement245()
}

func (c *current) onSectionTitleElement145(id any) (any, error) {

	return id, nil

}

func (p *parser) callonSectionTitleElement145() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement145(stack["id"])
}

func (c *current) onSectionTitleElement256() (any, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement256() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement256()
}

func (c *current) onSectionTitleElement252(id any) (any, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSectionTitleElement252() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement252(stack["id"])
}

func (c *current) onSectionTitleElement264() (any, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement264() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement264()
}

func (c *current) onSectionTitleElement260(id any) (any, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineAnchor(id.(string))

}

func (p *parser) callonSectionTitleElement260() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement260(stack["id"])
}

func (c *current) onSectionTitleElement269() (any, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("matching anychar '%s' at position %v", string(c.text), c.pos.String())
	}
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement269() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement269()
}

func (c *current) onSectionTitleElement1(element any) (any, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSectionTitleElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement1(stack["element"])
}

func (c *current) onNormalGroup14() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup14()
}

func (c *current) onNormalGroup20() (bool, error) {
	return c.isInlineMacro(string(c.text)), nil

}

func (p *parser) callonNormalGroup20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup20()
}

func (c *current) onNormalGroup11(text any) (any, error) {
	log.Debugf("new text: '%v'", string(c.text))
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroup11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup11(stack["text"])
}

func (c *current) onNormalGroup25() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonNormalGroup25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup25()
}

func (c *current) onNormalGroup29() (any, error) {
	//log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonNormalGroup29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup29()
}

func (c *current) onNormalGroup36() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonNormalGroup36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup36()
}

func (c *current) onNormalGroup37() (bool, error) {
	//log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonNormalGroup37() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup37()
}

func (c *current) onNormalGroup34() (any, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonNormalGroup34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup34()
}

func (c *current) onNormalGroup45() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes), nil

}

func (p *parser) callonNormalGroup45() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup45()
}

func (c *current) onNormalGroup49() (bool, error) {

	return c.isSubstitutionDisabled(Quotes), nil

}

func (p *parser) callonNormalGroup49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup49()
}

func (c *current) onNormalGroup41() (any, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonNormalGroup41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup41()
}

func (c *current) onNormalGroup55() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup55()
}

func (c *current) onNormalGroup62() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonNormalGroup62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup62()
}

func (c *current) onNormalGroup69() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup69() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup69()
}

func (c *current) onNormalGroup65(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonNormalGroup65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup65(stack["name"])
}

func (c *current) onNormalGroup79() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup79() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup79()
}

func (c *current) onNormalGroup75(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonNormalGroup75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup75(stack["name"])
}

func (c *current) onNormalGroup89() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup89() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup89()
}

func (c *current) onNormalGroup101() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup101() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup101()
}

func (c *current) onNormalGroup103() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroup103() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup103()
}

func (c *current) onNormalGroup96(start any) (any, error) {
	return start, nil

}

func (p *parser) callonNormalGroup96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup96(stack["start"])
}

func (c *current) onNormalGroup85(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonNormalGroup85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup85(stack["name"], stack["start"])
}

func (c *current) onNormalGroup111() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup111() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup111()
}

func (c *current) onNormalGroup123() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup123()
}

func (c *current) onNormalGroup125() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroup125() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup125()
}

func (c *current) onNormalGroup118(start any) (any, error) {
	return start, nil

}

func (p *parser) callonNormalGroup118() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup118(stack["start"])
}

func (c *current) onNormalGroup107(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonNormalGroup107() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup107(stack["name"], stack["start"])
}

func (c *current) onNormalGroup60(element any) (any, error) {
	return element, nil

}

func (p *parser) callonNormalGroup60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup60(stack["element"])
}

func (c *current) onNormalGroup134() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonNormalGroup134() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup134()
}

func (c *current) onNormalGroup136() (any, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonNormalGroup136() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup136()
}

func (c *current) onNormalGroup132(element any) (any, error) {
	return element, nil

}

func (p *parser) callonNormalGroup132() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup132(stack["element"])
}

func (c *current) onNormalGroup140() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements), nil

}

func (p *parser) callonNormalGroup140() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup140()
}

func (c *current) onNormalGroup142() (bool, error) {

	log.Debug("LineBreak")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonNormalGroup142() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup142()
}

func (c *current) onNormalGroup144() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonNormalGroup144() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup144()
}

func (c *current) onNormalGroup148() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup148() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup148()
}

func (c *current) onNormalGroup138() (any, error) {
	return types.NewLineBreak()

}

func (p *parser) callonNormalGroup138() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup138()
}

func (c *current) onNormalGroup160() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNormalGroup160() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup160()
}

func (c *current) onNormalGroup156(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonNormalGroup156() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup156(stack["ref"])
}

func (c *current) onNormalGroup164() (any, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("matching anychar '%s' at position %v", string(c.text), c.pos.String())
	}
	return string(c.text), nil

}

func (p *parser) callonNormalGroup164() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup164()
}

func (c *current) onNormalGroup5(element any) (any, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonNormalGroup5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup5(stack["element"])
}

func (c *current) onNormalGroup1(elements any) (any, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonNormalGroup1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onAttributeStructuredValue1(elements any) (any, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonAttributeStructuredValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValue1(stack["elements"])
}

func (c *current) onAttributeStructuredValueElement10() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement10()
}

func (c *current) onAttributeStructuredValueElement16() (bool, error) {
	return c.isInlineMacro(string(c.text)), nil

}

func (p *parser) callonAttributeStructuredValueElement16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement16()
}

func (c *current) onAttributeStructuredValueElement7(text any) (any, error) {
	log.Debugf("new text: '%v'", string(c.text))
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeStructuredValueElement7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement7(stack["text"])
}

func (c *current) onAttributeStructuredValueElement21() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement21()
}

func (c *current) onAttributeStructuredValueElement28() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes), nil

}

func (p *parser) callonAttributeStructuredValueElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement28()
}

func (c *current) onAttributeStructuredValueElement32() (bool, error) {

	return c.isSubstitutionDisabled(Quotes), nil

}

func (p *parser) callonAttributeStructuredValueElement32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement32()
}

func (c *current) onAttributeStructuredValueElement24() (any, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement24()
}

func (c *current) onAttributeStructuredValueElement42() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonAttributeStructuredValueElement42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement42()
}

func (c *current) onAttributeStructuredValueElement44() (any, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonAttributeStructuredValueElement44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement44()
}

func (c *current) onAttributeStructuredValueElement40(element any) (any, error) {
	return element, nil

}

func (p *parser) callonAttributeStructuredValueElement40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement40(stack["element"])
}

func (c *current) onAttributeStructuredValueElement50() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeStructuredValueElement50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement50()
}

func (c *current) onAttributeStructuredValueElement46(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonAttributeStructuredValueElement46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement46(stack["ref"])
}

func (c *current) onAttributeStructuredValueElement54() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeStructuredValueElement54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement54()
}

func (c *current) onAttributeStructuredValueElement59() (any, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("matching anychar '%s' at position %v", string(c.text), c.pos.String())
	}
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement59()
}

func (c *current) onAttributeStructuredValueElement1(element any) (any, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonAttributeStructuredValueElement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement1(stack["element"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros), nil

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro17() (any, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro17()
}

func (c *current) onInlineMacro13(id any) (any, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineMacro13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro13(stack["id"])
}

func (c *current) onInlineMacro25() (any, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro25()
}

func (c *current) onInlineMacro21(id any) (any, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineAnchor(id.(string))

}

func (p *parser) callonInlineMacro21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro21(stack["id"])
}

func (c *current) onInlineMacro37() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro37()
}

func (c *current) onInlineMacro33() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro33()
}

func (c *current) onInlineMacro44() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro44()
}

func (c *current) onInlineMacro48() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro48()
}

func (c *current) onInlineMacro55() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro55()
}

func (c *current) onInlineMacro51() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro51()
}

func (c *current) onInlineMacro41(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineMacro41() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro41(stack["content"])
}

func (c *current) onInlineMacro62() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro62()
}

func (c *current) onInlineMacro66() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro66()
}

func (c *current) onInlineMacro73() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro73() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro73()
}

func (c *current) onInlineMacro69() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro69() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro69()
}

func (c *current) onInlineMacro59(content any) (any, error) {
	return content, nil
}

func (p *parser) callonInlineMacro59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro59(stack["content"])
}

func (c *current) onInlineMacro29(term1, term2, term3 any) (any, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonInlineMacro29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro29(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onInlineMacro1(element any) (any, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs), nil

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough11() (any, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough11()
}

func (c *current) onInlinePassthrough21() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough21()
}

func (c *current) onInlinePassthrough24() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough24()
}

func (c *current) onInlinePassthrough17() (any, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough17()
}

func (c *current) onInlinePassthrough6(content any) (any, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough6(stack["content"])
}

func (c *current) onInlinePassthrough45() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough45()
}

func (c *current) onInlinePassthrough48() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough48()
}

func (c *current) onInlinePassthrough58() (any, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough58()
}

func (c *current) onInlinePassthrough65() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough65() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough65()
}

func (c *current) onInlinePassthrough40() (any, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough40()
}

func (c *current) onInlinePassthrough74() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough74()
}

func (c *current) onInlinePassthrough77() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough77() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough77()
}

func (c *current) onInlinePassthrough71() (any, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough71()
}

func (c *current) onInlinePassthrough35(content any) (any, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough35(stack["content"])
}

func (c *current) onInlinePassthrough1(element any) (any, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onQuote2() (bool, error) {
	return c.isSubstitutionEnabled(Quotes), nil

}

func (p *parser) callonQuote2() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote2()
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element any) (any, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSymbol7() (any, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSymbol7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol7()
}

func (c *current) onSymbol9() (any, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSymbol9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol9()
}

func (c *current) onSymbol11() (any, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSymbol11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol11()
}

func (c *current) onSymbol13() (any, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSymbol13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol13()
}

func (c *current) onSymbol15() (any, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSymbol15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol15()
}

func (c *current) onSymbol20() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSymbol20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol20()
}

func (c *current) onSymbol22() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonSymbol22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol22()
}

func (c *current) onSymbol26() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSymbol26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol26()
}

func (c *current) onSymbol17() (any, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSymbol17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol17()
}

func (c *current) onSymbol36() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSymbol36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol36()
}

func (c *current) onSymbol40() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSymbol40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol40()
}

func (c *current) onSymbol33() (any, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSymbol33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol33()
}

func (c *current) onSymbol47() (any, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSymbol47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol47()
}

func (c *current) onSymbol49() (any, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSymbol49() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol49()
}

func (c *current) onSymbol51() (any, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSymbol51() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol51()
}

func (c *current) onSymbol2() (any, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSymbol2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol2()
}

func (c *current) onSymbol54() (any, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSymbol54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol54()
}

func (c *current) onSymbol56() (any, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSymbol56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol56()
}

func (c *current) onSymbol58() (any, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSymbol58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol58()
}

func (c *current) onSymbol60() (any, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSymbol60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol60()
}

func (c *current) onSymbol65() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSymbol65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol65()
}

func (c *current) onSymbol67() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonSymbol67() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol67()
}

func (c *current) onSymbol71() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSymbol71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol71()
}

func (c *current) onSymbol62() (any, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSymbol62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol62()
}

func (c *current) onSymbol81() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSymbol81() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol81()
}

func (c *current) onSymbol85() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSymbol85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol85()
}

func (c *current) onSymbol78() (any, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSymbol78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol78()
}

func (c *current) onSymbol92() (any, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSymbol92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol92()
}

func (c *current) onSymbol94() (any, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSymbol94() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol94()
}

func (c *current) onSymbol96() (any, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSymbol96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol96()
}

func (c *current) onSymbol98() (any, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSymbol98() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol98()
}

func (c *current) onQuotationMark8() (bool, error) {
	log.Debug("SingleQuoteMonospaceTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonQuotationMark8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotationMark8()
}

func (c *current) onQuotationMark2() (any, error) {
	// do not conflict with quotation mark within monospace text
	return types.NewSymbol("`\"")

}

func (p *parser) callonQuotationMark2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotationMark2()
}

func (c *current) onQuotationMark12() (any, error) {
	// do not conflict with quotation mark within monospace text
	return types.NewSymbol("\"`")

}

func (p *parser) callonQuotationMark12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotationMark12()
}

func (c *current) onQuotationMark23() (bool, error) {
	log.Debug("SingleQuoteMonospaceTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonQuotationMark23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotationMark23()
}

func (c *current) onQuotationMark17() (any, error) {
	// do not conflict with quotation mark within monospace text
	return types.NewSymbol("`'")

}

func (p *parser) callonQuotationMark17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotationMark17()
}

func (c *current) onQuotationMark27() (any, error) {
	// do not conflict with quotation mark within monospace text
	return types.NewSymbol("'`")

}

func (p *parser) callonQuotationMark27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotationMark27()
}

func (c *current) onTableColumnsAttribute16() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute16()
}

func (c *current) onTableColumnsAttribute13(n any) (any, error) {
	return n, nil
}

func (p *parser) callonTableColumnsAttribute13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute13(stack["n"])
}

func (c *current) onTableColumnsAttribute26() (any, error) {
	return types.HAlignLeft, nil
}

func (p *parser) callonTableColumnsAttribute26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute26()
}

func (c *current) onTableColumnsAttribute28() (any, error) {
	return types.HAlignRight, nil
}

func (p *parser) callonTableColumnsAttribute28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute28()
}

func (c *current) onTableColumnsAttribute30() (any, error) {
	return types.HAlignCenter, nil
}

func (p *parser) callonTableColumnsAttribute30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute30()
}

func (c *current) onTableColumnsAttribute35() (any, error) {
	return types.VAlignTop, nil
}

func (p *parser) callonTableColumnsAttribute35() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute35()
}

func (c *current) onTableColumnsAttribute37() (any, error) {
	return types.VAlignBottom, nil
}

func (p *parser) callonTableColumnsAttribute37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute37()
}

func (c *current) onTableColumnsAttribute39() (any, error) {
	return types.VAlignMiddle, nil
}

func (p *parser) callonTableColumnsAttribute39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute39()
}

func (c *current) onTableColumnsAttribute44() (any, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute44()
}

func (c *current) onTableColumnsAttribute50() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute50()
}

func (c *current) onTableColumnsAttribute54() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute54()
}

func (c *current) onTableColumnsAttribute62(multiplier, halign, valign, weight, style, comma any) (bool, error) {
	// make sure that at least something was set
	// (otherwise the parser will run indefinitely)
	return multiplier != nil ||
		halign != nil ||
		valign != nil ||
		weight != nil ||
		style != nil ||
		comma != nil, nil

}

func (p *parser) callonTableColumnsAttribute62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute62(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute7(multiplier, halign, valign, weight, style, comma any) (any, error) {
	return types.NewTableColumn(multiplier, halign, valign, weight, style)

}

func (p *parser) callonTableColumnsAttribute7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute7(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute1(cols any) (any, error) {
	return cols, nil

}

func (p *parser) callonTableColumnsAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute1(stack["cols"])
}

func (c *current) onUserMacroBlock4() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock4()
}

func (c *current) onUserMacroBlock7(name any) (bool, error) {
	// skip if no macro was registered under the given name
	return c.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock7(stack["name"])
}

func (c *current) onUserMacroBlock10() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock10()
}

func (c *current) onUserMacroBlock16() (any, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonUserMacroBlock16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock16()
}

func (c *current) onUserMacroBlock1(name, value, attributes any) (any, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonUserMacroBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onInlineUserMacro4() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro4()
}

func (c *current) onInlineUserMacro7(name any) (bool, error) {
	// skip if no macro was registered under the given name
	return c.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro7(stack["name"])
}

func (c *current) onInlineUserMacro10() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro10()
}

func (c *current) onInlineUserMacro1(name, value, attributes any) (any, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonInlineUserMacro1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onFileLocation7() (any, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below
	return string(c.text), nil

}

func (p *parser) callonFileLocation7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation7()
}

func (c *current) onFileLocation18() (any, error) {

	return string(c.text), nil

}

func (p *parser) callonFileLocation18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation18()
}

func (c *current) onFileLocation25() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs), nil

}

func (p *parser) callonFileLocation25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation25()
}

func (c *current) onFileLocation32() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation32()
}

func (c *current) onFileLocation28(name any) (any, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileLocation28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation28(stack["name"])
}

func (c *current) onFileLocation42() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation42()
}

func (c *current) onFileLocation38(name any) (any, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonFileLocation38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation38(stack["name"])
}

func (c *current) onFileLocation52() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation52()
}

func (c *current) onFileLocation64() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation64()
}

func (c *current) onFileLocation66() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation66()
}

func (c *current) onFileLocation59(start any) (any, error) {
	return start, nil

}

func (p *parser) callonFileLocation59() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation59(stack["start"])
}

func (c *current) onFileLocation48(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFileLocation48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation48(stack["name"], stack["start"])
}

func (c *current) onFileLocation74() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation74()
}

func (c *current) onFileLocation86() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation86() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation86()
}

func (c *current) onFileLocation88() (any, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation88()
}

func (c *current) onFileLocation81(start any) (any, error) {
	return start, nil

}

func (p *parser) callonFileLocation81() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation81(stack["start"])
}

func (c *current) onFileLocation70(name, start any) (any, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFileLocation70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation70(stack["name"], stack["start"])
}

func (c *current) onFileLocation23(element any) (any, error) {
	return element, nil

}

func (p *parser) callonFileLocation23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation23(stack["element"])
}

func (c *current) onFileLocation96() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation96()
}

func (c *current) onFileLocation92(ref any) (any, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileLocation92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation92(stack["ref"])
}

func (c *current) onFileLocation100() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation100()
}

func (c *current) onFileLocation3(elements any) (any, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileLocation3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation3(stack["elements"])
}

func (c *current) onFileLocation1(path any) (any, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
